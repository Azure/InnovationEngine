(function(e,b){typeof exports=="object"&&typeof module<"u"?b(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material/Typography"),require("react")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material/Typography","react"],b):(e=typeof globalThis<"u"?globalThis:e||self,b(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.MuiMaterial.Typography,e.pluginLib.React))})(this,function(e,b,I,L,P){"use strict";const W=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},r=W(L),s=W(P),G=({step:t,onStepChange:o,onRunStep:f,currentContext:x,currentNamespace:l,authoringPhase:u="refine-content"})=>{const[c,v]=s.default.useState(!1),[n,i]=s.default.useState(""),[h,C]=s.default.useState(!1),[m,k]=s.default.useState([]),y=()=>{switch(u){case"implement-content":return"Step 3: Implement executable content based on the approved overview.";case"refine-content":return"Step 4: Refine the content to ensure it works correctly and is easy to follow.";default:return""}},E=()=>{f(t.id)},B=d=>{o({...t,title:d.target.value})},A=d=>{o({...t,description:d.target.value})},D=d=>{o({...t,code:d.target.value})},p=()=>{n.trim()&&(k(d=>[...d,{role:"user",content:n}]),setTimeout(()=>{k(d=>[...d,{role:"assistant",content:`Here's my suggestion for your request: "${n}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),i("")},1e3))},w=d=>{o({...t,description:t.description+`

`+d.content}),C(!1)},O=()=>{if(!t.executed)return null;let d="",S="";switch(t.executionStatus){case"success":d="#4caf50",S="Success";break;case"failure":d="#f44336",S="Failed";break;case"running":d="#2196f3",S="Running...";break;default:return null}return e.jsx("span",{style:{backgroundColor:d,color:"white",padding:"3px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px"},children:S})},$=()=>{const d="default";return x!==d?e.jsx("div",{style:{marginTop:"10px",padding:"8px",backgroundColor:"#fff3cd",borderRadius:"4px"},children:e.jsxs(r.default,{variant:"body2",style:{color:"#856404"},children:['⚠️ This step may require the "',d,`" context, but you're currently in "`,x,'".']})}):null};return e.jsxs("div",{style:{border:"1px solid #e0e0e0",borderRadius:"8px",marginBottom:"20px",overflow:"hidden"},children:[e.jsxs("div",{style:{padding:"12px 16px",backgroundColor:"#f5f5f5",display:"flex",justifyContent:"space-between",alignItems:"center"},children:[c?e.jsx("input",{type:"text",value:t.title,onChange:B,style:{fontSize:"18px",fontWeight:"bold",padding:"4px",width:"60%"}}):e.jsxs(r.default,{variant:"h6",style:{margin:0},children:[t.title," ",O()]}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>v(!c),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:c?"Done":"Edit"}),e.jsx("button",{onClick:()=>C(!h),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Get Help"}),e.jsx("button",{onClick:E,disabled:t.executionStatus==="running","aria-label":`Run step ${t.title}`,style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:t.executionStatus==="running"?"not-allowed":"pointer",opacity:t.executionStatus==="running"?.7:1},children:t.executionStatus==="running"?"Running...":"Run"})]})]}),e.jsxs("div",{style:{padding:"16px"},children:[(u==="implement-content"||u==="refine-content")&&e.jsx("div",{style:{marginBottom:"16px",padding:"8px 12px",backgroundColor:"#f0f9ff",borderLeft:"4px solid #1976d2"},children:e.jsx(r.default,{variant:"body2",children:y()})}),$(),c?e.jsxs("div",{children:[e.jsx(r.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Description:"}),e.jsx("textarea",{value:t.description,onChange:A,style:{width:"100%",minHeight:"200px",padding:"8px",marginBottom:"16px",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"}}),t.isCodeBlock&&e.jsxs("div",{children:[e.jsx(r.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Code:"}),e.jsx("textarea",{value:t.code||"",onChange:D,style:{width:"100%",minHeight:"250px",padding:"8px",fontFamily:"monospace",backgroundColor:"#f8f8f8",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"}})]})]}):e.jsxs("div",{children:[e.jsx(r.default,{variant:"body1",style:{whiteSpace:"pre-wrap",marginBottom:"16px"},children:t.description}),t.isCodeBlock&&t.code&&e.jsx("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginBottom:"16px",overflowX:"auto"},children:e.jsx("pre",{style:{margin:0,fontFamily:"monospace"},children:t.code})})]}),t.executed&&t.executionOutput&&e.jsxs("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginTop:"16px",border:"1px solid #ddd"},children:[e.jsx(r.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Output:"}),e.jsx("pre",{style:{margin:0,fontFamily:"monospace",whiteSpace:"pre-wrap"},children:t.executionOutput})]}),u&&e.jsxs("div",{style:{marginTop:"16px",padding:"12px",backgroundColor:"#e8f5e9",borderRadius:"4px"},children:[e.jsx(r.default,{variant:"subtitle1",style:{marginBottom:"8px",fontWeight:"medium"},children:"Phase Guidance:"}),e.jsx(r.default,{variant:"body2",style:{margin:0},children:y()})]})]}),h&&e.jsxs("div",{style:{padding:"16px",borderTop:"1px solid #e0e0e0"},children:[e.jsx(r.default,{variant:"h6",style:{marginBottom:"12px"},children:"Copilot Assistance"}),e.jsx("div",{style:{maxHeight:"200px",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:m.map((d,S)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:d.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:d.role==="user"?"#1976d2":"#ffffff",color:d.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:d.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(r.default,{children:d.content}),d.role==="assistant"&&e.jsx("button",{onClick:()=>w(d),style:{marginTop:"8px",padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"})]})},S))}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("textarea",{value:n,onChange:d=>i(d.target.value),placeholder:"Ask for help with this step (e.g., 'Help me improve the code for this step')",style:{flexGrow:1,padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"150px",fontSize:"14px",lineHeight:"1.5"}}),e.jsx("button",{onClick:p,disabled:!n.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:n.trim()?"pointer":"not-allowed",opacity:n.trim()?1:.7},children:"Ask Copilot"})]})]})]})},q=({initialOverview:t="",onSaveOverview:o,onGenerateSteps:f,authoringPhase:x="create-overview"})=>{const[l,u]=s.default.useState(""),[c,v]=s.default.useState(t),[n,i]=s.default.useState(!1),[h,C]=s.default.useState([]),[m,k]=s.default.useState(!1),[y,E]=s.default.useState("prompt"),B=()=>{l.trim()&&(C(p=>[...p,{role:"user",content:l}]),k(!0),setTimeout(()=>{const p=`
# ${l}

## Overview

This is an Executable Document that will guide you through the process of ${l.toLowerCase()}. 
Follow the steps below to complete this task in your Kubernetes environment.

## Prerequisites

- Kubernetes cluster
- kubectl configured to access your cluster
- Necessary permissions to deploy resources

## Expected Outcome

Successfully ${l.toLowerCase()} in your Kubernetes cluster.
      `.trim();v(p),C(w=>[...w,{role:"assistant",content:`I've generated an overview for "${l}". You can edit it directly or ask me to make changes.`}]),u(""),k(!1),E("preview")},1e3))},A=()=>{o(c),f()},D=()=>{switch(x){case"create-overview":return"Approve & Create Overview";case"refine-overview":return"Approve & Generate Steps";default:return"Approve & Generate Steps"}};return e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsx(r.default,{variant:"h5",style:{marginBottom:"16px"},children:x==="create-overview"?"Create Document Overview":"Refine Document Overview"}),e.jsx("div",{style:{padding:"8px 12px",backgroundColor:"#f0f9ff",borderLeft:"4px solid #1976d2",marginBottom:"16px"},children:e.jsx(r.default,{variant:"body2",children:x==="create-overview"?"Step 1: Create an overview that describes what this document will accomplish.":"Step 2: Refine your overview to ensure it accurately describes the intended workflow."})}),e.jsxs("div",{style:{display:"flex",marginBottom:"16px"},children:[e.jsx("button",{onClick:()=>E("prompt"),style:{flex:1,padding:"8px",backgroundColor:y==="prompt"?"#1976d2":"#f1f1f1",color:y==="prompt"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:y==="prompt"?"bold":"normal"},children:"Prompt & Conversation"}),e.jsx("button",{onClick:()=>E("preview"),style:{flex:1,padding:"8px",backgroundColor:y==="preview"?"#1976d2":"#f1f1f1",color:y==="preview"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:y==="preview"?"bold":"normal"},children:"Preview & Edit"})]}),e.jsxs("div",{style:{flex:1,display:"flex",overflow:"hidden"},children:[e.jsxs("div",{style:{flex:y==="prompt"?1:0,display:y==="prompt"?"flex":"none",flexDirection:"column",overflow:"hidden"},children:[e.jsxs("div",{style:{marginBottom:"16px"},children:[e.jsx(r.default,{variant:"subtitle1",children:"What kind of Executable Document do you want to create?"}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",gap:"8px"},children:[e.jsx("input",{type:"text",value:l,onChange:p=>u(p.target.value),placeholder:"E.g., Create a deployment for a Node.js application",style:{flex:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc"}}),e.jsx("button",{onClick:B,disabled:m||!l.trim(),style:{padding:"10px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:m||!l.trim()?"not-allowed":"pointer",opacity:m||!l.trim()?.7:1},children:m?"Generating...":"Generate"})]})]}),e.jsxs("div",{style:{flex:1,overflowY:"auto",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#f9f9f9"},children:[h.length===0&&e.jsx(r.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Enter a prompt above to start generating your Executable Document"}),h.map((p,w)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:p.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:p.role==="user"?"#1976d2":"#ffffff",color:p.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:p.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(r.default,{children:p.content})})},w)),m&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(r.default,{color:"textSecondary",children:"Generating overview..."})})]})]}),e.jsxs("div",{style:{flex:y==="preview"?1:0,display:y==="preview"?"flex":"none",flexDirection:"column",overflow:"hidden"},children:[e.jsxs("div",{style:{marginBottom:"16px",display:"flex",justifyContent:"space-between"},children:[e.jsx(r.default,{variant:"subtitle1",children:n?"Edit Overview":"Preview Overview"}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>i(!n),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:n?"Preview":"Edit"}),e.jsx("button",{onClick:A,disabled:!c.trim(),style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:c.trim()?"pointer":"not-allowed",opacity:c.trim()?1:.7},children:D()})]})]}),e.jsx("div",{style:{flex:1,border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#ffffff",overflowY:"auto"},children:n?e.jsx("textarea",{value:c,onChange:p=>v(p.target.value),style:{width:"100%",height:"100%",minHeight:"400px",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",fontFamily:"monospace",fontSize:"14px",lineHeight:"1.5",resize:"none"}}):e.jsx("div",{style:{padding:"16px",maxWidth:"800px",margin:"0 auto",fontFamily:"system-ui, -apple-system, sans-serif",lineHeight:1.6},children:c.split(`
`).map((p,w)=>p.startsWith("# ")?e.jsx(r.default,{variant:"h4",style:{marginBottom:"16px"},children:p.substring(2)},w):p.startsWith("## ")?e.jsx(r.default,{variant:"h5",style:{marginTop:"24px",marginBottom:"12px"},children:p.substring(3)},w):p.startsWith("- ")?e.jsx(r.default,{component:"li",style:{marginLeft:"20px",marginBottom:"8px"},children:p.substring(2)},w):p===""?e.jsx("br",{},w):e.jsx(r.default,{paragraph:!0,children:p},w))})})]})]})]})},F=({execDoc:t,onSave:o,onLoad:f,onExport:x,autoSaveEnabled:l,onToggleAutoSave:u,autoSaveInterval:c,onChangeAutoSaveInterval:v,recentFiles:n,onOpenRecentFile:i})=>{const h=()=>{t&&o(t)},C=m=>{v(parseInt(m.target.value,10))};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(r.default,{variant:"h6",style:{marginBottom:"12px"},children:"File Operations"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px"},children:[e.jsx("button",{onClick:h,disabled:!t,style:{padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Save to Disk"}),e.jsx("button",{onClick:f,style:{padding:"8px 16px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Load from Disk"}),e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsxs("label",{style:{marginRight:"8px",display:"flex",alignItems:"center"},children:[e.jsx("input",{type:"checkbox",checked:l,onChange:u,style:{marginRight:"4px"}}),"Auto-save"]}),l&&e.jsxs("select",{value:c,onChange:C,style:{padding:"6px",borderRadius:"4px",border:"1px solid #ddd"},children:[e.jsx("option",{value:30,children:"Every 30 seconds"}),e.jsx("option",{value:60,children:"Every minute"}),e.jsx("option",{value:300,children:"Every 5 minutes"}),e.jsx("option",{value:600,children:"Every 10 minutes"})]})]})]}),e.jsxs("div",{style:{marginTop:"12px"},children:[e.jsx(r.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Save as:"}),e.jsx("div",{style:{display:"flex",gap:"8px"},children:e.jsx("button",{onClick:()=>x("markdown"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Markdown"})})]}),n.length>0&&e.jsxs("div",{style:{marginTop:"16px"},children:[e.jsx(r.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Recent Files:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"8px"},children:n.map((m,k)=>e.jsx("button",{onClick:()=>i(m),style:{padding:"6px 12px",backgroundColor:"#f5f5f5",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer",textOverflow:"ellipsis",overflow:"hidden",maxWidth:"200px",whiteSpace:"nowrap"},children:m.split("/").pop()},k))})]})]})},N=({contexts:t,currentContext:o,onChangeContext:f,namespaces:x,currentNamespace:l,onChangeNamespace:u,isAdmin:c})=>{const v=i=>{f(i.target.value)},n=i=>{u(i.target.value)};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(r.default,{variant:"h6",style:{marginBottom:"12px"},children:"Kubernetes Context"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px"},children:[e.jsxs("div",{children:[e.jsx("label",{htmlFor:"context-selector",style:{display:"block",marginBottom:"6px"},children:"Context:"}),e.jsx("select",{id:"context-selector",value:o,onChange:v,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:t.map(i=>e.jsxs("option",{value:i,children:[i," ",i===o?"(current)":""]},i))})]}),e.jsxs("div",{children:[e.jsx("label",{htmlFor:"namespace-selector",style:{display:"block",marginBottom:"6px"},children:"Namespace:"}),e.jsx("select",{id:"namespace-selector",value:l,onChange:n,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:x.map(i=>e.jsxs("option",{value:i,children:[i," ",i===l?"(current)":""]},i))})]}),e.jsx("div",{style:{display:"flex",alignItems:"center",marginLeft:"auto"},children:e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"8px",padding:"8px 12px",backgroundColor:"#f5f5f5",borderRadius:"4px",border:"1px solid #e0e0e0"},children:[e.jsx("span",{style:{width:"10px",height:"10px",borderRadius:"50%",backgroundColor:c?"#4caf50":"#ff9800",display:"inline-block"}}),e.jsx(r.default,{variant:"body2",children:c?"Admin Access":"Standard Access"})]})})]})]})},j=({initialDoc:t=null})=>{const[o,f]=s.default.useState(t),[x,l]=s.default.useState(t?"steps":"overview"),[u,c]=s.default.useState(t?"refine-content":"create-overview"),v=()=>{c("refine-overview"),l("overview")},n=()=>{c("implement-content"),l("steps")},i=()=>{c("refine-content"),l("steps")},h=()=>{switch(u){case"create-overview":return"Phase 1: Create Overview";case"refine-overview":return"Phase 2: Refine Overview";case"implement-content":return"Phase 3: Implement Content";case"refine-content":return"Phase 4: Refine Content";default:return"Document Authoring"}},[C,m]=s.default.useState([]),[k,y]=s.default.useState(!1),[E,B]=s.default.useState(60),[A,D]=s.default.useState(["default","minikube","docker-desktop"]),[p,w]=s.default.useState("default"),[O,$]=s.default.useState(["default","kube-system","kube-public"]),[d,S]=s.default.useState("default"),[K,R]=s.default.useState(!1),z=a=>{o?f({...o,overview:a,updatedAt:new Date}):(f({id:`doc-${Date.now()}`,title:a.split(`
`)[0].replace(/^# /,"")||"Untitled Document",overview:a,steps:[],createdAt:new Date,updatedAt:new Date,kubeContext:p,kubeNamespace:d}),v())},M=()=>{if(!o)return;const a=[{id:`step-${Date.now()}-1`,title:"Setup Environment",description:"Ensure you have the required tools and permissions to proceed.",isExpanded:!0,isCodeBlock:!1},{id:`step-${Date.now()}-2`,title:"Create Configuration",description:"Create the necessary configuration files for your deployment.",isExpanded:!0,isCodeBlock:!0,code:`apiVersion: v1
kind: ConfigMap
metadata:
  name: example-config
data:
  config.json: |
    {
      "key": "value"
    }`},{id:`step-${Date.now()}-3`,title:"Deploy Application",description:"Deploy the application to your Kubernetes cluster.",isExpanded:!0,isCodeBlock:!0,code:"kubectl apply -f deployment.yaml"},{id:`step-${Date.now()}-4`,title:"Verify Deployment",description:"Verify that the deployment was successful.",isExpanded:!0,isCodeBlock:!0,code:`kubectl get pods
kubectl get services`}];f({...o,steps:a,updatedAt:new Date}),n()},U=a=>{o&&(f({...o,steps:o.steps.map(g=>g.id===a.id?a:g),updatedAt:new Date}),u==="implement-content"&&i())},Y=a=>{o&&(f({...o,steps:o.steps.map(g=>g.id===a?{...g,executed:!0,executionStatus:"running",executionOutput:"Running command..."}:g)}),setTimeout(()=>{const g=o.steps.find(T=>T.id===a);if(!g)return;const H=Math.random()>.2,Z=H?`Command executed successfully.
${g.code?`> ${g.code}
`:""}Output: Operation completed.`:`Error executing command.
${g.code?`> ${g.code}
`:""}Error: Could not complete the operation in context "${p}".`;f({...o,steps:o.steps.map(T=>T.id===a?{...T,executed:!0,executionStatus:H?"success":"failure",executionOutput:Z}:T)})},1500))},V=a=>{alert(`Doc would be saved as: ${a.title}.md`),C.includes(`/home/user/documents/${a.title}.md`)||m([`/home/user/documents/${a.title}.md`,...C.slice(0,4)])},_=()=>{alert("In a full implementation, a file picker would open here.")},Q=a=>{o&&alert(`Doc would be saved as: ${o.title}.${a}`)},J=()=>e.jsx(q,{initialOverview:(o==null?void 0:o.overview)||"",onSaveOverview:z,onGenerateSteps:M,authoringPhase:u}),X=()=>o?e.jsxs("div",{children:[e.jsx(r.default,{variant:"h4",style:{marginBottom:"24px"},children:o.title}),e.jsxs("div",{style:{marginBottom:"24px"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",paddingBottom:"8px",borderBottom:"1px solid #e0e0e0",marginBottom:"12px"},children:[e.jsx(r.default,{variant:"h6",children:"Overview"}),e.jsx("button",{onClick:()=>l("overview"),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Edit Overview"})]}),e.jsx("div",{style:{padding:"16px",backgroundColor:"#f9f9f9",borderRadius:"4px",marginBottom:"24px",maxHeight:"200px",overflowY:"auto"},children:o.overview.split(`
`).map((a,g)=>a.startsWith("# ")?null:a.startsWith("## ")?e.jsx(r.default,{variant:"h6",style:{marginTop:"16px",marginBottom:"8px"},children:a.substring(3)},g):a.startsWith("- ")?e.jsx(r.default,{component:"li",style:{marginLeft:"20px",marginBottom:"4px"},children:a.substring(2)},g):a===""?e.jsx("br",{},g):e.jsx(r.default,{paragraph:!0,children:a},g))})]}),e.jsx(r.default,{variant:"h6",style:{marginBottom:"16px"},children:"Steps"}),o.steps.length===0?e.jsx(r.default,{color:"textSecondary",children:"No steps defined yet."}):o.steps.map(a=>e.jsx(G,{step:a,onStepChange:U,onRunStep:Y,currentContext:p,currentNamespace:d,authoringPhase:u},a.id))]}):e.jsx("div",{style:{textAlign:"center",padding:"40px"},children:e.jsx(r.default,{children:"No document loaded. Create a new one first."})});return e.jsxs("div",{style:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs("div",{style:{padding:"16px"},children:[e.jsxs("div",{style:{marginBottom:"16px",padding:"8px 12px",backgroundColor:"#e3f2fd",borderRadius:"4px",border:"1px solid #bbdefb"},children:[e.jsx(r.default,{variant:"subtitle1",style:{fontWeight:"bold"},children:h()}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",justifyContent:"space-between",flexWrap:"wrap"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:u==="create-overview"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(r.default,{variant:"body2",children:"Create Overview"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:u==="refine-overview"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(r.default,{variant:"body2",children:"Refine Overview"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:u==="implement-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(r.default,{variant:"body2",children:"Implement Content"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:u==="refine-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(r.default,{variant:"body2",children:"Refine Content"})]})]})]}),e.jsx(N,{contexts:A,currentContext:p,onChangeContext:w,namespaces:O,currentNamespace:d,onChangeNamespace:S,isAdmin:K}),x==="steps"&&e.jsx(F,{execDoc:o,onSave:V,onLoad:_,onExport:Q,autoSaveEnabled:k,onToggleAutoSave:()=>y(a=>!a),autoSaveInterval:E,onChangeAutoSaveInterval:B,recentFiles:C,onOpenRecentFile:a=>alert(`Would open: ${a}`)}),o&&e.jsx("div",{style:{marginBottom:"16px"},children:e.jsxs("div",{style:{display:"flex"},children:[e.jsx("button",{onClick:()=>l("overview"),style:{flex:1,padding:"8px",backgroundColor:x==="overview"?"#1976d2":"#f1f1f1",color:x==="overview"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:x==="overview"?"bold":"normal"},children:"Document Overview"}),e.jsx("button",{onClick:()=>l("steps"),style:{flex:1,padding:"8px",backgroundColor:x==="steps"?"#1976d2":"#f1f1f1",color:x==="steps"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:x==="steps"?"bold":"normal"},children:"Document Steps"})]})})]}),e.jsx("div",{style:{flex:1,padding:"0 16px 16px",overflowY:"auto"},children:x==="overview"?J():X()})]})};b.registerRoute({path:"/exec-doc-editor",sidebar:{item:"exec-doc-editor",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"exec-doc-editor",exact:!0,component:()=>e.jsx(I.SectionBox,{title:"Executable Document Editor",textAlign:"left",paddingTop:2,children:e.jsx(j,{})})}),b.registerSidebarEntry({name:"exec-doc-editor",label:"Exec Doc Editor",url:"/exec-doc-editor",icon:"mdi:file-document-edit",sidebar:"Innovation-engine"}),b.registerSidebarEntry({name:"architect",label:"Architect",url:"/exec-doc-editor",icon:"mdi:code-braces-box",sidebar:"Innovation-engine"}),b.registerSidebarEntry({name:"mypluginsidebar",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"HOME"}),b.registerRoute({path:"/getting-started",sidebar:{item:"getting-started",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"getting-started",exact:!0,component:()=>{const t=()=>{window.location.hash="#/shell-exec",setTimeout(()=>{window.dispatchEvent(new CustomEvent("prefill-innovation-engine-command",{detail:"ie execute ../../../scenarios/testing/variableHierarchy.md"}))},100)};return e.jsxs(I.SectionBox,{title:"Getting Started",textAlign:"center",paddingTop:2,children:[e.jsx(r.default,{children:"This is where Innovation Engine lives"}),e.jsx("br",{}),e.jsx("a",{href:"#",onClick:o=>{o.preventDefault(),t()},style:{fontWeight:"bold",color:"#1976d2",textDecoration:"underline",cursor:"pointer"},children:"Test Innovation Engine"})]})}}),b.registerSidebarEntry({name:"backtohome",label:"Back to Home",url:"/",icon:"mdi:hexagon",sidebar:"Innovation-engine"}),b.registerSidebarEntry({name:"getting-started",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"Innovation-engine"}),b.registerRoute({path:"/shell-exec",sidebar:{item:"shell-exec",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"shell-exec",exact:!0,component:()=>{const[t,o]=s.default.useState("ie execute "),[f,x]=s.default.useState(""),[l,u]=s.default.useState(""),[c,v]=s.default.useState(!1);s.default.useEffect(()=>{const i=h=>{h.detail&&o(h.detail)};return window.addEventListener("prefill-innovation-engine-command",i),()=>window.removeEventListener("prefill-innovation-engine-command",i)},[]);const n=async()=>{v(!0),x(""),u("");try{const i=await fetch("http://localhost:4000/api/exec",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})}),h=await i.json();i.ok?x(`stdout:
${h.stdout}
stderr:
${h.stderr}
exitCode: ${h.exitCode}`):u(h.error||"Unknown error")}catch(i){u(i.message)}finally{v(!1)}};return e.jsxs(I.SectionBox,{title:"Innovation Engine",textAlign:"center",paddingTop:2,children:[e.jsx(r.default,{children:"Enter an allowlisted shell command (e.g., ie):"}),e.jsx("input",{type:"text",value:t,onChange:i=>o(i.target.value),onKeyDown:i=>{i.key==="Enter"&&!c&&n()},style:{width:"60%",margin:"1em 0",padding:"0.5em"}}),e.jsx("br",{}),e.jsx("button",{onClick:n,disabled:c,style:{padding:"0.5em 1em"},children:c?"Running...":"Execute"}),e.jsx("pre",{style:{textAlign:"left",marginTop:"1em",background:"#f5f5f5",padding:"1em"},children:f}),l&&e.jsxs(r.default,{color:"error",children:["Error: ",l]})]})}}),b.registerSidebarEntry({name:"shell-exec",label:"Innovation Engine",url:"/shell-exec",icon:"mdi:console",sidebar:"Innovation-engine"}),b.registerSidebarEntry({name:"assistant",label:"Assistant",url:"/assistant",icon:"mdi:robot",sidebar:"Innovation-engine"}),b.registerRoute({path:"/assistant",sidebar:{item:"assistant",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"assistant",exact:!0,component:()=>{const[t,o]=s.default.useState(""),[f,x]=s.default.useState([{role:"assistant",content:"Hello! I'm the Innovation Engine Assistant. How can I help you with your Kubernetes or Executable Document needs?"}]),[l,u]=s.default.useState(!1),c=s.default.useRef(null);s.default.useEffect(()=>{c.current&&(c.current.scrollTop=c.current.scrollHeight)},[f]);const v=()=>{t.trim()&&(x(n=>[...n,{role:"user",content:t}]),u(!0),setTimeout(()=>{x(n=>[...n,{role:"assistant",content:`I received your request: "${t}". This is a placeholder response. In the full implementation, this would be processed by GitHub Copilot.`}]),o(""),u(!1)},1e3))};return e.jsxs(I.SectionBox,{title:"Innovation Engine Assistant",textAlign:"left",paddingTop:2,children:[e.jsxs("div",{ref:c,style:{height:"400px",overflowY:"auto",marginBottom:"20px",padding:"10px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[f.map((n,i)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:n.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:n.role==="user"?"#1976d2":"#ffffff",color:n.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:n.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(r.default,{children:n.content})})},i)),l&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(r.default,{color:"textSecondary",children:"Processing your request..."})})]}),e.jsxs("div",{style:{display:"flex",alignItems:"flex-start",gap:"10px"},children:[e.jsx("textarea",{value:t,onChange:n=>o(n.target.value),onKeyDown:n=>{n.key==="Enter"&&!n.shiftKey&&(n.preventDefault(),v())},placeholder:"Enter your question or request here (e.g., 'Create a deployment for my app')",style:{flexGrow:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc",minHeight:"100px",resize:"vertical",fontFamily:"inherit",fontSize:"14px"}}),e.jsx("button",{onClick:v,disabled:l||!t.trim(),style:{padding:"10px 20px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:l||!t.trim()?"not-allowed":"pointer",opacity:l||!t.trim()?.7:1},children:"Send"})]}),e.jsxs("div",{style:{marginTop:"20px",borderTop:"1px solid #e0e0e0",paddingTop:"20px"},children:[e.jsx(r.default,{variant:"h6",children:"Quick Start:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px",marginTop:"10px"},children:["Create a simple deployment","Expose a service","Author an Executable Document","Learn about Kubernetes basics"].map((n,i)=>e.jsx("button",{onClick:()=>o(n),style:{padding:"8px 12px",backgroundColor:"#f1f1f1",border:"1px solid #ddd",borderRadius:"16px",cursor:"pointer"},children:n},i))}),e.jsxs("div",{style:{marginTop:"20px",textAlign:"center",padding:"15px",backgroundColor:"#e8f5e9",borderRadius:"8px"},children:[e.jsx(r.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Try our new Exec Doc Editor!"}),e.jsx(r.default,{variant:"body2",style:{marginBottom:"12px"},children:"The new Executable Document Editor provides a more powerful interface for authoring and editing Exec Docs."}),e.jsx("a",{href:"#/exec-doc-editor",style:{display:"inline-block",padding:"8px 16px",backgroundColor:"#4caf50",color:"white",textDecoration:"none",borderRadius:"4px",fontWeight:"bold"},children:"Open Exec Doc Editor"})]})]})]})}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
