(function(e,n){typeof exports=="object"&&typeof module<"u"?n(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material/Typography"),require("react")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material/Typography","react"],n):(e=typeof globalThis<"u"?globalThis:e||self,n(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.MuiMaterial.Typography,e.pluginLib.React))})(this,function(e,n,c,f,y){"use strict";const u=i=>i&&typeof i=="object"&&"default"in i?i:{default:i},l=u(f),a=u(y);n.registerSidebarEntry({name:"mypluginsidebar",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"HOME"}),n.registerRoute({path:"/getting-started",sidebar:{item:"getting-started",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"getting-started",exact:!0,component:()=>{const i=()=>{window.location.hash="#/shell-exec",setTimeout(()=>{window.dispatchEvent(new CustomEvent("prefill-innovation-engine-command",{detail:"ie execute ../../../scenarios/testing/variableHierarchy.md"}))},100)};return e.jsxs(c.SectionBox,{title:"Getting Started",textAlign:"center",paddingTop:2,children:[e.jsx(l.default,{children:"This is where Innovation Engine lives"}),e.jsx("br",{}),e.jsx("a",{href:"#",onClick:o=>{o.preventDefault(),i()},style:{fontWeight:"bold",color:"#1976d2",textDecoration:"underline",cursor:"pointer"},children:"Test Innovation Engine"})]})}}),n.registerSidebarEntry({name:"backtohome",label:"Back to Home",url:"/",icon:"mdi:hexagon",sidebar:"Innovation-engine"}),n.registerSidebarEntry({name:"getting-started",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"Innovation-engine"}),n.registerRoute({path:"/shell-exec",sidebar:{item:"shell-exec",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"shell-exec",exact:!0,component:()=>{const[i,o]=a.default.useState("ie execute "),[b,g]=a.default.useState(""),[p,d]=a.default.useState(""),[s,m]=a.default.useState(!1);a.default.useEffect(()=>{const t=r=>{r.detail&&o(r.detail)};return window.addEventListener("prefill-innovation-engine-command",t),()=>window.removeEventListener("prefill-innovation-engine-command",t)},[]);const h=async()=>{m(!0),g(""),d("");try{const t=await fetch("http://localhost:4000/api/exec",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:i})}),r=await t.json();t.ok?g(`stdout:
${r.stdout}
stderr:
${r.stderr}
exitCode: ${r.exitCode}`):d(r.error||"Unknown error")}catch(t){d(t.message)}finally{m(!1)}};return e.jsxs(c.SectionBox,{title:"Innovation Engine",textAlign:"center",paddingTop:2,children:[e.jsx(l.default,{children:"Enter a whitelisted shell command (e.g., ie):"}),e.jsx("input",{type:"text",value:i,onChange:t=>o(t.target.value),onKeyDown:t=>{t.key==="Enter"&&!s&&h()},style:{width:"60%",margin:"1em 0",padding:"0.5em"}}),e.jsx("br",{}),e.jsx("button",{onClick:h,disabled:s,style:{padding:"0.5em 1em"},children:s?"Running...":"Execute"}),e.jsx("pre",{style:{textAlign:"left",marginTop:"1em",background:"#f5f5f5",padding:"1em"},children:b}),p&&e.jsxs(l.default,{color:"error",children:["Error: ",p]})]})}}),n.registerSidebarEntry({name:"shell-exec",label:"Innovation Engine",url:"/shell-exec",icon:"mdi:console",sidebar:"Innovation-engine"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
