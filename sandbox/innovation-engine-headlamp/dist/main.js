(function(e,v){typeof exports=="object"&&typeof module<"u"?v(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material/Typography"),require("react")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material/Typography","react"],v):(e=typeof globalThis<"u"?globalThis:e||self,v(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.MuiMaterial.Typography,e.pluginLib.React))})(this,function(e,v,A,$,L){"use strict";const D=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},o=D($),s=D(L),H=({step:t,onStepChange:r,onRunStep:h,currentContext:d,currentNamespace:x})=>{const[c,f]=s.default.useState(!1),[u,i]=s.default.useState(""),[n,b]=s.default.useState(!1),[w,C]=s.default.useState([]),g=()=>{h(t.id)},S=l=>{r({...t,title:l.target.value})},E=l=>{r({...t,description:l.target.value})},T=l=>{r({...t,code:l.target.value})},p=()=>{u.trim()&&(C(l=>[...l,{role:"user",content:u}]),setTimeout(()=>{C(l=>[...l,{role:"assistant",content:`Here's my suggestion for your request: "${u}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),i("")},1e3))},m=l=>{r({...t,description:t.description+`

`+l.content}),b(!1)},I=()=>{if(!t.executed)return null;let l="",k="";switch(t.executionStatus){case"success":l="#4caf50",k="Success";break;case"failure":l="#f44336",k="Failed";break;case"running":l="#2196f3",k="Running...";break;default:return null}return e.jsx("span",{style:{backgroundColor:l,color:"white",padding:"3px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px"},children:k})},O=()=>{const l="default";return d!==l?e.jsx("div",{style:{marginTop:"10px",padding:"8px",backgroundColor:"#fff3cd",borderRadius:"4px"},children:e.jsxs(o.default,{variant:"body2",style:{color:"#856404"},children:['⚠️ This step may require the "',l,`" context, but you're currently in "`,d,'".']})}):null};return e.jsxs("div",{style:{border:"1px solid #e0e0e0",borderRadius:"8px",marginBottom:"20px",overflow:"hidden"},children:[e.jsxs("div",{style:{padding:"12px 16px",backgroundColor:"#f5f5f5",display:"flex",justifyContent:"space-between",alignItems:"center"},children:[c?e.jsx("input",{type:"text",value:t.title,onChange:S,style:{fontSize:"18px",fontWeight:"bold",padding:"4px",width:"60%"}}):e.jsxs(o.default,{variant:"h6",style:{margin:0},children:[t.title," ",I()]}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>f(!c),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:c?"Done":"Edit"}),e.jsx("button",{onClick:()=>b(!n),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Get Help"}),e.jsx("button",{onClick:g,disabled:t.executionStatus==="running","aria-label":`Run step ${t.title}`,style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:t.executionStatus==="running"?"not-allowed":"pointer",opacity:t.executionStatus==="running"?.7:1},children:t.executionStatus==="running"?"Running...":"Run"})]})]}),e.jsxs("div",{style:{padding:"16px"},children:[O(),c?e.jsxs("div",{children:[e.jsx(o.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Description:"}),e.jsx("textarea",{value:t.description,onChange:E,style:{width:"100%",minHeight:"100px",padding:"8px",marginBottom:"16px",borderRadius:"4px",border:"1px solid #ddd"}}),t.isCodeBlock&&e.jsxs("div",{children:[e.jsx(o.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Code:"}),e.jsx("textarea",{value:t.code||"",onChange:T,style:{width:"100%",minHeight:"120px",padding:"8px",fontFamily:"monospace",backgroundColor:"#f8f8f8",borderRadius:"4px",border:"1px solid #ddd"}})]})]}):e.jsxs("div",{children:[e.jsx(o.default,{variant:"body1",style:{whiteSpace:"pre-wrap",marginBottom:"16px"},children:t.description}),t.isCodeBlock&&t.code&&e.jsx("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginBottom:"16px",overflowX:"auto"},children:e.jsx("pre",{style:{margin:0,fontFamily:"monospace"},children:t.code})})]}),t.executed&&t.executionOutput&&e.jsxs("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginTop:"16px",border:"1px solid #ddd"},children:[e.jsx(o.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Output:"}),e.jsx("pre",{style:{margin:0,fontFamily:"monospace",whiteSpace:"pre-wrap"},children:t.executionOutput})]})]}),n&&e.jsxs("div",{style:{padding:"16px",borderTop:"1px solid #e0e0e0"},children:[e.jsx(o.default,{variant:"h6",style:{marginBottom:"12px"},children:"Copilot Assistance"}),e.jsx("div",{style:{maxHeight:"200px",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:w.map((l,k)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:l.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:l.role==="user"?"#1976d2":"#ffffff",color:l.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:l.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(o.default,{children:l.content}),l.role==="assistant"&&e.jsx("button",{onClick:()=>m(l),style:{marginTop:"8px",padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"})]})},k))}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("textarea",{value:u,onChange:l=>i(l.target.value),placeholder:"Ask for help with this step (e.g., 'Help me improve the code for this step')",style:{flexGrow:1,padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"80px"}}),e.jsx("button",{onClick:p,disabled:!u.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:u.trim()?"pointer":"not-allowed",opacity:u.trim()?1:.7},children:"Ask Copilot"})]})]})]})},P=({initialOverview:t="",onSaveOverview:r,onGenerateSteps:h})=>{const[d,x]=s.default.useState(""),[c,f]=s.default.useState(t),[u,i]=s.default.useState(!1),[n,b]=s.default.useState([]),[w,C]=s.default.useState(!1),[g,S]=s.default.useState("prompt"),E=()=>{d.trim()&&(b(p=>[...p,{role:"user",content:d}]),C(!0),setTimeout(()=>{const p=`
# ${d}

## Overview

This is an Executable Document that will guide you through the process of ${d.toLowerCase()}. 
Follow the steps below to complete this task in your Kubernetes environment.

## Prerequisites

- Kubernetes cluster
- kubectl configured to access your cluster
- Necessary permissions to deploy resources

## Expected Outcome

Successfully ${d.toLowerCase()} in your Kubernetes cluster.
      `.trim();f(p),b(m=>[...m,{role:"assistant",content:`I've generated an overview for "${d}". You can edit it directly or ask me to make changes.`}]),x(""),C(!1),S("preview")},1e3))},T=()=>{r(c),h()};return e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsx(o.default,{variant:"h5",style:{marginBottom:"16px"},children:"Executable Document Overview"}),e.jsxs("div",{style:{display:"flex",marginBottom:"16px"},children:[e.jsx("button",{onClick:()=>S("prompt"),style:{flex:1,padding:"8px",backgroundColor:g==="prompt"?"#1976d2":"#f1f1f1",color:g==="prompt"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:g==="prompt"?"bold":"normal"},children:"Prompt & Conversation"}),e.jsx("button",{onClick:()=>S("preview"),style:{flex:1,padding:"8px",backgroundColor:g==="preview"?"#1976d2":"#f1f1f1",color:g==="preview"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:g==="preview"?"bold":"normal"},children:"Preview & Edit"})]}),e.jsxs("div",{style:{flex:1,display:"flex",overflow:"hidden"},children:[e.jsxs("div",{style:{flex:g==="prompt"?1:0,display:g==="prompt"?"flex":"none",flexDirection:"column",overflow:"hidden"},children:[e.jsxs("div",{style:{marginBottom:"16px"},children:[e.jsx(o.default,{variant:"subtitle1",children:"What kind of Executable Document do you want to create?"}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",gap:"8px"},children:[e.jsx("input",{type:"text",value:d,onChange:p=>x(p.target.value),placeholder:"E.g., Create a deployment for a Node.js application",style:{flex:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc"}}),e.jsx("button",{onClick:E,disabled:w||!d.trim(),style:{padding:"10px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:w||!d.trim()?"not-allowed":"pointer",opacity:w||!d.trim()?.7:1},children:w?"Generating...":"Generate"})]})]}),e.jsxs("div",{style:{flex:1,overflowY:"auto",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#f9f9f9"},children:[n.length===0&&e.jsx(o.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Enter a prompt above to start generating your Executable Document"}),n.map((p,m)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:p.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:p.role==="user"?"#1976d2":"#ffffff",color:p.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:p.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(o.default,{children:p.content})})},m)),w&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(o.default,{color:"textSecondary",children:"Generating overview..."})})]})]}),e.jsxs("div",{style:{flex:g==="preview"?1:0,display:g==="preview"?"flex":"none",flexDirection:"column",overflow:"hidden"},children:[e.jsxs("div",{style:{marginBottom:"16px",display:"flex",justifyContent:"space-between"},children:[e.jsx(o.default,{variant:"subtitle1",children:u?"Edit Overview":"Preview Overview"}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>i(!u),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:u?"Preview":"Edit"}),e.jsx("button",{onClick:T,disabled:!c.trim(),style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:c.trim()?"pointer":"not-allowed",opacity:c.trim()?1:.7},children:"Approve & Generate Steps"})]})]}),e.jsx("div",{style:{flex:1,border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#ffffff",overflowY:"auto"},children:u?e.jsx("textarea",{value:c,onChange:p=>f(p.target.value),style:{width:"100%",height:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",fontFamily:"monospace",fontSize:"14px",resize:"none"}}):e.jsx("div",{style:{padding:"16px",maxWidth:"800px",margin:"0 auto",fontFamily:"system-ui, -apple-system, sans-serif",lineHeight:1.6},children:c.split(`
`).map((p,m)=>p.startsWith("# ")?e.jsx(o.default,{variant:"h4",style:{marginBottom:"16px"},children:p.substring(2)},m):p.startsWith("## ")?e.jsx(o.default,{variant:"h5",style:{marginTop:"24px",marginBottom:"12px"},children:p.substring(3)},m):p.startsWith("- ")?e.jsx(o.default,{component:"li",style:{marginLeft:"20px",marginBottom:"8px"},children:p.substring(2)},m):p===""?e.jsx("br",{},m):e.jsx(o.default,{paragraph:!0,children:p},m))})})]})]})]})},q=({execDoc:t,onSave:r,onLoad:h,onExport:d,autoSaveEnabled:x,onToggleAutoSave:c,autoSaveInterval:f,onChangeAutoSaveInterval:u,recentFiles:i,onOpenRecentFile:n})=>{const b=()=>{t&&r(t)},w=C=>{u(parseInt(C.target.value,10))};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(o.default,{variant:"h6",style:{marginBottom:"12px"},children:"File Operations"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px"},children:[e.jsx("button",{onClick:b,disabled:!t,style:{padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Save to Disk"}),e.jsx("button",{onClick:h,style:{padding:"8px 16px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Load from Disk"}),e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsxs("label",{style:{marginRight:"8px",display:"flex",alignItems:"center"},children:[e.jsx("input",{type:"checkbox",checked:x,onChange:c,style:{marginRight:"4px"}}),"Auto-save"]}),x&&e.jsxs("select",{value:f,onChange:w,style:{padding:"6px",borderRadius:"4px",border:"1px solid #ddd"},children:[e.jsx("option",{value:30,children:"Every 30 seconds"}),e.jsx("option",{value:60,children:"Every minute"}),e.jsx("option",{value:300,children:"Every 5 minutes"}),e.jsx("option",{value:600,children:"Every 10 minutes"})]})]})]}),e.jsxs("div",{style:{marginTop:"12px"},children:[e.jsx(o.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Export as:"}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("button",{onClick:()=>d("markdown"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Markdown"}),e.jsx("button",{onClick:()=>d("html"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"HTML"}),e.jsx("button",{onClick:()=>d("pdf"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"PDF"})]})]}),i.length>0&&e.jsxs("div",{style:{marginTop:"16px"},children:[e.jsx(o.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Recent Files:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"8px"},children:i.map((C,g)=>e.jsx("button",{onClick:()=>n(C),style:{padding:"6px 12px",backgroundColor:"#f5f5f5",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer",textOverflow:"ellipsis",overflow:"hidden",maxWidth:"200px",whiteSpace:"nowrap"},children:C.split("/").pop()},g))})]})]})},G=({contexts:t,currentContext:r,onChangeContext:h,namespaces:d,currentNamespace:x,onChangeNamespace:c,isAdmin:f})=>{const u=n=>{h(n.target.value)},i=n=>{c(n.target.value)};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(o.default,{variant:"h6",style:{marginBottom:"12px"},children:"Kubernetes Context"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px"},children:[e.jsxs("div",{children:[e.jsx("label",{htmlFor:"context-selector",style:{display:"block",marginBottom:"6px"},children:"Context:"}),e.jsx("select",{id:"context-selector",value:r,onChange:u,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:t.map(n=>e.jsxs("option",{value:n,children:[n," ",n===r?"(current)":""]},n))})]}),e.jsxs("div",{children:[e.jsx("label",{htmlFor:"namespace-selector",style:{display:"block",marginBottom:"6px"},children:"Namespace:"}),e.jsx("select",{id:"namespace-selector",value:x,onChange:i,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:d.map(n=>e.jsxs("option",{value:n,children:[n," ",n===x?"(current)":""]},n))})]}),e.jsx("div",{style:{display:"flex",alignItems:"center",marginLeft:"auto"},children:e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"8px",padding:"8px 12px",backgroundColor:"#f5f5f5",borderRadius:"4px",border:"1px solid #e0e0e0"},children:[e.jsx("span",{style:{width:"10px",height:"10px",borderRadius:"50%",backgroundColor:f?"#4caf50":"#ff9800",display:"inline-block"}}),e.jsx(o.default,{variant:"body2",children:f?"Admin Access":"Standard Access"})]})})]})]})},F=({initialDoc:t=null})=>{const[r,h]=s.default.useState(t),[d,x]=s.default.useState(t?"steps":"overview"),[c,f]=s.default.useState([]),[u,i]=s.default.useState(!1),[n,b]=s.default.useState(60),[w,C]=s.default.useState(["default","minikube","docker-desktop"]),[g,S]=s.default.useState("default"),[E,T]=s.default.useState(["default","kube-system","kube-public"]),[p,m]=s.default.useState("default"),[I,O]=s.default.useState(!1),l=a=>{h(r?{...r,overview:a,updatedAt:new Date}:{id:`doc-${Date.now()}`,title:a.split(`
`)[0].replace(/^# /,"")||"Untitled Document",overview:a,steps:[],createdAt:new Date,updatedAt:new Date,kubeContext:g,kubeNamespace:p})},k=()=>{if(!r)return;const a=[{id:`step-${Date.now()}-1`,title:"Setup Environment",description:"Ensure you have the required tools and permissions to proceed.",isExpanded:!0,isCodeBlock:!1},{id:`step-${Date.now()}-2`,title:"Create Configuration",description:"Create the necessary configuration files for your deployment.",isExpanded:!0,isCodeBlock:!0,code:`apiVersion: v1
kind: ConfigMap
metadata:
  name: example-config
data:
  config.json: |
    {
      "key": "value"
    }`},{id:`step-${Date.now()}-3`,title:"Deploy Application",description:"Deploy the application to your Kubernetes cluster.",isExpanded:!0,isCodeBlock:!0,code:"kubectl apply -f deployment.yaml"},{id:`step-${Date.now()}-4`,title:"Verify Deployment",description:"Verify that the deployment was successful.",isExpanded:!0,isCodeBlock:!0,code:`kubectl get pods
kubectl get services`}];h({...r,steps:a,updatedAt:new Date}),x("steps")},N=a=>{r&&h({...r,steps:r.steps.map(y=>y.id===a.id?a:y),updatedAt:new Date})},j=a=>{r&&(h({...r,steps:r.steps.map(y=>y.id===a?{...y,executed:!0,executionStatus:"running",executionOutput:"Running command..."}:y)}),setTimeout(()=>{const y=r.steps.find(B=>B.id===a);if(!y)return;const W=Math.random()>.2,V=W?`Command executed successfully.
${y.code?`> ${y.code}
`:""}Output: Operation completed.`:`Error executing command.
${y.code?`> ${y.code}
`:""}Error: Could not complete the operation in context "${g}".`;h({...r,steps:r.steps.map(B=>B.id===a?{...B,executed:!0,executionStatus:W?"success":"failure",executionOutput:V}:B)})},1500))},K=a=>{alert(`Doc would be saved as: ${a.title}.md`),c.includes(`/home/user/documents/${a.title}.md`)||f([`/home/user/documents/${a.title}.md`,...c.slice(0,4)])},M=()=>{alert("In a full implementation, a file picker would open here.")},z=a=>{r&&alert(`Doc would be exported as: ${r.title}.${a}`)},U=()=>e.jsx(P,{initialOverview:(r==null?void 0:r.overview)||"",onSaveOverview:l,onGenerateSteps:k}),Y=()=>r?e.jsxs("div",{children:[e.jsx(o.default,{variant:"h4",style:{marginBottom:"24px"},children:r.title}),e.jsxs("div",{style:{marginBottom:"24px"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",paddingBottom:"8px",borderBottom:"1px solid #e0e0e0",marginBottom:"12px"},children:[e.jsx(o.default,{variant:"h6",children:"Overview"}),e.jsx("button",{onClick:()=>x("overview"),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Edit Overview"})]}),e.jsx("div",{style:{padding:"16px",backgroundColor:"#f9f9f9",borderRadius:"4px",marginBottom:"24px",maxHeight:"200px",overflowY:"auto"},children:r.overview.split(`
`).map((a,y)=>a.startsWith("# ")?null:a.startsWith("## ")?e.jsx(o.default,{variant:"h6",style:{marginTop:"16px",marginBottom:"8px"},children:a.substring(3)},y):a.startsWith("- ")?e.jsx(o.default,{component:"li",style:{marginLeft:"20px",marginBottom:"4px"},children:a.substring(2)},y):a===""?e.jsx("br",{},y):e.jsx(o.default,{paragraph:!0,children:a},y))})]}),e.jsx(o.default,{variant:"h6",style:{marginBottom:"16px"},children:"Steps"}),r.steps.length===0?e.jsx(o.default,{color:"textSecondary",children:"No steps defined yet."}):r.steps.map(a=>e.jsx(H,{step:a,onStepChange:N,onRunStep:j,currentContext:g,currentNamespace:p},a.id))]}):e.jsx("div",{style:{textAlign:"center",padding:"40px"},children:e.jsx(o.default,{children:"No document loaded. Create a new one first."})});return e.jsxs("div",{style:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs("div",{style:{padding:"16px"},children:[e.jsx(G,{contexts:w,currentContext:g,onChangeContext:S,namespaces:E,currentNamespace:p,onChangeNamespace:m,isAdmin:I}),d==="steps"&&e.jsx(q,{execDoc:r,onSave:K,onLoad:M,onExport:z,autoSaveEnabled:u,onToggleAutoSave:()=>i(a=>!a),autoSaveInterval:n,onChangeAutoSaveInterval:b,recentFiles:c,onOpenRecentFile:a=>alert(`Would open: ${a}`)}),r&&e.jsx("div",{style:{marginBottom:"16px"},children:e.jsxs("div",{style:{display:"flex"},children:[e.jsx("button",{onClick:()=>x("overview"),style:{flex:1,padding:"8px",backgroundColor:d==="overview"?"#1976d2":"#f1f1f1",color:d==="overview"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:d==="overview"?"bold":"normal"},children:"Document Overview"}),e.jsx("button",{onClick:()=>x("steps"),style:{flex:1,padding:"8px",backgroundColor:d==="steps"?"#1976d2":"#f1f1f1",color:d==="steps"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:d==="steps"?"bold":"normal"},children:"Document Steps"})]})})]}),e.jsx("div",{style:{flex:1,padding:"0 16px 16px",overflowY:"auto"},children:d==="overview"?U():Y()})]})};v.registerRoute({path:"/exec-doc-editor",sidebar:{item:"exec-doc-editor",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"exec-doc-editor",exact:!0,component:()=>e.jsx(A.SectionBox,{title:"Executable Document Editor",textAlign:"left",paddingTop:2,children:e.jsx(F,{})})}),v.registerSidebarEntry({name:"exec-doc-editor",label:"Exec Doc Editor",url:"/exec-doc-editor",icon:"mdi:file-document-edit",sidebar:"Innovation-engine"}),v.registerSidebarEntry({name:"architect",label:"Architect",url:"/exec-doc-editor",icon:"mdi:code-braces-box",sidebar:"Innovation-engine"}),v.registerSidebarEntry({name:"mypluginsidebar",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"HOME"}),v.registerRoute({path:"/getting-started",sidebar:{item:"getting-started",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"getting-started",exact:!0,component:()=>{const t=()=>{window.location.hash="#/shell-exec",setTimeout(()=>{window.dispatchEvent(new CustomEvent("prefill-innovation-engine-command",{detail:"ie execute ../../../scenarios/testing/variableHierarchy.md"}))},100)};return e.jsxs(A.SectionBox,{title:"Getting Started",textAlign:"center",paddingTop:2,children:[e.jsx(o.default,{children:"This is where Innovation Engine lives"}),e.jsx("br",{}),e.jsx("a",{href:"#",onClick:r=>{r.preventDefault(),t()},style:{fontWeight:"bold",color:"#1976d2",textDecoration:"underline",cursor:"pointer"},children:"Test Innovation Engine"})]})}}),v.registerSidebarEntry({name:"backtohome",label:"Back to Home",url:"/",icon:"mdi:hexagon",sidebar:"Innovation-engine"}),v.registerSidebarEntry({name:"getting-started",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"Innovation-engine"}),v.registerRoute({path:"/shell-exec",sidebar:{item:"shell-exec",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"shell-exec",exact:!0,component:()=>{const[t,r]=s.default.useState("ie execute "),[h,d]=s.default.useState(""),[x,c]=s.default.useState(""),[f,u]=s.default.useState(!1);s.default.useEffect(()=>{const n=b=>{b.detail&&r(b.detail)};return window.addEventListener("prefill-innovation-engine-command",n),()=>window.removeEventListener("prefill-innovation-engine-command",n)},[]);const i=async()=>{u(!0),d(""),c("");try{const n=await fetch("http://localhost:4000/api/exec",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})}),b=await n.json();n.ok?d(`stdout:
${b.stdout}
stderr:
${b.stderr}
exitCode: ${b.exitCode}`):c(b.error||"Unknown error")}catch(n){c(n.message)}finally{u(!1)}};return e.jsxs(A.SectionBox,{title:"Innovation Engine",textAlign:"center",paddingTop:2,children:[e.jsx(o.default,{children:"Enter an allowlisted shell command (e.g., ie):"}),e.jsx("input",{type:"text",value:t,onChange:n=>r(n.target.value),onKeyDown:n=>{n.key==="Enter"&&!f&&i()},style:{width:"60%",margin:"1em 0",padding:"0.5em"}}),e.jsx("br",{}),e.jsx("button",{onClick:i,disabled:f,style:{padding:"0.5em 1em"},children:f?"Running...":"Execute"}),e.jsx("pre",{style:{textAlign:"left",marginTop:"1em",background:"#f5f5f5",padding:"1em"},children:h}),x&&e.jsxs(o.default,{color:"error",children:["Error: ",x]})]})}}),v.registerSidebarEntry({name:"shell-exec",label:"Innovation Engine",url:"/shell-exec",icon:"mdi:console",sidebar:"Innovation-engine"}),v.registerSidebarEntry({name:"assistant",label:"Assistant",url:"/assistant",icon:"mdi:robot",sidebar:"Innovation-engine"}),v.registerRoute({path:"/assistant",sidebar:{item:"assistant",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"assistant",exact:!0,component:()=>{const[t,r]=s.default.useState(""),[h,d]=s.default.useState([{role:"assistant",content:"Hello! I'm the Innovation Engine Assistant. How can I help you with your Kubernetes or Executable Document needs?"}]),[x,c]=s.default.useState(!1),f=s.default.useRef(null);s.default.useEffect(()=>{f.current&&(f.current.scrollTop=f.current.scrollHeight)},[h]);const u=()=>{t.trim()&&(d(i=>[...i,{role:"user",content:t}]),c(!0),setTimeout(()=>{d(i=>[...i,{role:"assistant",content:`I received your request: "${t}". This is a placeholder response. In the full implementation, this would be processed by GitHub Copilot.`}]),r(""),c(!1)},1e3))};return e.jsxs(A.SectionBox,{title:"Innovation Engine Assistant",textAlign:"left",paddingTop:2,children:[e.jsxs("div",{ref:f,style:{height:"400px",overflowY:"auto",marginBottom:"20px",padding:"10px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[h.map((i,n)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:i.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:i.role==="user"?"#1976d2":"#ffffff",color:i.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:i.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(o.default,{children:i.content})})},n)),x&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(o.default,{color:"textSecondary",children:"Processing your request..."})})]}),e.jsxs("div",{style:{display:"flex",alignItems:"flex-start",gap:"10px"},children:[e.jsx("textarea",{value:t,onChange:i=>r(i.target.value),onKeyDown:i=>{i.key==="Enter"&&!i.shiftKey&&(i.preventDefault(),u())},placeholder:"Enter your question or request here (e.g., 'Create a deployment for my app')",style:{flexGrow:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc",minHeight:"100px",resize:"vertical",fontFamily:"inherit",fontSize:"14px"}}),e.jsx("button",{onClick:u,disabled:x||!t.trim(),style:{padding:"10px 20px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:x||!t.trim()?"not-allowed":"pointer",opacity:x||!t.trim()?.7:1},children:"Send"})]}),e.jsxs("div",{style:{marginTop:"20px",borderTop:"1px solid #e0e0e0",paddingTop:"20px"},children:[e.jsx(o.default,{variant:"h6",children:"Quick Start:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px",marginTop:"10px"},children:["Create a simple deployment","Expose a service","Author an Executable Document","Learn about Kubernetes basics"].map((i,n)=>e.jsx("button",{onClick:()=>r(i),style:{padding:"8px 12px",backgroundColor:"#f1f1f1",border:"1px solid #ddd",borderRadius:"16px",cursor:"pointer"},children:i},n))}),e.jsxs("div",{style:{marginTop:"20px",textAlign:"center",padding:"15px",backgroundColor:"#e8f5e9",borderRadius:"8px"},children:[e.jsx(o.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Try our new Exec Doc Editor!"}),e.jsx(o.default,{variant:"body2",style:{marginBottom:"12px"},children:"The new Executable Document Editor provides a more powerful interface for authoring and editing Exec Docs."}),e.jsx("a",{href:"#/exec-doc-editor",style:{display:"inline-block",padding:"8px 16px",backgroundColor:"#4caf50",color:"white",textDecoration:"none",borderRadius:"4px",fontWeight:"bold"},children:"Open Exec Doc Editor"})]})]})]})}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
