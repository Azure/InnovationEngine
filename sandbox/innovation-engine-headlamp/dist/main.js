(function(e,y){typeof exports=="object"&&typeof module<"u"?y(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material/Typography"),require("react")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material/Typography","react"],y):(e=typeof globalThis<"u"?globalThis:e||self,y(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.MuiMaterial.Typography,e.pluginLib.React))})(this,function(e,y,I,q,G){"use strict";const L=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},n=L(q),c=L(G),N=({step:t,onStepChange:o,onRunStep:g,currentContext:x,currentNamespace:l})=>{const[p,u]=c.default.useState(!1),[f,a]=c.default.useState(""),[i,h]=c.default.useState(!1),[k,m]=c.default.useState([]),S=()=>{g(t.id)},w=r=>{o({...t,title:r.target.value})},E=r=>{o({...t,description:r.target.value})},B=r=>{o({...t,code:r.target.value})},T=r=>{const v=r.target.checked;o({...t,isCodeBlock:v,code:v&&!t.code?"":t.code})},O=r=>{o({...t,isExpanded:r.target.checked})},d=()=>{o({...t,executed:!1,executionStatus:null,executionOutput:void 0})},C=()=>{f.trim()&&(m(r=>[...r,{role:"user",content:f}]),setTimeout(()=>{m(r=>[...r,{role:"assistant",content:`Here's my suggestion for your request: "${f}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),a("")},1e3))},P=r=>{const v=()=>{o({...t,description:t.description+`

`+r.content}),h(!1)},K=()=>{o({...t,code:(t.code||"")+`

`+r.content,isCodeBlock:!0}),h(!1)},W=r.content.includes("```")||/\b(function|const|let|var|import|export|class|if|for|while)\b/.test(r.content);t.isCodeBlock&&W?K():(t.isCodeBlock,v())},H=()=>{if(!t.executed)return null;let r="",v="";switch(t.executionStatus){case"success":r="#4caf50",v="Success";break;case"failure":r="#f44336",v="Failed";break;case"running":r="#2196f3",v="Running...";break;default:return null}return e.jsx("span",{style:{backgroundColor:r,color:"white",padding:"3px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px"},children:v})},A=()=>{const r="default",v=l;return x!==r?e.jsx("div",{style:{marginTop:"10px",padding:"8px",backgroundColor:"#fff3cd",borderRadius:"4px"},children:e.jsxs(n.default,{variant:"body2",style:{color:"#856404"},children:['⚠️ This step may require the "',r,'" context and "',v,`" namespace, but you're currently in context "`,x,'".']})}):null};return e.jsxs("div",{style:{border:"1px solid #e0e0e0",borderRadius:"8px",marginBottom:"20px",overflow:"hidden"},children:[e.jsxs("div",{style:{padding:"12px 16px",backgroundColor:"#f5f5f5",display:"flex",justifyContent:"space-between",alignItems:"center",borderBottom:"1px solid #ddd"},children:[p?e.jsx("input",{type:"text",value:t.title,onChange:w,style:{fontSize:"18px",fontWeight:"bold",padding:"8px",width:"60%",borderRadius:"4px",border:"1px solid #ddd"},placeholder:"Step title"}):e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsx(n.default,{variant:"h6",style:{margin:0},children:t.title}),H(),t.isCodeBlock&&e.jsxs("span",{style:{backgroundColor:"#e0f7fa",color:"#00838f",padding:"2px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px",display:"flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"⚙️"}),"Executable"]})]}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>u(!p),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:p?"#1976d2":"#f0f0f0",color:p?"white":"black",border:"1px solid "+(p?"#1976d2":"#ddd"),borderRadius:"4px",cursor:"pointer",fontWeight:p?"bold":"normal"},children:p?"Save Changes":"Edit Step"}),e.jsx("button",{onClick:()=>h(!i),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:i?"#9c27b0":"#f0f0f0",color:i?"white":"black",border:"1px solid "+(i?"#9c27b0":"#ddd"),borderRadius:"4px",cursor:"pointer"},children:i?"Hide Help":"Get Help"}),t.isCodeBlock&&e.jsxs("button",{onClick:S,disabled:t.executionStatus==="running","aria-label":`Run step ${t.title}`,style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:t.executionStatus==="running"?"not-allowed":"pointer",opacity:t.executionStatus==="running"?.7:1,display:"inline-flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"▶️"}),t.executionStatus==="running"?"Running...":"Run"]})]})]}),e.jsxs("div",{style:{padding:"16px"},children:[A(),p?e.jsxs("div",{children:[e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"16px",marginBottom:"16px",padding:"12px",backgroundColor:"#f5f5f5",borderRadius:"4px"},children:[e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isCodeBlock,onChange:r=>T(r),style:{marginRight:"8px"}}),e.jsx("span",{children:"Contains executable code"})]}),e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isExpanded,onChange:r=>O(r),style:{marginRight:"8px"}}),e.jsx("span",{children:"Expanded by default"})]}),t.executed&&e.jsx("button",{onClick:d,style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Reset Execution Status"})]}),e.jsx(n.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Description:"}),e.jsx("textarea",{value:t.description,onChange:E,onKeyDown:r=>{r.key==="Enter"&&(r.ctrlKey||r.metaKey)&&(r.preventDefault(),u(!1))},placeholder:"Enter description for this step. Press CTRL+ENTER to save changes.",style:{width:"100%",minHeight:"200px",padding:"8px",marginBottom:"16px",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"}}),t.isCodeBlock&&e.jsxs("div",{children:[e.jsx(n.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Code:"}),e.jsx("textarea",{value:t.code||"",onChange:B,onKeyDown:r=>{r.key==="Enter"&&(r.ctrlKey||r.metaKey)&&(r.preventDefault(),u(!1))},style:{width:"100%",minHeight:"250px",padding:"8px",fontFamily:"monospace",backgroundColor:"#f8f8f8",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"},placeholder:"Enter executable code here. Press CTRL+ENTER to save changes."}),e.jsx(n.default,{variant:"caption",color:"textSecondary",style:{display:"block",marginTop:"4px"},children:"This code will be executed when the user runs this step."})]})]}):e.jsxs("div",{children:[e.jsx(n.default,{variant:"body1",style:{whiteSpace:"pre-wrap",marginBottom:"16px"},children:t.description}),t.isCodeBlock&&t.code&&e.jsx("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginBottom:"16px",overflowX:"auto"},children:e.jsx("pre",{style:{margin:0,fontFamily:"monospace"},children:t.code})})]}),t.executed&&t.executionOutput&&e.jsxs("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginTop:"16px",border:"1px solid #ddd"},children:[e.jsx(n.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Output:"}),e.jsx("pre",{style:{margin:0,fontFamily:"monospace",whiteSpace:"pre-wrap"},children:t.executionOutput})]})]}),i&&e.jsxs("div",{style:{padding:"16px",borderTop:"1px solid #e0e0e0"},children:[e.jsx(n.default,{variant:"h6",style:{marginBottom:"12px"},children:"Copilot Assistance"}),e.jsx("div",{style:{maxHeight:"200px",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:k.map((r,v)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:r.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:r.role==="user"?"#1976d2":"#ffffff",color:r.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:r.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(n.default,{children:r.content}),r.role==="assistant"&&e.jsxs("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:[e.jsx("button",{onClick:()=>P(r),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"}),t.isCodeBlock&&e.jsxs("div",{style:{display:"flex",gap:"4px"},children:[e.jsx("button",{onClick:()=>{o({...t,description:t.description+`

`+r.content}),h(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px 0 0 4px",cursor:"pointer",fontSize:"12px"},children:"Apply to Description"}),e.jsx("button",{onClick:()=>{o({...t,code:(t.code||"")+`

`+r.content}),h(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"0 4px 4px 0",cursor:"pointer",fontSize:"12px"},children:"Apply to Code"})]})]})]})},v))}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("textarea",{value:f,onChange:r=>a(r.target.value),onKeyDown:r=>{r.key==="Enter"&&(r.ctrlKey||r.metaKey)&&f.trim()&&(r.preventDefault(),C())},placeholder:"Ask for help with this step (e.g., 'Help me improve the code for this step'). Press CTRL+ENTER to submit.",style:{flexGrow:1,padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"150px",fontSize:"14px",lineHeight:"1.5"}}),e.jsx("button",{onClick:C,disabled:!f.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:f.trim()?"pointer":"not-allowed",opacity:f.trim()?1:.7},children:"Ask Copilot"})]})]})]})},F=({initialOverview:t="",onSaveOverview:o,onGenerateSteps:g,authoringPhase:x="create-overview"})=>{const[l,p]=c.default.useState(""),[u,f]=c.default.useState(t),[a,i]=c.default.useState(!1),[h,k]=c.default.useState([]),[m,S]=c.default.useState(!1),[w,E]=c.default.useState("prompt"),B=()=>{l.trim()&&(k(d=>[...d,{role:"user",content:l}]),S(!0),setTimeout(()=>{const d=`
# ${l}

## Overview

This is an Executable Document that will guide you through the process of ${l.toLowerCase()}. 
Follow the steps below to complete this task in your Kubernetes environment.

## Prerequisites

- Kubernetes cluster
- kubectl configured to access your cluster
- Necessary permissions to deploy resources

## Expected Outcome

Successfully ${l.toLowerCase()} in your Kubernetes cluster.
      `.trim();f(d),k(C=>[...C,{role:"assistant",content:`I've generated an overview for "${l}". You can edit it directly or ask me to make changes.`}]),p(""),S(!1),E("preview")},1e3))},T=()=>{o(u),g()},O=()=>{switch(x){case"create-overview":return"Approve & Create Overview";case"refine-overview":return"Approve & Generate Steps";default:return"Approve & Generate Steps"}};return e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsx(n.default,{variant:"h5",style:{marginBottom:"16px"},children:x==="create-overview"?"Create Document Overview":"Refine Document Overview"}),e.jsx("div",{style:{padding:"8px 12px",backgroundColor:"#f0f9ff",borderLeft:"4px solid #1976d2",marginBottom:"16px"},children:e.jsx(n.default,{variant:"body2",children:x==="create-overview"?"Step 1: Create an overview that describes what this document will accomplish.":"Step 2: Refine your overview to ensure it accurately describes the intended workflow."})}),e.jsxs("div",{style:{display:"flex",marginBottom:"16px"},children:[e.jsx("button",{onClick:()=>E("prompt"),style:{flex:1,padding:"8px",backgroundColor:w==="prompt"?"#1976d2":"#f1f1f1",color:w==="prompt"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:w==="prompt"?"bold":"normal"},children:"Prompt & Conversation"}),e.jsx("button",{onClick:()=>E("preview"),style:{flex:1,padding:"8px",backgroundColor:w==="preview"?"#1976d2":"#f1f1f1",color:w==="preview"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:w==="preview"?"bold":"normal"},children:"Preview & Edit"})]}),e.jsxs("div",{style:{flex:1,display:"flex",overflow:"hidden"},children:[e.jsxs("div",{style:{flex:w==="prompt"?1:0,display:w==="prompt"?"flex":"none",flexDirection:"column",overflow:"hidden"},children:[e.jsxs("div",{style:{marginBottom:"16px"},children:[e.jsx(n.default,{variant:"subtitle1",children:"What kind of Executable Document do you want to create?"}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",gap:"8px"},children:[e.jsx("input",{type:"text",value:l,onChange:d=>p(d.target.value),onKeyDown:d=>{d.key==="Enter"&&(d.ctrlKey||d.metaKey)&&l.trim()&&B()},placeholder:"E.g., Create a deployment for a Node.js application",style:{flex:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc"}}),e.jsx("button",{onClick:B,disabled:m||!l.trim(),style:{padding:"10px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:m||!l.trim()?"not-allowed":"pointer",opacity:m||!l.trim()?.7:1},children:m?"Generating...":"Generate"})]})]}),e.jsxs("div",{style:{flex:1,overflowY:"auto",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#f9f9f9"},children:[h.length===0&&e.jsx(n.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Enter a prompt above to start generating your Executable Document"}),h.map((d,C)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:d.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:d.role==="user"?"#1976d2":"#ffffff",color:d.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:d.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(n.default,{children:d.content})})},C)),m&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(n.default,{color:"textSecondary",children:"Generating overview..."})})]})]}),e.jsxs("div",{style:{flex:w==="preview"?1:0,display:w==="preview"?"flex":"none",flexDirection:"column",overflow:"hidden"},children:[e.jsxs("div",{style:{marginBottom:"16px",display:"flex",justifyContent:"space-between"},children:[e.jsx(n.default,{variant:"subtitle1",children:a?"Edit Overview":"Preview Overview"}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>i(!a),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:a?"Preview":"Edit"}),e.jsx("button",{onClick:T,disabled:!u.trim(),style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:u.trim()?"pointer":"not-allowed",opacity:u.trim()?1:.7},children:O()})]})]}),e.jsx("div",{style:{flex:1,border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#ffffff",overflowY:"auto"},children:a?e.jsx("textarea",{value:u,onChange:d=>f(d.target.value),onKeyDown:d=>{d.key==="Enter"&&(d.ctrlKey||d.metaKey)&&u.trim()&&(d.preventDefault(),i(!1))},placeholder:"Enter your document overview content. Press CTRL+ENTER to save changes.",style:{width:"100%",height:"100%",minHeight:"400px",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",fontFamily:"monospace",fontSize:"14px",lineHeight:"1.5",resize:"none"}}):e.jsx("div",{style:{padding:"16px",maxWidth:"800px",margin:"0 auto",fontFamily:"system-ui, -apple-system, sans-serif",lineHeight:1.6},children:u.split(`
`).map((d,C)=>d.startsWith("# ")?e.jsx(n.default,{variant:"h4",style:{marginBottom:"16px"},children:d.substring(2)},C):d.startsWith("## ")?e.jsx(n.default,{variant:"h5",style:{marginTop:"24px",marginBottom:"12px"},children:d.substring(3)},C):d.startsWith("- ")?e.jsx(n.default,{component:"li",style:{marginLeft:"20px",marginBottom:"8px"},children:d.substring(2)},C):d===""?e.jsx("br",{},C):e.jsx(n.default,{paragraph:!0,children:d},C))})})]})]})]})},j=({execDoc:t,onSave:o,onLoad:g,onExport:x,autoSaveEnabled:l,onToggleAutoSave:p,autoSaveInterval:u,onChangeAutoSaveInterval:f,recentFiles:a,onOpenRecentFile:i})=>{const h=()=>{t&&o(t)},k=m=>{f(parseInt(m.target.value,10))};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(n.default,{variant:"h6",style:{marginBottom:"12px"},children:"File Operations"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px"},children:[e.jsx("button",{onClick:h,disabled:!t,style:{padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Save to Disk"}),e.jsx("button",{onClick:g,style:{padding:"8px 16px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Load from Disk"}),e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsxs("label",{style:{marginRight:"8px",display:"flex",alignItems:"center"},children:[e.jsx("input",{type:"checkbox",checked:l,onChange:p,style:{marginRight:"4px"}}),"Auto-save"]}),l&&e.jsxs("select",{value:u,onChange:k,style:{padding:"6px",borderRadius:"4px",border:"1px solid #ddd"},children:[e.jsx("option",{value:30,children:"Every 30 seconds"}),e.jsx("option",{value:60,children:"Every minute"}),e.jsx("option",{value:300,children:"Every 5 minutes"}),e.jsx("option",{value:600,children:"Every 10 minutes"})]})]})]}),e.jsxs("div",{style:{marginTop:"12px"},children:[e.jsx(n.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Save as:"}),e.jsx("div",{style:{display:"flex",gap:"8px"},children:e.jsx("button",{onClick:()=>x("markdown"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Markdown"})})]}),a.length>0&&e.jsxs("div",{style:{marginTop:"16px"},children:[e.jsx(n.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Recent Files:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"8px"},children:a.map((m,S)=>e.jsx("button",{onClick:()=>i(m),style:{padding:"6px 12px",backgroundColor:"#f5f5f5",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer",textOverflow:"ellipsis",overflow:"hidden",maxWidth:"200px",whiteSpace:"nowrap"},children:m.split("/").pop()},S))})]})]})},z=({contexts:t,currentContext:o,onChangeContext:g,namespaces:x,currentNamespace:l,onChangeNamespace:p,isAdmin:u})=>{const f=i=>{g(i.target.value)},a=i=>{p(i.target.value)};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(n.default,{variant:"h6",style:{marginBottom:"12px"},children:"Kubernetes Context"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px"},children:[e.jsxs("div",{children:[e.jsx("label",{htmlFor:"context-selector",style:{display:"block",marginBottom:"6px"},children:"Context:"}),e.jsx("select",{id:"context-selector",value:o,onChange:f,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:t.map(i=>e.jsxs("option",{value:i,children:[i," ",i===o?"(current)":""]},i))})]}),e.jsxs("div",{children:[e.jsx("label",{htmlFor:"namespace-selector",style:{display:"block",marginBottom:"6px"},children:"Namespace:"}),e.jsx("select",{id:"namespace-selector",value:l,onChange:a,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:x.map(i=>e.jsxs("option",{value:i,children:[i," ",i===l?"(current)":""]},i))})]}),e.jsx("div",{style:{display:"flex",alignItems:"center",marginLeft:"auto"},children:e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"8px",padding:"8px 12px",backgroundColor:"#f5f5f5",borderRadius:"4px",border:"1px solid #e0e0e0"},children:[e.jsx("span",{style:{width:"10px",height:"10px",borderRadius:"50%",backgroundColor:u?"#4caf50":"#ff9800",display:"inline-block"}}),e.jsx(n.default,{variant:"body2",children:u?"Admin Access":"Standard Access"})]})})]})]})},M=({initialDoc:t=null})=>{const[o,g]=c.default.useState(t),[x,l]=c.default.useState(t?"steps":"overview"),[p,u]=c.default.useState(t?"refine-content":"create-overview"),f=()=>{u("refine-overview"),l("overview")},a=()=>{u("implement-content"),l("steps")},i=()=>{u("refine-content"),l("steps")},h=()=>{switch(p){case"create-overview":return"Phase 1: Create Overview";case"refine-overview":return"Phase 2: Refine Overview";case"implement-content":return"Phase 3: Implement Content";case"refine-content":return"Phase 4: Refine Content";default:return"Document Authoring"}},[k,m]=c.default.useState([]),[S,w]=c.default.useState(!1),[E,B]=c.default.useState(60),[T,O]=c.default.useState(["default","minikube","docker-desktop"]),[d,C]=c.default.useState("default"),[P,H]=c.default.useState(["default","kube-system","kube-public"]),[A,r]=c.default.useState("default"),[v,K]=c.default.useState(!1),W=s=>{o?g({...o,overview:s,updatedAt:new Date}):(g({id:`doc-${Date.now()}`,title:s.split(`
`)[0].replace(/^# /,"")||"Untitled Document",overview:s,steps:[],createdAt:new Date,updatedAt:new Date,kubeContext:d,kubeNamespace:A}),f())},U=()=>{if(!o)return;const s=[{id:`step-${Date.now()}-1`,title:"Setup Environment",description:"Ensure you have the required tools and permissions to proceed.",isExpanded:!0,isCodeBlock:!1},{id:`step-${Date.now()}-2`,title:"Create Configuration",description:"Create the necessary configuration files for your deployment.",isExpanded:!0,isCodeBlock:!0,code:`apiVersion: v1
kind: ConfigMap
metadata:
  name: example-config
data:
  config.json: |
    {
      "key": "value"
    }`},{id:`step-${Date.now()}-3`,title:"Deploy Application",description:"Deploy the application to your Kubernetes cluster.",isExpanded:!0,isCodeBlock:!0,code:"kubectl apply -f deployment.yaml"},{id:`step-${Date.now()}-4`,title:"Verify Deployment",description:"Verify that the deployment was successful.",isExpanded:!0,isCodeBlock:!0,code:`kubectl get pods
kubectl get services`}];g({...o,steps:s,updatedAt:new Date}),a()},Y=s=>{o&&(g({...o,steps:o.steps.map(b=>b.id===s.id?s:b),updatedAt:new Date}),p==="implement-content"&&i())},V=s=>{o&&(g({...o,steps:o.steps.map(b=>b.id===s?{...b,executed:!0,executionStatus:"running",executionOutput:"Running command..."}:b)}),setTimeout(()=>{const b=o.steps.find(D=>D.id===s);if(!b)return;const $=Math.random()>.2,R=$?`Command executed successfully.
${b.code?`> ${b.code}
`:""}Output: Operation completed.`:`Error executing command.
${b.code?`> ${b.code}
`:""}Error: Could not complete the operation in context "${d}".`;g({...o,steps:o.steps.map(D=>D.id===s?{...D,executed:!0,executionStatus:$?"success":"failure",executionOutput:R}:D)})},1500))},_=s=>{alert(`Doc would be saved as: ${s.title}.md`),k.includes(`/home/user/documents/${s.title}.md`)||m([`/home/user/documents/${s.title}.md`,...k.slice(0,4)])},Q=()=>{alert("In a full implementation, a file picker would open here.")},J=s=>{o&&alert(`Doc would be saved as: ${o.title}.${s}`)},X=()=>e.jsx(F,{initialOverview:(o==null?void 0:o.overview)||"",onSaveOverview:W,onGenerateSteps:U,authoringPhase:p}),Z=()=>o?e.jsxs("div",{children:[e.jsx(n.default,{variant:"h4",style:{marginBottom:"24px"},children:o.title}),e.jsxs("div",{style:{marginBottom:"24px"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",paddingBottom:"8px",borderBottom:"1px solid #e0e0e0",marginBottom:"12px"},children:[e.jsx(n.default,{variant:"h6",children:"Overview"}),e.jsx("button",{onClick:()=>l("overview"),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Edit Overview"})]}),e.jsx("div",{style:{padding:"16px",backgroundColor:"#f9f9f9",borderRadius:"4px",marginBottom:"24px",maxHeight:"200px",overflowY:"auto"},children:o.overview.split(`
`).map((s,b)=>s.startsWith("# ")?null:s.startsWith("## ")?e.jsx(n.default,{variant:"h6",style:{marginTop:"16px",marginBottom:"8px"},children:s.substring(3)},b):s.startsWith("- ")?e.jsx(n.default,{component:"li",style:{marginLeft:"20px",marginBottom:"4px"},children:s.substring(2)},b):s===""?e.jsx("br",{},b):e.jsx(n.default,{paragraph:!0,children:s},b))})]}),e.jsx(n.default,{variant:"h6",style:{marginBottom:"16px"},children:"Steps"}),o.steps.length===0?e.jsx(n.default,{color:"textSecondary",children:"No steps defined yet."}):o.steps.map(s=>e.jsx(N,{step:s,onStepChange:Y,onRunStep:V,currentContext:d,currentNamespace:A},s.id))]}):e.jsx("div",{style:{textAlign:"center",padding:"40px"},children:e.jsx(n.default,{children:"No document loaded. Create a new one first."})});return e.jsxs("div",{style:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs("div",{style:{padding:"16px"},children:[e.jsxs("div",{style:{marginBottom:"16px",padding:"8px 12px",backgroundColor:"#e3f2fd",borderRadius:"4px",border:"1px solid #bbdefb"},children:[e.jsx(n.default,{variant:"subtitle1",style:{fontWeight:"bold"},children:h()}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",justifyContent:"space-between",flexWrap:"wrap"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:p==="create-overview"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(n.default,{variant:"body2",children:"Create Overview"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:p==="refine-overview"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(n.default,{variant:"body2",children:"Refine Overview"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:p==="implement-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(n.default,{variant:"body2",children:"Implement Content"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:p==="refine-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(n.default,{variant:"body2",children:"Refine Content"})]})]})]}),e.jsx(z,{contexts:T,currentContext:d,onChangeContext:C,namespaces:P,currentNamespace:A,onChangeNamespace:r,isAdmin:v}),x==="steps"&&e.jsx(j,{execDoc:o,onSave:_,onLoad:Q,onExport:J,autoSaveEnabled:S,onToggleAutoSave:()=>w(s=>!s),autoSaveInterval:E,onChangeAutoSaveInterval:B,recentFiles:k,onOpenRecentFile:s=>alert(`Would open: ${s}`)}),o&&e.jsx("div",{style:{marginBottom:"16px"},children:e.jsxs("div",{style:{display:"flex"},children:[e.jsx("button",{onClick:()=>l("overview"),style:{flex:1,padding:"8px",backgroundColor:x==="overview"?"#1976d2":"#f1f1f1",color:x==="overview"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:x==="overview"?"bold":"normal"},children:"Document Overview"}),e.jsx("button",{onClick:()=>l("steps"),style:{flex:1,padding:"8px",backgroundColor:x==="steps"?"#1976d2":"#f1f1f1",color:x==="steps"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:x==="steps"?"bold":"normal"},children:"Document Steps"})]})})]}),e.jsx("div",{style:{flex:1,padding:"0 16px 16px",overflowY:"auto"},children:x==="overview"?X():Z()})]})};y.registerRoute({path:"/exec-doc-editor",sidebar:{item:"exec-doc-editor",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"exec-doc-editor",exact:!0,component:()=>e.jsx(I.SectionBox,{title:"Executable Document Editor",textAlign:"left",paddingTop:2,children:e.jsx(M,{})})}),y.registerSidebarEntry({name:"exec-doc-editor",label:"Exec Doc Editor",url:"/exec-doc-editor",icon:"mdi:file-document-edit",sidebar:"Innovation-engine"}),y.registerSidebarEntry({name:"architect",label:"Architect",url:"/exec-doc-editor",icon:"mdi:code-braces-box",sidebar:"Innovation-engine"}),y.registerSidebarEntry({name:"mypluginsidebar",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"HOME"}),y.registerRoute({path:"/getting-started",sidebar:{item:"getting-started",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"getting-started",exact:!0,component:()=>{const t=()=>{window.location.hash="#/shell-exec",setTimeout(()=>{window.dispatchEvent(new CustomEvent("prefill-innovation-engine-command",{detail:"ie execute ../../../scenarios/testing/variableHierarchy.md"}))},100)};return e.jsxs(I.SectionBox,{title:"Getting Started",textAlign:"center",paddingTop:2,children:[e.jsx(n.default,{children:"This is where Innovation Engine lives"}),e.jsx("br",{}),e.jsx("a",{href:"#",onClick:o=>{o.preventDefault(),t()},style:{fontWeight:"bold",color:"#1976d2",textDecoration:"underline",cursor:"pointer"},children:"Test Innovation Engine"})]})}}),y.registerSidebarEntry({name:"backtohome",label:"Back to Home",url:"/",icon:"mdi:hexagon",sidebar:"Innovation-engine"}),y.registerSidebarEntry({name:"getting-started",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"Innovation-engine"}),y.registerRoute({path:"/shell-exec",sidebar:{item:"shell-exec",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"shell-exec",exact:!0,component:()=>{const[t,o]=c.default.useState("ie execute "),[g,x]=c.default.useState(""),[l,p]=c.default.useState(""),[u,f]=c.default.useState(!1);c.default.useEffect(()=>{const i=h=>{h.detail&&o(h.detail)};return window.addEventListener("prefill-innovation-engine-command",i),()=>window.removeEventListener("prefill-innovation-engine-command",i)},[]);const a=async()=>{f(!0),x(""),p("");try{const i=await fetch("http://localhost:4000/api/exec",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})}),h=await i.json();i.ok?x(`stdout:
${h.stdout}
stderr:
${h.stderr}
exitCode: ${h.exitCode}`):p(h.error||"Unknown error")}catch(i){p(i.message)}finally{f(!1)}};return e.jsxs(I.SectionBox,{title:"Innovation Engine",textAlign:"center",paddingTop:2,children:[e.jsx(n.default,{children:"Enter an allowlisted shell command (e.g., ie):"}),e.jsx("input",{type:"text",value:t,onChange:i=>o(i.target.value),onKeyDown:i=>{i.key==="Enter"&&!u&&a()},style:{width:"60%",margin:"1em 0",padding:"0.5em"}}),e.jsx("br",{}),e.jsx("button",{onClick:a,disabled:u,style:{padding:"0.5em 1em"},children:u?"Running...":"Execute"}),e.jsx("pre",{style:{textAlign:"left",marginTop:"1em",background:"#f5f5f5",padding:"1em"},children:g}),l&&e.jsxs(n.default,{color:"error",children:["Error: ",l]})]})}}),y.registerSidebarEntry({name:"shell-exec",label:"Innovation Engine",url:"/shell-exec",icon:"mdi:console",sidebar:"Innovation-engine"}),y.registerSidebarEntry({name:"assistant",label:"Assistant",url:"/assistant",icon:"mdi:robot",sidebar:"Innovation-engine"}),y.registerRoute({path:"/assistant",sidebar:{item:"assistant",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"assistant",exact:!0,component:()=>{const[t,o]=c.default.useState(""),[g,x]=c.default.useState([{role:"assistant",content:"Hello! I'm the Innovation Engine Assistant. How can I help you with your Kubernetes or Executable Document needs?"}]),[l,p]=c.default.useState(!1),u=c.default.useRef(null);c.default.useEffect(()=>{u.current&&(u.current.scrollTop=u.current.scrollHeight)},[g]);const f=()=>{t.trim()&&(x(a=>[...a,{role:"user",content:t}]),p(!0),setTimeout(()=>{x(a=>[...a,{role:"assistant",content:`I received your request: "${t}". This is a placeholder response. In the full implementation, this would be processed by GitHub Copilot.`}]),o(""),p(!1)},1e3))};return e.jsxs(I.SectionBox,{title:"Innovation Engine Assistant",textAlign:"left",paddingTop:2,children:[e.jsxs("div",{ref:u,style:{height:"400px",overflowY:"auto",marginBottom:"20px",padding:"10px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[g.map((a,i)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:a.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:a.role==="user"?"#1976d2":"#ffffff",color:a.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:a.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(n.default,{children:a.content})})},i)),l&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(n.default,{color:"textSecondary",children:"Processing your request..."})})]}),e.jsxs("div",{style:{display:"flex",alignItems:"flex-start",gap:"10px"},children:[e.jsx("textarea",{value:t,onChange:a=>o(a.target.value),onKeyDown:a=>{a.key==="Enter"&&!a.shiftKey&&(a.preventDefault(),f())},placeholder:"Enter your question or request here (e.g., 'Create a deployment for my app')",style:{flexGrow:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc",minHeight:"100px",resize:"vertical",fontFamily:"inherit",fontSize:"14px"}}),e.jsx("button",{onClick:f,disabled:l||!t.trim(),style:{padding:"10px 20px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:l||!t.trim()?"not-allowed":"pointer",opacity:l||!t.trim()?.7:1},children:"Send"})]}),e.jsxs("div",{style:{marginTop:"20px",borderTop:"1px solid #e0e0e0",paddingTop:"20px"},children:[e.jsx(n.default,{variant:"h6",children:"Quick Start:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px",marginTop:"10px"},children:["Create a simple deployment","Expose a service","Author an Executable Document","Learn about Kubernetes basics"].map((a,i)=>e.jsx("button",{onClick:()=>o(a),style:{padding:"8px 12px",backgroundColor:"#f1f1f1",border:"1px solid #ddd",borderRadius:"16px",cursor:"pointer"},children:a},i))}),e.jsxs("div",{style:{marginTop:"20px",textAlign:"center",padding:"15px",backgroundColor:"#e8f5e9",borderRadius:"8px"},children:[e.jsx(n.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Try our new Exec Doc Editor!"}),e.jsx(n.default,{variant:"body2",style:{marginBottom:"12px"},children:"The new Executable Document Editor provides a more powerful interface for authoring and editing Exec Docs."}),e.jsx("a",{href:"#/exec-doc-editor",style:{display:"inline-block",padding:"8px 16px",backgroundColor:"#4caf50",color:"white",textDecoration:"none",borderRadius:"4px",fontWeight:"bold"},children:"Open Exec Doc Editor"})]})]})]})}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
