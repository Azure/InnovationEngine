(function(e,k){typeof exports=="object"&&typeof module<"u"?k(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material/Typography"),require("react"),require("@mui/material")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material/Typography","react","@mui/material"],k):(e=typeof globalThis<"u"?globalThis:e||self,k(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.MuiMaterial.Typography,e.pluginLib.React,e.pluginLib.MuiMaterial))})(this,function(e,k,F,re,H,m){"use strict";const Z=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},i=Z(re),d=Z(H),oe=({step:t,onStepChange:o,onRunStep:u,currentContext:c,currentNamespace:s})=>{const[h,g]=d.default.useState(!1),[x,y]=d.default.useState(""),[a,l]=d.default.useState(!1),[f,b]=d.default.useState([]),E=()=>{u(t.id)},S=n=>{o({...t,title:n.target.value})},I=n=>{o({...t,description:n.target.value})},B=n=>{o({...t,code:n.target.value})},G=n=>{const C=n.target.checked;o({...t,isCodeBlock:C,code:C&&!t.code?"":t.code})},T=n=>{o({...t,isExpanded:n.target.checked})},W=()=>{o({...t,executed:!1,executionStatus:null,executionOutput:void 0})},L=()=>{x.trim()&&(b(n=>[...n,{role:"user",content:x}]),setTimeout(()=>{b(n=>[...n,{role:"assistant",content:`Here's my suggestion for your request: "${x}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),y("")},1e3))},K=n=>{const C=()=>{o({...t,description:t.description+`

`+n.content}),l(!1)},A=()=>{o({...t,code:(t.code||"")+`

`+n.content,isCodeBlock:!0}),l(!1)},z=n.content.includes("```")||/\b(function|const|let|var|import|export|class|if|for|while)\b/.test(n.content);t.isCodeBlock&&z?A():(t.isCodeBlock,C())},O=()=>{if(!t.executed)return null;let n="",C="";switch(t.executionStatus){case"success":n="#4caf50",C="Success";break;case"failure":n="#f44336",C="Failed";break;case"running":n="#2196f3",C="Running...";break;default:return null}return e.jsx("span",{style:{backgroundColor:n,color:"white",padding:"3px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px"},children:C})},j=()=>{const n="default",C=s;return c!==n?e.jsx("div",{style:{marginTop:"10px",padding:"8px",backgroundColor:"#fff3cd",borderRadius:"4px"},children:e.jsxs(i.default,{variant:"body2",style:{color:"#856404"},children:['⚠️ This step may require the "',n,'" context and "',C,`" namespace, but you're currently in context "`,c,'".']})}):null};return e.jsxs("div",{style:{border:"1px solid #e0e0e0",borderRadius:"8px",marginBottom:"20px",overflow:"hidden"},children:[e.jsxs("div",{style:{padding:"12px 16px",backgroundColor:"#f5f5f5",display:"flex",justifyContent:"space-between",alignItems:"center",borderBottom:"1px solid #ddd"},children:[h?e.jsx("input",{type:"text",value:t.title,onChange:S,style:{fontSize:"18px",fontWeight:"bold",padding:"8px",width:"60%",borderRadius:"4px",border:"1px solid #ddd"},placeholder:"Step title"}):e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsx(i.default,{variant:"h6",style:{margin:0},children:t.title}),O(),t.isCodeBlock&&e.jsxs("span",{style:{backgroundColor:"#e0f7fa",color:"#00838f",padding:"2px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px",display:"flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"⚙️"}),"Executable"]})]}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>g(!h),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:h?"#1976d2":"#f0f0f0",color:h?"white":"black",border:"1px solid "+(h?"#1976d2":"#ddd"),borderRadius:"4px",cursor:"pointer",fontWeight:h?"bold":"normal"},children:h?"Save Changes":"Edit Step"}),e.jsx("button",{onClick:()=>l(!a),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:a?"#9c27b0":"#f0f0f0",color:a?"white":"black",border:"1px solid "+(a?"#9c27b0":"#ddd"),borderRadius:"4px",cursor:"pointer"},children:a?"Hide Help":"Get Help"}),t.isCodeBlock&&e.jsxs("button",{onClick:E,disabled:t.executionStatus==="running","aria-label":`Run step ${t.title}`,style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:t.executionStatus==="running"?"not-allowed":"pointer",opacity:t.executionStatus==="running"?.7:1,display:"inline-flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"▶️"}),t.executionStatus==="running"?"Running...":"Run"]})]})]}),e.jsxs("div",{style:{padding:"16px"},children:[j(),h?e.jsxs("div",{children:[e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"16px",marginBottom:"16px",padding:"12px",backgroundColor:"#f5f5f5",borderRadius:"4px"},children:[e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isCodeBlock,onChange:n=>G(n),style:{marginRight:"8px"}}),e.jsx("span",{children:"Contains executable code"})]}),e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isExpanded,onChange:n=>T(n),style:{marginRight:"8px"}}),e.jsx("span",{children:"Expanded by default"})]}),t.executed&&e.jsx("button",{onClick:W,style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Reset Execution Status"})]}),e.jsx(i.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Description:"}),e.jsx("textarea",{value:t.description,onChange:I,onKeyDown:n=>{n.key==="Enter"&&(n.ctrlKey||n.metaKey)&&(n.preventDefault(),g(!1))},placeholder:"Enter description for this step. Press CTRL+ENTER to save changes.",style:{width:"100%",minHeight:"200px",padding:"8px",marginBottom:"16px",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"}}),t.isCodeBlock&&e.jsxs("div",{children:[e.jsx(i.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Code:"}),e.jsx("textarea",{value:t.code||"",onChange:B,onKeyDown:n=>{n.key==="Enter"&&(n.ctrlKey||n.metaKey)&&(n.preventDefault(),g(!1))},style:{width:"100%",minHeight:"250px",padding:"8px",fontFamily:"monospace",backgroundColor:"#f8f8f8",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"},placeholder:"Enter executable code here. Press CTRL+ENTER to save changes."}),e.jsx(i.default,{variant:"caption",color:"textSecondary",style:{display:"block",marginTop:"4px"},children:"This code will be executed when the user runs this step."})]})]}):e.jsxs("div",{children:[e.jsx(i.default,{variant:"body1",style:{whiteSpace:"pre-wrap",marginBottom:"16px"},children:t.description}),t.isCodeBlock&&t.code&&e.jsx("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginBottom:"16px",overflowX:"auto"},children:e.jsx("pre",{style:{margin:0,fontFamily:"monospace"},children:t.code})})]}),t.executed&&t.executionOutput&&e.jsxs("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginTop:"16px",border:"1px solid #ddd"},children:[e.jsx(i.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Output:"}),e.jsx("pre",{style:{margin:0,fontFamily:"monospace",whiteSpace:"pre-wrap"},children:t.executionOutput})]})]}),a&&e.jsxs("div",{style:{padding:"16px",borderTop:"1px solid #e0e0e0"},children:[e.jsx(i.default,{variant:"h6",style:{marginBottom:"12px"},children:"Copilot Assistance"}),e.jsx("div",{style:{maxHeight:"200px",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:f.map((n,C)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:n.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:n.role==="user"?"#1976d2":"#ffffff",color:n.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:n.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(i.default,{children:n.content}),n.role==="assistant"&&e.jsxs("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:[e.jsx("button",{onClick:()=>K(n),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"}),t.isCodeBlock&&e.jsxs("div",{style:{display:"flex",gap:"4px"},children:[e.jsx("button",{onClick:()=>{o({...t,description:t.description+`

`+n.content}),l(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px 0 0 4px",cursor:"pointer",fontSize:"12px"},children:"Apply to Description"}),e.jsx("button",{onClick:()=>{o({...t,code:(t.code||"")+`

`+n.content}),l(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"0 4px 4px 0",cursor:"pointer",fontSize:"12px"},children:"Apply to Code"})]})]})]})},C))}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("textarea",{value:x,onChange:n=>y(n.target.value),onKeyDown:n=>{n.key==="Enter"&&(n.ctrlKey||n.metaKey)&&x.trim()&&(n.preventDefault(),L())},placeholder:"Ask for help with this step (e.g., 'Help me improve the code for this step'). Press CTRL+ENTER to submit.",style:{flexGrow:1,padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"150px",fontSize:"14px",lineHeight:"1.5"}}),e.jsx("button",{onClick:L,disabled:!x.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:x.trim()?"pointer":"not-allowed",opacity:x.trim()?1:.7},children:"Ask Copilot"})]})]})]})},R={serverBaseUrl:"http://localhost:4001",async generateOverview(t){console.log(`Generating overview for topic: "${t}" using server at ${this.serverBaseUrl}`);try{const o=await fetch(`${this.serverBaseUrl}/api/overview`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:t})});if(!o.ok)try{const u=o.headers.get("content-type");if(u&&u.includes("application/json")){const c=await o.json();throw new Error(c.error||"Failed to generate overview")}else{const c=await o.text();throw new Error(`Server error: ${o.status} - ${c.substring(0,100)}...`)}}catch(u){throw new Error(`Failed to generate overview: ${u.message}`)}try{return(await o.json()).overview||"No overview generated"}catch{const c=await o.clone().text();throw new Error(`Invalid JSON response: ${c.substring(0,100)}...`)}}catch(o){throw console.error("Error in generateOverview:",o),o}},async sendAssistantQuery(t){const o=await fetch(`${this.serverBaseUrl}/api/assistant`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:t})});if(!o.ok)try{const c=o.headers.get("content-type");if(c&&c.includes("application/json")){const s=await o.json();throw new Error(s.error||"Failed to get response from assistant")}else{const s=await o.text();throw new Error(`Server error: ${o.status} - ${s.substring(0,100)}...`)}}catch(c){throw new Error(`Failed to get response from assistant: ${c.message}`)}return(await o.json()).response||"No response generated"},async executeCommand(t){const o=await fetch(`${this.serverBaseUrl}/api/exec`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})});if(!o.ok){const u=await o.json();throw new Error(u.error||"Failed to execute command")}return await o.json()}},ne=({initialOverview:t="",onSaveOverview:o,onGenerateSteps:u,authoringPhase:c="create-overview"})=>{const[s,h]=d.default.useState(""),[g,x]=d.default.useState(t),[y,a]=d.default.useState(!1),[l,f]=d.default.useState([]),[b,E]=d.default.useState(!1),[S,I]=d.default.useState("prompt"),[B,G]=d.default.useState(""),[T,W]=d.default.useState(!1),[L,K]=d.default.useState(null),[O,j]=d.default.useState(!1),[n,C]=d.default.useState([]),[A,z]=d.default.useState(""),[N,M]=d.default.useState(70),[U,Y]=d.default.useState(!1),q=d.default.useRef(null);d.default.useEffect(()=>{const r=()=>{q.current&&(q.current.style.display="grid")};return window.addEventListener("resize",r),r(),()=>{window.removeEventListener("resize",r)}},[]);const J=()=>{s.trim()&&(f(r=>[...r,{role:"user",content:s}]),E(!0),setTimeout(()=>{const r=`
# ${s}

## Overview

This is an Executable Document that will guide you through the process of ${s.toLowerCase()}. 
Follow the steps below to complete this task in your Kubernetes environment.

## Prerequisites

- Kubernetes cluster
- kubectl configured to access your cluster
- Necessary permissions to deploy resources

## Expected Outcome

Successfully ${s.toLowerCase()} in your Kubernetes cluster.
      `.trim();x(r),f(v=>[...v,{role:"assistant",content:`I've generated an overview for "${s}". You can edit it directly or ask me to make changes.`}]),h(""),E(!1),I("preview")},1e3))},Q=()=>{o(g),u()},p=()=>{A.trim()&&(C(r=>[...r,{role:"user",content:A}]),setTimeout(()=>{C(r=>[...r,{role:"assistant",content:`Here are my thoughts about your overview based on your request: "${A}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),z("")},1e3))},w=async()=>{if(B.trim()){W(!0),K(null);try{const r=`Kubernetes executable document for: ${B}`,v=await R.generateOverview(r);x(v),f(D=>[...D,{role:"assistant",content:`I've generated an executable document overview for "${B}" using Azure AI. You can edit it directly or ask me to make changes.`}]),G(""),I("preview"),a(!0)}catch(r){K(r.message||"An error occurred while generating the overview"),f(v=>[...v,{role:"assistant",content:`I encountered an error while generating the overview: ${r.message||"Unknown error"}. Please try again or use a different approach.`}])}finally{W(!1)}}},P=r=>{if(r.role==="assistant"){let v=r.content;v=v.replace(/Here are my thoughts about your overview based on your request: "[^"]*"\. /,""),v=v.replace("This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.",""),x(D=>{const _=D.trim()?`

`:"";return D.trim()+_+v.trim()}),y||a(!0)}},V=r=>{r.preventDefault(),Y(!0);const v=_=>{const ee=document.getElementById("overview-authoring-container");if(ee){const te=ee.getBoundingClientRect(),X=(_.clientX-te.left)/te.width*100;X>30&&X<70&&M(X)}},D=()=>{Y(!1),document.removeEventListener("mousemove",v),document.removeEventListener("mouseup",D)};document.addEventListener("mousemove",v),document.addEventListener("mouseup",D)},$=()=>{j(r=>!r)},se=()=>{switch(c){case"create-overview":return"Generate Steps";default:return"Generate Steps"}};return e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsx(i.default,{variant:"h5",style:{marginBottom:"16px"},children:"Create & Edit Document Overview"}),e.jsx("div",{style:{padding:"8px 12px",backgroundColor:"#f0f9ff",borderLeft:"4px solid #1976d2",marginBottom:"16px"},children:e.jsx(i.default,{variant:"body2",children:c==="create-overview"?"Step 1: Create an overview that describes what this document will accomplish.":"Step 2: Refine your overview to ensure it accurately describes the intended workflow."})}),e.jsxs("div",{style:{display:"flex",marginBottom:"16px"},children:[e.jsx("button",{onClick:()=>I("prompt"),style:{flex:1,padding:"8px",backgroundColor:S==="prompt"?"#1976d2":"#f1f1f1",color:S==="prompt"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:S==="prompt"?"bold":"normal"},children:"Prompt & Conversation"}),e.jsx("button",{onClick:()=>I("preview"),style:{flex:1,padding:"8px",backgroundColor:S==="preview"?"#1976d2":"#f1f1f1",color:S==="preview"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:S==="preview"?"bold":"normal"},children:"Preview & Edit"})]}),e.jsxs("div",{style:{padding:"12px",backgroundColor:"#e3f2fd",borderRadius:"4px",marginBottom:"16px",border:"1px solid #bbdefb"},children:[e.jsx(i.default,{variant:"subtitle1",style:{fontWeight:"bold",marginBottom:"8px"},children:"Generate with Azure AI"}),e.jsx(i.default,{variant:"body2",style:{marginBottom:"12px"},children:"Use Azure OpenAI to generate an architectural overview for your document."}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("div",{style:{flex:1},children:e.jsx("input",{type:"text",value:B,onChange:r=>G(r.target.value),placeholder:"E.g., Kubernetes Deployment with Service Mesh",style:{width:"100%",padding:"8px 12px",border:"1px solid #ccc",borderRadius:"4px",fontSize:"14px"},disabled:T})}),e.jsx("button",{onClick:w,disabled:T||!B.trim(),style:{padding:"8px 16px",backgroundColor:"#0078d4",color:"white",border:"none",borderRadius:"4px",cursor:T||!B.trim()?"not-allowed":"pointer",opacity:T||!B.trim()?.7:1},children:T?"Generating...":"Generate Overview"})]}),L&&e.jsx("div",{style:{marginTop:"8px",padding:"8px",backgroundColor:"#ffebee",border:"1px solid #ffcdd2",borderRadius:"4px",color:"#c62828"},children:e.jsx(i.default,{variant:"body2",children:L})})]}),e.jsxs("div",{id:"overview-authoring-container",ref:q,style:{flex:1,display:"grid",gridTemplateColumns:`${N}% 6px calc(${100-N-.6}%)`,gridTemplateRows:"1fr",overflow:"hidden",position:"relative",minHeight:"600px"},children:[e.jsx("div",{style:{height:"100%",display:"flex",flexDirection:"column",overflow:"hidden"},children:S==="prompt"?e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsxs("div",{style:{marginBottom:"16px"},children:[e.jsx(i.default,{variant:"subtitle1",children:"What kind of Executable Document do you want to create?"}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",gap:"8px"},children:[e.jsx("input",{type:"text",value:s,onChange:r=>h(r.target.value),onKeyDown:r=>{r.key==="Enter"&&(r.ctrlKey||r.metaKey)&&s.trim()&&J()},placeholder:"E.g., Create a deployment for a Node.js application",style:{flex:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc"}}),e.jsx("button",{onClick:J,disabled:b||!s.trim(),style:{padding:"10px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:b||!s.trim()?"not-allowed":"pointer",opacity:b||!s.trim()?.7:1},children:b?"Generating...":"Generate"})]})]}),e.jsxs("div",{style:{flex:1,overflowY:"auto",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#f9f9f9"},children:[l.length===0&&e.jsx(i.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Enter a prompt above to start generating your Executable Document"}),l.map((r,v)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:r.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:r.role==="user"?"#1976d2":"#ffffff",color:r.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:r.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(i.default,{children:r.content})})},v)),b&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(i.default,{color:"textSecondary",children:"Generating overview..."})})]})]}):e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsxs("div",{style:{marginBottom:"16px",display:"flex",justifyContent:"space-between"},children:[e.jsx(i.default,{variant:"subtitle1",children:y?"Edit Overview":"Preview Overview"}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>a(!y),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:y?"Preview":"Edit"}),e.jsx("button",{onClick:Q,disabled:!g.trim(),style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:g.trim()?"pointer":"not-allowed",opacity:g.trim()?1:.7},children:se()})]})]}),e.jsx("div",{style:{flex:1,display:"flex",flexDirection:"column",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#ffffff",overflowY:"auto"},children:y?e.jsx("textarea",{value:g,onChange:r=>x(r.target.value),onKeyDown:r=>{r.key==="Enter"&&(r.ctrlKey||r.metaKey)&&g.trim()&&(r.preventDefault(),a(!1))},placeholder:"Enter your document overview content. Press CTRL+ENTER to save changes.",style:{width:"100%",height:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",fontFamily:"monospace",fontSize:"14px",lineHeight:"1.5",resize:"none"}}):e.jsx("div",{style:{padding:"16px",flex:1,maxWidth:"800px",margin:"0 auto",fontFamily:"system-ui, -apple-system, sans-serif",lineHeight:1.6,overflow:"auto"},children:g.split(`
`).map((r,v)=>r.startsWith("# ")?e.jsx(i.default,{variant:"h4",style:{marginBottom:"16px"},children:r.substring(2)},v):r.startsWith("## ")?e.jsx(i.default,{variant:"h5",style:{marginTop:"24px",marginBottom:"12px"},children:r.substring(3)},v):r.startsWith("- ")?e.jsx(i.default,{component:"li",style:{marginLeft:"20px",marginBottom:"8px"},children:r.substring(2)},v):r===""?e.jsx("br",{},v):e.jsx(i.default,{paragraph:!0,children:r},v))})})]})}),e.jsx("div",{role:"separator","aria-orientation":"vertical","aria-label":"Resize panels",style:{width:"6px",height:"100%",background:"#e0e0e0",cursor:"col-resize",userSelect:"none",transition:U?"none":"background 0.2s",position:"relative"},onMouseDown:V,onKeyDown:r=>{if(r.key==="ArrowLeft"||r.key==="ArrowRight"){r.preventDefault();const v=r.key==="ArrowLeft"?-2:2,D=N+v;D>30&&D<70&&M(D)}},onFocus:r=>{r.currentTarget.style.background="#1976d2",r.currentTarget.style.outline="2px solid #1976d2"},onBlur:r=>{r.currentTarget.style.background="#e0e0e0",r.currentTarget.style.outline="none"},children:e.jsx("div",{style:{position:"absolute",left:"50%",top:"50%",transform:"translate(-50%, -50%)",height:"30px",width:"4px",background:U?"#1976d2":"#aaa",borderRadius:"2px"}})}),e.jsxs("div",{style:{height:"100%",display:O?"none":"flex",flexDirection:"column",overflow:"hidden",padding:"8px",backgroundColor:"#fafafa",borderLeft:"1px solid #e0e0e0"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",marginBottom:"12px"},children:[e.jsx(i.default,{variant:"h6",children:"Copilot Assistance"}),e.jsx("button",{onClick:$,"aria-label":"Collapse Copilot assistance panel",title:"Collapse Copilot assistance panel",style:{padding:"3px 6px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",fontSize:"12px",cursor:"pointer"},children:"Collapse"})]}),e.jsxs("div",{style:{flex:1,display:"flex",flexDirection:"column",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[n.length===0&&e.jsx(i.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Ask Copilot for help with improving your overview"}),n.map((r,v)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:r.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:r.role==="user"?"#1976d2":"#ffffff",color:r.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:r.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(i.default,{children:r.content}),r.role==="assistant"&&e.jsx("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:e.jsx("button",{onClick:()=>P(r),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"})})]})},v))]}),e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"8px"},children:[e.jsx("textarea",{value:A,onChange:r=>z(r.target.value),onKeyDown:r=>{r.key==="Enter"&&(r.ctrlKey||r.metaKey)&&A.trim()&&(r.preventDefault(),p())},placeholder:"Ask Copilot for help with your overview (e.g., 'Could you suggest a better structure for this overview?'). Press CTRL+ENTER to submit.",style:{width:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"100px",fontSize:"14px",lineHeight:"1.5",fontFamily:"monospace"}}),e.jsx("button",{onClick:p,disabled:!A.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:A.trim()?"pointer":"not-allowed",opacity:A.trim()?1:.7},children:"Ask Copilot"})]})]}),O&&e.jsx("div",{style:{position:"absolute",right:"0",top:"50%",transform:"translateY(-50%)",zIndex:1},children:e.jsx("button",{onClick:$,"aria-label":"Open Copilot assistance panel",title:"Open Copilot assistance panel",style:{padding:"8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",boxShadow:"-2px 0 4px rgba(0,0,0,0.1)"},children:"≪ Open Copilot"})})]})]})},ie=({execDoc:t,onSave:o,onLoad:u,onExport:c,autoSaveEnabled:s,onToggleAutoSave:h,autoSaveInterval:g,onChangeAutoSaveInterval:x,recentFiles:y,onOpenRecentFile:a})=>{const l=()=>{t&&o(t)},f=b=>{x(parseInt(b.target.value,10))};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(i.default,{variant:"h6",style:{marginBottom:"12px"},children:"File Operations"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px"},children:[e.jsx("button",{onClick:l,disabled:!t,style:{padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Save to Disk"}),e.jsx("button",{onClick:u,style:{padding:"8px 16px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Load from Disk"}),e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsxs("label",{style:{marginRight:"8px",display:"flex",alignItems:"center"},children:[e.jsx("input",{type:"checkbox",checked:s,onChange:h,style:{marginRight:"4px"}}),"Auto-save"]}),s&&e.jsxs("select",{value:g,onChange:f,style:{padding:"6px",borderRadius:"4px",border:"1px solid #ddd"},children:[e.jsx("option",{value:30,children:"Every 30 seconds"}),e.jsx("option",{value:60,children:"Every minute"}),e.jsx("option",{value:300,children:"Every 5 minutes"}),e.jsx("option",{value:600,children:"Every 10 minutes"})]})]})]}),e.jsxs("div",{style:{marginTop:"12px"},children:[e.jsx(i.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Save as:"}),e.jsx("div",{style:{display:"flex",gap:"8px"},children:e.jsx("button",{onClick:()=>c("markdown"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Markdown"})})]}),y.length>0&&e.jsxs("div",{style:{marginTop:"16px"},children:[e.jsx(i.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Recent Files:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"8px"},children:y.map((b,E)=>e.jsx("button",{onClick:()=>a(b),style:{padding:"6px 12px",backgroundColor:"#f5f5f5",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer",textOverflow:"ellipsis",overflow:"hidden",maxWidth:"200px",whiteSpace:"nowrap"},children:b.split("/").pop()},E))})]})]})},ae=({contexts:t,currentContext:o,onChangeContext:u,namespaces:c,currentNamespace:s,onChangeNamespace:h,isAdmin:g})=>{const x=a=>{u(a.target.value)},y=a=>{h(a.target.value)};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(i.default,{variant:"h6",style:{marginBottom:"12px"},children:"Kubernetes Context"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px"},children:[e.jsxs("div",{children:[e.jsx("label",{htmlFor:"context-selector",style:{display:"block",marginBottom:"6px"},children:"Context:"}),e.jsx("select",{id:"context-selector",value:o,onChange:x,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:t.map(a=>e.jsxs("option",{value:a,children:[a," ",a===o?"(current)":""]},a))})]}),e.jsxs("div",{children:[e.jsx("label",{htmlFor:"namespace-selector",style:{display:"block",marginBottom:"6px"},children:"Namespace:"}),e.jsx("select",{id:"namespace-selector",value:s,onChange:y,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:c.map(a=>e.jsxs("option",{value:a,children:[a," ",a===s?"(current)":""]},a))})]}),e.jsx("div",{style:{display:"flex",alignItems:"center",marginLeft:"auto"},children:e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"8px",padding:"8px 12px",backgroundColor:"#f5f5f5",borderRadius:"4px",border:"1px solid #e0e0e0"},children:[e.jsx("span",{style:{width:"10px",height:"10px",borderRadius:"50%",backgroundColor:g?"#4caf50":"#ff9800",display:"inline-block"}}),e.jsx(i.default,{variant:"body2",children:g?"Admin Access":"Standard Access"})]})})]})]})},de=({initialDoc:t=null})=>{const[o,u]=d.default.useState(t),[c,s]=d.default.useState(t?"steps":"overview"),[h,g]=d.default.useState(t?"refine-content":"create-overview"),x=()=>{g("implement-content"),s("steps")},y=()=>{g("refine-content"),s("steps")},a=()=>{switch(h){case"create-overview":return"Phase 1: Create & Edit Overview";case"implement-content":return"Phase 2: Implement Content";case"refine-content":return"Phase 3: Refine Content";default:return"Document Authoring"}},[l,f]=d.default.useState([]),[b,E]=d.default.useState(!1),[S,I]=d.default.useState(60),[B,G]=d.default.useState(["default","minikube","docker-desktop"]),[T,W]=d.default.useState("default"),[L,K]=d.default.useState(["default","kube-system","kube-public"]),[O,j]=d.default.useState("default"),[n,C]=d.default.useState(!1),A=p=>{if(o){const w=p.match(/^# (.+)$/m),P=w?w[1]:o.title;u({...o,title:P,overview:p,updatedAt:new Date})}else{const w=p.match(/^# (.+)$/m),P=w?w[1]:"Untitled Document";u({id:`doc-${Date.now()}`,title:P,overview:p,steps:[],createdAt:new Date,updatedAt:new Date,kubeContext:T,kubeNamespace:O})}},z=()=>{if(!o)return;const p=[{id:`step-${Date.now()}-1`,title:"Setup Environment",description:"Ensure you have the required tools and permissions to proceed.",isExpanded:!0,isCodeBlock:!1},{id:`step-${Date.now()}-2`,title:"Create Configuration",description:"Create the necessary configuration files for your deployment.",isExpanded:!0,isCodeBlock:!0,code:`apiVersion: v1
kind: ConfigMap
metadata:
  name: example-config
data:
  config.json: |
    {
      "key": "value"
    }`},{id:`step-${Date.now()}-3`,title:"Deploy Application",description:"Deploy the application to your Kubernetes cluster.",isExpanded:!0,isCodeBlock:!0,code:"kubectl apply -f deployment.yaml"},{id:`step-${Date.now()}-4`,title:"Verify Deployment",description:"Verify that the deployment was successful.",isExpanded:!0,isCodeBlock:!0,code:`kubectl get pods
kubectl get services`}];u({...o,steps:p,updatedAt:new Date}),x()},N=p=>{o&&(u({...o,steps:o.steps.map(w=>w.id===p.id?p:w),updatedAt:new Date}),h==="implement-content"&&y())},M=p=>{o&&(u({...o,steps:o.steps.map(w=>w.id===p?{...w,executed:!0,executionStatus:"running",executionOutput:"Running command..."}:w)}),setTimeout(()=>{const w=o.steps.find($=>$.id===p);if(!w)return;const P=Math.random()>.2,V=P?`Command executed successfully.
${w.code?`> ${w.code}
`:""}Output: Operation completed.`:`Error executing command.
${w.code?`> ${w.code}
`:""}Error: Could not complete the operation in context "${T}".`;u({...o,steps:o.steps.map($=>$.id===p?{...$,executed:!0,executionStatus:P?"success":"failure",executionOutput:V}:$)})},1500))},U=p=>{alert(`Doc would be saved as: ${p.title}.md`),l.includes(`/home/user/documents/${p.title}.md`)||f([`/home/user/documents/${p.title}.md`,...l.slice(0,4)])},Y=()=>{alert("In a full implementation, a file picker would open here.")},q=p=>{o&&alert(`Doc would be saved as: ${o.title}.${p}`)},J=()=>e.jsx(ne,{initialOverview:(o==null?void 0:o.overview)||"",onSaveOverview:A,onGenerateSteps:z,authoringPhase:h}),Q=()=>o?e.jsxs("div",{children:[e.jsx(i.default,{variant:"h4",style:{marginBottom:"24px"},children:o.title}),e.jsxs("div",{style:{marginBottom:"24px"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",paddingBottom:"8px",borderBottom:"1px solid #e0e0e0",marginBottom:"12px"},children:[e.jsx(i.default,{variant:"h6",children:"Overview"}),e.jsx("button",{onClick:()=>s("overview"),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Edit Overview"})]}),e.jsx("div",{style:{padding:"16px",backgroundColor:"#f9f9f9",borderRadius:"4px",marginBottom:"24px",maxHeight:"200px",overflowY:"auto"},children:o.overview.split(`
`).map((p,w)=>p.startsWith("# ")?null:p.startsWith("## ")?e.jsx(i.default,{variant:"h6",style:{marginTop:"16px",marginBottom:"8px"},children:p.substring(3)},w):p.startsWith("- ")?e.jsx(i.default,{component:"li",style:{marginLeft:"20px",marginBottom:"4px"},children:p.substring(2)},w):p===""?e.jsx("br",{},w):e.jsx(i.default,{paragraph:!0,children:p},w))})]}),e.jsx(i.default,{variant:"h6",style:{marginBottom:"16px"},children:"Steps"}),o.steps.length===0?e.jsx(i.default,{color:"textSecondary",children:"No steps defined yet."}):o.steps.map(p=>e.jsx(oe,{step:p,onStepChange:N,onRunStep:M,currentContext:T,currentNamespace:O},p.id))]}):e.jsx("div",{style:{textAlign:"center",padding:"40px"},children:e.jsx(i.default,{children:"No document loaded. Create a new one first."})});return e.jsxs("div",{style:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs("div",{style:{padding:"16px"},children:[e.jsxs("div",{style:{marginBottom:"16px",padding:"8px 12px",backgroundColor:"#e3f2fd",borderRadius:"4px",border:"1px solid #bbdefb"},children:[e.jsx(i.default,{variant:"subtitle1",style:{fontWeight:"bold"},children:a()}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",justifyContent:"space-between",flexWrap:"wrap"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:h==="create-overview"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(i.default,{variant:"body2",children:"Create Overview"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:h==="implement-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(i.default,{variant:"body2",children:"Implement Content"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:h==="refine-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(i.default,{variant:"body2",children:"Refine Content"})]})]})]}),e.jsx(ae,{contexts:B,currentContext:T,onChangeContext:W,namespaces:L,currentNamespace:O,onChangeNamespace:j,isAdmin:n}),c==="steps"&&e.jsx(ie,{execDoc:o,onSave:U,onLoad:Y,onExport:q,autoSaveEnabled:b,onToggleAutoSave:()=>E(p=>!p),autoSaveInterval:S,onChangeAutoSaveInterval:I,recentFiles:l,onOpenRecentFile:p=>alert(`Would open: ${p}`)}),o&&e.jsx("div",{style:{marginBottom:"16px"},children:e.jsxs("div",{style:{display:"flex"},children:[e.jsx("button",{onClick:()=>s("overview"),style:{flex:1,padding:"8px",backgroundColor:c==="overview"?"#1976d2":"#f1f1f1",color:c==="overview"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:c==="overview"?"bold":"normal"},children:"Document Overview"}),e.jsx("button",{onClick:()=>s("steps"),style:{flex:1,padding:"8px",backgroundColor:c==="steps"?"#1976d2":"#f1f1f1",color:c==="steps"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:c==="steps"?"bold":"normal"},children:"Document Steps"})]})})]}),e.jsx("div",{style:{flex:1,padding:"0 16px 16px",overflowY:"auto"},children:c==="overview"?J():Q()})]})};k.registerRoute({path:"/exec-doc-editor",sidebar:{item:"exec-doc-editor",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"exec-doc-editor",exact:!0,component:()=>e.jsx(F.SectionBox,{title:"Executable Document Editor",textAlign:"left",paddingTop:2,children:e.jsx(de,{})})}),k.registerSidebarEntry({name:"exec-doc-editor",label:"Exec Doc Editor",url:"/exec-doc-editor",icon:"mdi:file-document-edit",sidebar:"Innovation-engine"}),k.registerSidebarEntry({name:"architect",label:"Architect",url:"/exec-doc-editor",icon:"mdi:code-braces-box",sidebar:"Innovation-engine"});function le(){const[t,o]=H.useState(""),[u,c]=H.useState(""),[s,h]=H.useState(!1),[g,x]=H.useState(null),[y,a]=H.useState(!1),l=async f=>{if(f.preventDefault(),!t.trim()){x("Please enter a topic to generate an overview"),a(!0);return}h(!0),x(null);try{const b=await fetch(`${R.serverBaseUrl}/api/overview`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:t})});if(!b.ok){const S=await b.json();throw new Error(S.error||"Failed to generate overview")}const E=await b.json();c(E.overview||"No overview generated")}catch(b){x(b.message||"Failed to generate overview"),a(!0)}finally{h(!1)}};return e.jsxs(m.Box,{p:2,children:[e.jsx(m.Typography,{variant:"h4",gutterBottom:!0,children:"Azure Architecture Overview Generator"}),e.jsx(m.Typography,{variant:"body1",paragraph:!0,children:"Enter an Azure workload or solution to generate a comprehensive architectural overview."}),e.jsx(m.Card,{children:e.jsx(m.CardContent,{children:e.jsx("form",{onSubmit:l,children:e.jsxs(m.Grid,{container:!0,spacing:2,children:[e.jsx(m.Grid,{item:!0,xs:12,children:e.jsx(m.TextField,{fullWidth:!0,label:"Workload or Solution",value:t,onChange:f=>o(f.target.value),placeholder:"E.g., Web Application with SQL Database, Microservices Architecture, etc.",disabled:s})}),e.jsx(m.Grid,{item:!0,xs:12,children:e.jsx(m.Button,{type:"submit",variant:"contained",color:"primary",disabled:s,children:s?e.jsx(m.CircularProgress,{size:24}):"Generate Overview"})})]})})})}),u&&e.jsx(m.Card,{style:{marginTop:16},children:e.jsxs(m.CardContent,{children:["              ",e.jsxs(m.Typography,{variant:"h5",gutterBottom:!0,children:["Azure Architecture Overview: ",t]}),e.jsx(m.Box,{style:{whiteSpace:"pre-wrap",backgroundColor:"#f5f5f5",padding:16,borderRadius:4},children:e.jsx(m.Typography,{variant:"body1",children:u})})]})}),e.jsx(m.Snackbar,{open:y,autoHideDuration:6e3,onClose:()=>a(!1),children:e.jsx(m.Alert,{onClose:()=>a(!1),severity:"error",children:g})})]})}k.registerSidebarEntry({name:"mypluginsidebar",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"HOME"}),k.registerRoute({path:"/getting-started",sidebar:{item:"getting-started",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"getting-started",exact:!0,component:()=>{const t=()=>{window.location.hash="#/shell-exec",setTimeout(()=>{window.dispatchEvent(new CustomEvent("prefill-innovation-engine-command",{detail:"ie execute ../../../scenarios/testing/variableHierarchy.md"}))},100)};return e.jsxs(F.SectionBox,{title:"Getting Started",textAlign:"center",paddingTop:2,children:[e.jsx(i.default,{children:"This is where Innovation Engine lives"}),e.jsx("br",{}),e.jsx("a",{href:"#",onClick:o=>{o.preventDefault(),t()},style:{fontWeight:"bold",color:"#1976d2",textDecoration:"underline",cursor:"pointer"},children:"Test Innovation Engine"})]})}}),k.registerSidebarEntry({name:"backtohome",label:"Back to Home",url:"/",icon:"mdi:hexagon",sidebar:"Innovation-engine"}),k.registerSidebarEntry({name:"getting-started",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"Innovation-engine"}),k.registerRoute({path:"/shell-exec",sidebar:{item:"shell-exec",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"shell-exec",exact:!0,component:()=>{const[t,o]=d.default.useState("ie execute "),[u,c]=d.default.useState(""),[s,h]=d.default.useState(""),[g,x]=d.default.useState(!1);d.default.useEffect(()=>{const a=l=>{l.detail&&o(l.detail)};return window.addEventListener("prefill-innovation-engine-command",a),()=>window.removeEventListener("prefill-innovation-engine-command",a)},[]);const y=async()=>{x(!0),c(""),h("");try{const a=await fetch("http://localhost:4000/api/exec",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})}),l=await a.json();a.ok?c(`stdout:
${l.stdout}
stderr:
${l.stderr}
exitCode: ${l.exitCode}`):h(l.error||"Unknown error")}catch(a){h(a.message)}finally{x(!1)}};return e.jsxs(F.SectionBox,{title:"Innovation Engine",textAlign:"center",paddingTop:2,children:[e.jsx(i.default,{children:"Enter an allowlisted shell command (e.g., ie):"}),e.jsx("input",{type:"text",value:t,onChange:a=>o(a.target.value),onKeyDown:a=>{a.key==="Enter"&&!g&&y()},style:{width:"60%",margin:"1em 0",padding:"0.5em"}}),e.jsx("br",{}),e.jsx("button",{onClick:y,disabled:g,style:{padding:"0.5em 1em"},children:g?"Running...":"Execute"}),e.jsx("pre",{style:{textAlign:"left",marginTop:"1em",background:"#f5f5f5",padding:"1em"},children:u}),s&&e.jsxs(i.default,{color:"error",children:["Error: ",s]})]})}}),k.registerSidebarEntry({name:"shell-exec",label:"Innovation Engine",url:"/shell-exec",icon:"mdi:console",sidebar:"Innovation-engine"}),k.registerSidebarEntry({name:"assistant",label:"Assistant",url:"/assistant",icon:"mdi:robot",sidebar:"Innovation-engine"}),k.registerRoute({path:"/assistant",sidebar:{item:"assistant",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"assistant",exact:!0,component:()=>{const[t,o]=d.default.useState(""),[u,c]=d.default.useState([{role:"assistant",content:"Hello! I'm the Innovation Engine Assistant. How can I help you with your Kubernetes or Executable Document needs?"}]),[s,h]=d.default.useState(!1),[g,x]=d.default.useState(""),y=d.default.useRef(null);d.default.useEffect(()=>{y.current&&(y.current.scrollTop=y.current.scrollHeight)},[u]);const a=async()=>{if(!t.trim())return;const l=t;c(f=>[...f,{role:"user",content:l}]),h(!0),o("");try{const f=await fetch("http://localhost:4000/api/assistant",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:u.concat({role:"user",content:l})})});if(!f.ok)throw new Error(`Error: ${f.status} ${f.statusText}`);const b=await f.json();c(E=>[...E,{role:"assistant",content:b.response}])}catch(f){console.error("Error communicating with Azure AI:",f),x(f.message||"Failed to communicate with the assistant service"),c(b=>[...b,{role:"assistant",content:"I'm sorry, I encountered an error while processing your request. Please try again later."}])}finally{h(!1)}};return e.jsxs(F.SectionBox,{title:"Innovation Engine Assistant",textAlign:"left",paddingTop:2,children:[e.jsxs("div",{ref:y,style:{height:"400px",overflowY:"auto",marginBottom:"20px",padding:"10px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[u.map((l,f)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:l.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:l.role==="user"?"#1976d2":"#ffffff",color:l.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:l.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(i.default,{children:l.content})})},f)),s&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(i.default,{color:"textSecondary",children:"Processing your request..."})})]}),e.jsxs("div",{style:{display:"flex",alignItems:"flex-start",gap:"10px"},children:[e.jsx("textarea",{value:t,onChange:l=>o(l.target.value),onKeyDown:l=>{l.key==="Enter"&&!l.shiftKey&&(l.preventDefault(),a())},placeholder:"Enter your question or request here (e.g., 'Create a deployment for my app')",style:{flexGrow:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc",minHeight:"100px",resize:"vertical",fontFamily:"inherit",fontSize:"14px"}}),e.jsx("button",{onClick:a,disabled:s||!t.trim(),style:{padding:"10px 20px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:s||!t.trim()?"not-allowed":"pointer",opacity:s||!t.trim()?.7:1},children:"Send"})]}),e.jsxs("div",{style:{marginTop:"20px",borderTop:"1px solid #e0e0e0",paddingTop:"20px"},children:[e.jsx(i.default,{variant:"h6",children:"Quick Start:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px",marginTop:"10px"},children:["Create a simple deployment","Expose a service","Author an Executable Document","Learn about Kubernetes basics"].map((l,f)=>e.jsx("button",{onClick:()=>o(l),style:{padding:"8px 12px",backgroundColor:"#f1f1f1",border:"1px solid #ddd",borderRadius:"16px",cursor:"pointer"},children:l},f))}),e.jsxs("div",{style:{marginTop:"20px",textAlign:"center",padding:"15px",backgroundColor:"#e8f5e9",borderRadius:"8px"},children:[e.jsx(i.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Try our new Exec Doc Editor!"}),e.jsx(i.default,{variant:"body2",style:{marginBottom:"12px"},children:"The new Executable Document Editor provides a more powerful interface for authoring and editing Exec Docs."}),e.jsx("a",{href:"#/exec-doc-editor",style:{display:"inline-block",padding:"8px 16px",backgroundColor:"#4caf50",color:"white",textDecoration:"none",borderRadius:"4px",fontWeight:"bold"},children:"Open Exec Doc Editor"})]})]})]})}}),k.registerSidebarEntry({name:"overview-generator",label:"Azure Architecture",url:"/overview-generator",icon:"mdi:cloud-outline",sidebar:"Innovation-engine"}),k.registerRoute({path:"/overview-generator",sidebar:{item:"overview-generator",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"overview-generator",exact:!0,component:le})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
