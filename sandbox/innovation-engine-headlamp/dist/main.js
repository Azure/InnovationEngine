(function(e,C){typeof exports=="object"&&typeof module<"u"?C(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material/Typography"),require("react"),require("@mui/material")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material/Typography","react","@mui/material"],C):(e=typeof globalThis<"u"?globalThis:e||self,C(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.MuiMaterial.Typography,e.pluginLib.React,e.pluginLib.MuiMaterial))})(this,function(e,C,q,V,O,m){"use strict";const Y=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},i=Y(V),l=Y(O),_=({step:t,onStepChange:r,onRunStep:u,currentContext:s,currentNamespace:c})=>{const[h,v]=l.default.useState(!1),[x,f]=l.default.useState(""),[a,d]=l.default.useState(!1),[g,b]=l.default.useState([]),E=()=>{u(t.id)},B=n=>{r({...t,title:n.target.value})},W=n=>{r({...t,description:n.target.value})},P=n=>{r({...t,code:n.target.value})},j=n=>{const k=n.target.checked;r({...t,isCodeBlock:k,code:k&&!t.code?"":t.code})},S=n=>{r({...t,isExpanded:n.target.checked})},$=()=>{r({...t,executed:!1,executionStatus:null,executionOutput:void 0})},D=()=>{x.trim()&&(b(n=>[...n,{role:"user",content:x}]),setTimeout(()=>{b(n=>[...n,{role:"assistant",content:`Here's my suggestion for your request: "${x}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),f("")},1e3))},G=n=>{const k=()=>{r({...t,description:t.description+`

`+n.content}),d(!1)},H=()=>{r({...t,code:(t.code||"")+`

`+n.content,isCodeBlock:!0}),d(!1)},z=n.content.includes("```")||/\b(function|const|let|var|import|export|class|if|for|while)\b/.test(n.content);t.isCodeBlock&&z?H():(t.isCodeBlock,k())},I=()=>{if(!t.executed)return null;let n="",k="";switch(t.executionStatus){case"success":n="#4caf50",k="Success";break;case"failure":n="#f44336",k="Failed";break;case"running":n="#2196f3",k="Running...";break;default:return null}return e.jsx("span",{style:{backgroundColor:n,color:"white",padding:"3px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px"},children:k})},L=()=>{const n="default",k=c;return s!==n?e.jsx("div",{style:{marginTop:"10px",padding:"8px",backgroundColor:"#fff3cd",borderRadius:"4px"},children:e.jsxs(i.default,{variant:"body2",style:{color:"#856404"},children:['⚠️ This step may require the "',n,'" context and "',k,`" namespace, but you're currently in context "`,s,'".']})}):null};return e.jsxs("div",{style:{border:"1px solid #e0e0e0",borderRadius:"8px",marginBottom:"20px",overflow:"hidden"},children:[e.jsxs("div",{style:{padding:"12px 16px",backgroundColor:"#f5f5f5",display:"flex",justifyContent:"space-between",alignItems:"center",borderBottom:"1px solid #ddd"},children:[h?e.jsx("input",{type:"text",value:t.title,onChange:B,style:{fontSize:"18px",fontWeight:"bold",padding:"8px",width:"60%",borderRadius:"4px",border:"1px solid #ddd"},placeholder:"Step title"}):e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsx(i.default,{variant:"h6",style:{margin:0},children:t.title}),I(),t.isCodeBlock&&e.jsxs("span",{style:{backgroundColor:"#e0f7fa",color:"#00838f",padding:"2px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px",display:"flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"⚙️"}),"Executable"]})]}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>v(!h),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:h?"#1976d2":"#f0f0f0",color:h?"white":"black",border:"1px solid "+(h?"#1976d2":"#ddd"),borderRadius:"4px",cursor:"pointer",fontWeight:h?"bold":"normal"},children:h?"Save Changes":"Edit Step"}),e.jsx("button",{onClick:()=>d(!a),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:a?"#9c27b0":"#f0f0f0",color:a?"white":"black",border:"1px solid "+(a?"#9c27b0":"#ddd"),borderRadius:"4px",cursor:"pointer"},children:a?"Hide Help":"Get Help"}),t.isCodeBlock&&e.jsxs("button",{onClick:E,disabled:t.executionStatus==="running","aria-label":`Run step ${t.title}`,style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:t.executionStatus==="running"?"not-allowed":"pointer",opacity:t.executionStatus==="running"?.7:1,display:"inline-flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"▶️"}),t.executionStatus==="running"?"Running...":"Run"]})]})]}),e.jsxs("div",{style:{padding:"16px"},children:[L(),h?e.jsxs("div",{children:[e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"16px",marginBottom:"16px",padding:"12px",backgroundColor:"#f5f5f5",borderRadius:"4px"},children:[e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isCodeBlock,onChange:n=>j(n),style:{marginRight:"8px"}}),e.jsx("span",{children:"Contains executable code"})]}),e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isExpanded,onChange:n=>S(n),style:{marginRight:"8px"}}),e.jsx("span",{children:"Expanded by default"})]}),t.executed&&e.jsx("button",{onClick:$,style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Reset Execution Status"})]}),e.jsx(i.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Description:"}),e.jsx("textarea",{value:t.description,onChange:W,onKeyDown:n=>{n.key==="Enter"&&(n.ctrlKey||n.metaKey)&&(n.preventDefault(),v(!1))},placeholder:"Enter description for this step. Press CTRL+ENTER to save changes.",style:{width:"100%",minHeight:"200px",padding:"8px",marginBottom:"16px",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"}}),t.isCodeBlock&&e.jsxs("div",{children:[e.jsx(i.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Code:"}),e.jsx("textarea",{value:t.code||"",onChange:P,onKeyDown:n=>{n.key==="Enter"&&(n.ctrlKey||n.metaKey)&&(n.preventDefault(),v(!1))},style:{width:"100%",minHeight:"250px",padding:"8px",fontFamily:"monospace",backgroundColor:"#f8f8f8",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"},placeholder:"Enter executable code here. Press CTRL+ENTER to save changes."}),e.jsx(i.default,{variant:"caption",color:"textSecondary",style:{display:"block",marginTop:"4px"},children:"This code will be executed when the user runs this step."})]})]}):e.jsxs("div",{children:[e.jsx(i.default,{variant:"body1",style:{whiteSpace:"pre-wrap",marginBottom:"16px"},children:t.description}),t.isCodeBlock&&t.code&&e.jsx("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginBottom:"16px",overflowX:"auto"},children:e.jsx("pre",{style:{margin:0,fontFamily:"monospace"},children:t.code})})]}),t.executed&&t.executionOutput&&e.jsxs("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginTop:"16px",border:"1px solid #ddd"},children:[e.jsx(i.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Output:"}),e.jsx("pre",{style:{margin:0,fontFamily:"monospace",whiteSpace:"pre-wrap"},children:t.executionOutput})]})]}),a&&e.jsxs("div",{style:{padding:"16px",borderTop:"1px solid #e0e0e0"},children:[e.jsx(i.default,{variant:"h6",style:{marginBottom:"12px"},children:"Copilot Assistance"}),e.jsx("div",{style:{maxHeight:"200px",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:g.map((n,k)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:n.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:n.role==="user"?"#1976d2":"#ffffff",color:n.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:n.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(i.default,{children:n.content}),n.role==="assistant"&&e.jsxs("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:[e.jsx("button",{onClick:()=>G(n),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"}),t.isCodeBlock&&e.jsxs("div",{style:{display:"flex",gap:"4px"},children:[e.jsx("button",{onClick:()=>{r({...t,description:t.description+`

`+n.content}),d(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px 0 0 4px",cursor:"pointer",fontSize:"12px"},children:"Apply to Description"}),e.jsx("button",{onClick:()=>{r({...t,code:(t.code||"")+`

`+n.content}),d(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"0 4px 4px 0",cursor:"pointer",fontSize:"12px"},children:"Apply to Code"})]})]})]})},k))}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("textarea",{value:x,onChange:n=>f(n.target.value),onKeyDown:n=>{n.key==="Enter"&&(n.ctrlKey||n.metaKey)&&x.trim()&&(n.preventDefault(),D())},placeholder:"Ask for help with this step (e.g., 'Help me improve the code for this step'). Press CTRL+ENTER to submit.",style:{flexGrow:1,padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"150px",fontSize:"14px",lineHeight:"1.5"}}),e.jsx("button",{onClick:D,disabled:!x.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:x.trim()?"pointer":"not-allowed",opacity:x.trim()?1:.7},children:"Ask Copilot"})]})]})]})},Q={serverBaseUrl:"http://localhost:4001",async generateOverview(t){console.log(`Generating overview for topic: "${t}" using server at ${this.serverBaseUrl}`);try{const r=await fetch(`${this.serverBaseUrl}/api/overview`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:t})});if(!r.ok)try{const u=r.headers.get("content-type");if(u&&u.includes("application/json")){const s=await r.json();throw new Error(s.error||"Failed to generate overview")}else{const s=await r.text();throw new Error(`Server error: ${r.status} - ${s.substring(0,100)}...`)}}catch(u){throw new Error(`Failed to generate overview: ${u.message}`)}try{return(await r.json()).overview||"No overview generated"}catch{const s=await r.clone().text();throw new Error(`Invalid JSON response: ${s.substring(0,100)}...`)}}catch(r){throw console.error("Error in generateOverview:",r),r}},async sendAssistantQuery(t){const r=await fetch(`${this.serverBaseUrl}/api/assistant`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:t})});if(!r.ok)try{const s=r.headers.get("content-type");if(s&&s.includes("application/json")){const c=await r.json();throw new Error(c.error||"Failed to get response from assistant")}else{const c=await r.text();throw new Error(`Server error: ${r.status} - ${c.substring(0,100)}...`)}}catch(s){throw new Error(`Failed to get response from assistant: ${s.message}`)}return(await r.json()).response||"No response generated"},async executeCommand(t){const r=await fetch(`${this.serverBaseUrl}/api/exec`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})});if(!r.ok){const u=await r.json();throw new Error(u.error||"Failed to execute command")}return await r.json()}},X=({initialOverview:t="",onSaveOverview:r,onGenerateSteps:u,authoringPhase:s="create-overview"})=>{const[c,h]=l.default.useState(t),[v,x]=l.default.useState(!1),[f,a]=l.default.useState(""),[d,g]=l.default.useState(!1),[b,E]=l.default.useState(null),[B,W]=l.default.useState(!1),[P,j]=l.default.useState([]),[S,$]=l.default.useState(""),[D,G]=l.default.useState(70),[I,L]=l.default.useState(!1),n=l.default.useRef(null);l.default.useEffect(()=>{const o=()=>{n.current&&(n.current.style.display="grid")};return window.addEventListener("resize",o),o(),()=>{window.removeEventListener("resize",o)}},[]);const k=()=>{r(c),u()},H=()=>{S.trim()&&(j(o=>[...o,{role:"user",content:S}]),setTimeout(()=>{j(o=>[...o,{role:"assistant",content:`Here are my thoughts about your overview based on your request: "${S}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),$("")},1e3))},z=async()=>{if(f.trim()){g(!0),E(null);try{const o=`Kubernetes executable document for: ${f}`,w=await Q.generateOverview(o);h(w),a(""),x(!0)}catch(o){E(o.message||"An error occurred while generating the overview")}finally{g(!1)}}},M=o=>{if(o.role==="assistant"){let w=o.content;w=w.replace(/Here are my thoughts about your overview based on your request: "[^"]*"\. /,""),w=w.replace("This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.",""),h(T=>{const p=T.trim()?`

`:"";return T.trim()+p+w.trim()}),v||x(!0)}},U=o=>{o.preventDefault(),L(!0);const w=p=>{const y=document.getElementById("overview-authoring-container");if(y){const A=y.getBoundingClientRect(),K=(p.clientX-A.left)/A.width*100;K>30&&K<70&&G(K)}},T=()=>{L(!1),document.removeEventListener("mousemove",w),document.removeEventListener("mouseup",T)};document.addEventListener("mousemove",w),document.addEventListener("mouseup",T)},F=()=>{W(o=>!o)},J=()=>{switch(s){case"create-overview":return"Generate Steps";default:return"Generate Steps"}};return e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsx(i.default,{variant:"h5",style:{marginBottom:"16px"},children:"Create & Edit Document Overview"}),e.jsx("div",{style:{padding:"8px 12px",backgroundColor:"#f0f9ff",borderLeft:"4px solid #1976d2",marginBottom:"16px"},children:e.jsx(i.default,{variant:"body2",children:s==="create-overview"?"Step 1: Create an overview that describes what this document will accomplish.":"Step 2: Refine your overview to ensure it accurately describes the intended workflow."})}),e.jsxs("div",{style:{padding:"12px",backgroundColor:"#e3f2fd",borderRadius:"4px",marginBottom:"16px",border:"1px solid #bbdefb"},children:[e.jsx(i.default,{variant:"subtitle1",style:{fontWeight:"bold",marginBottom:"8px"},children:"Generate with Azure AI"}),e.jsx(i.default,{variant:"body2",style:{marginBottom:"12px"},children:"Use Azure OpenAI to generate an architectural overview for your document."}),e.jsxs("div",{style:{display:"flex",gap:"8px",marginBottom:"12px"},children:[e.jsx("div",{style:{flex:1},children:e.jsx("input",{type:"text",value:f,onChange:o=>a(o.target.value),placeholder:"E.g., Kubernetes Deployment with Service Mesh",style:{width:"100%",padding:"8px 12px",border:"1px solid #ccc",borderRadius:"4px",fontSize:"14px"},disabled:d})}),e.jsx("button",{onClick:z,disabled:d||!f.trim(),style:{padding:"8px 16px",backgroundColor:"#0078d4",color:"white",border:"none",borderRadius:"4px",cursor:d||!f.trim()?"not-allowed":"pointer",opacity:d||!f.trim()?.7:1},children:d?"Generating...":"Generate Overview"})]}),e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",marginTop:"8px"},children:[e.jsx("div",{children:b&&e.jsx("div",{style:{padding:"8px",backgroundColor:"#ffebee",border:"1px solid #ffcdd2",borderRadius:"4px",color:"#c62828"},children:e.jsx(i.default,{variant:"body2",children:b})})}),c.trim()&&e.jsx("button",{onClick:k,disabled:!c.trim(),style:{padding:"8px 16px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:c.trim()?"pointer":"not-allowed",opacity:c.trim()?1:.7,fontWeight:"bold"},children:J()})]})]}),e.jsxs("div",{id:"overview-authoring-container",ref:n,style:{flex:1,display:"grid",gridTemplateColumns:`${D}% 6px calc(${100-D-.6}%)`,gridTemplateRows:"1fr",overflow:"hidden",position:"relative",minHeight:"600px"},children:[e.jsx("div",{style:{height:"100%",display:"flex",flexDirection:"column",overflow:"hidden"},children:e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsxs("div",{style:{marginBottom:"16px",display:"flex",justifyContent:"space-between"},children:[e.jsx(i.default,{variant:"subtitle1",children:v?"Edit Overview":"Preview Overview"}),e.jsx("div",{children:e.jsx("button",{onClick:()=>x(!v),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:v?"Preview":"Edit"})})]}),e.jsx("div",{style:{flex:1,display:"flex",flexDirection:"column",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#ffffff",overflowY:"auto"},children:v?e.jsx("textarea",{value:c,onChange:o=>h(o.target.value),onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&c.trim()&&(o.preventDefault(),x(!1))},placeholder:"Enter your document overview content. Press CTRL+ENTER to save changes.",style:{width:"100%",height:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",fontFamily:"monospace",fontSize:"14px",lineHeight:"1.5",resize:"none"}}):e.jsx("div",{style:{padding:"16px",flex:1,maxWidth:"800px",margin:"0 auto",fontFamily:"system-ui, -apple-system, sans-serif",lineHeight:1.6,overflow:"auto"},children:c.split(`
`).map((o,w)=>o.startsWith("# ")?e.jsx(i.default,{variant:"h4",style:{marginBottom:"16px"},children:o.substring(2)},w):o.startsWith("## ")?e.jsx(i.default,{variant:"h5",style:{marginTop:"24px",marginBottom:"12px"},children:o.substring(3)},w):o.startsWith("- ")?e.jsx(i.default,{component:"li",style:{marginLeft:"20px",marginBottom:"8px"},children:o.substring(2)},w):o===""?e.jsx("br",{},w):e.jsx(i.default,{paragraph:!0,children:o},w))})})]})}),e.jsx("div",{role:"separator","aria-orientation":"vertical","aria-label":"Resize panels",style:{width:"6px",height:"100%",background:"#e0e0e0",cursor:"col-resize",userSelect:"none",transition:I?"none":"background 0.2s",position:"relative"},onMouseDown:U,onKeyDown:o=>{if(o.key==="ArrowLeft"||o.key==="ArrowRight"){o.preventDefault();const w=o.key==="ArrowLeft"?-2:2,T=D+w;T>30&&T<70&&G(T)}},onFocus:o=>{o.currentTarget.style.background="#1976d2",o.currentTarget.style.outline="2px solid #1976d2"},onBlur:o=>{o.currentTarget.style.background="#e0e0e0",o.currentTarget.style.outline="none"},children:e.jsx("div",{style:{position:"absolute",left:"50%",top:"50%",transform:"translate(-50%, -50%)",height:"30px",width:"4px",background:I?"#1976d2":"#aaa",borderRadius:"2px"}})}),e.jsxs("div",{style:{height:"100%",display:B?"none":"flex",flexDirection:"column",overflow:"hidden",padding:"8px",backgroundColor:"#fafafa",borderLeft:"1px solid #e0e0e0"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",marginBottom:"12px"},children:[e.jsx(i.default,{variant:"h6",children:"Copilot Assistance"}),e.jsx("button",{onClick:F,"aria-label":"Collapse Copilot assistance panel",title:"Collapse Copilot assistance panel",style:{padding:"3px 6px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",fontSize:"12px",cursor:"pointer"},children:"Collapse"})]}),e.jsxs("div",{style:{flex:1,display:"flex",flexDirection:"column",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[P.length===0&&e.jsx(i.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Ask Copilot for help with improving your overview"}),P.map((o,w)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:o.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:o.role==="user"?"#1976d2":"#ffffff",color:o.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:o.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(i.default,{children:o.content}),o.role==="assistant"&&e.jsx("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:e.jsx("button",{onClick:()=>M(o),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"})})]})},w))]}),e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"8px"},children:[e.jsx("textarea",{value:S,onChange:o=>$(o.target.value),onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&S.trim()&&(o.preventDefault(),H())},placeholder:"Ask Copilot for help with your overview (e.g., 'Could you suggest a better structure for this overview?'). Press CTRL+ENTER to submit.",style:{width:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"100px",fontSize:"14px",lineHeight:"1.5",fontFamily:"monospace"}}),e.jsx("button",{onClick:H,disabled:!S.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:S.trim()?"pointer":"not-allowed",opacity:S.trim()?1:.7},children:"Ask Copilot"})]})]}),B&&e.jsx("div",{style:{position:"absolute",right:"0",top:"50%",transform:"translateY(-50%)",zIndex:1},children:e.jsx("button",{onClick:F,"aria-label":"Open Copilot assistance panel",title:"Open Copilot assistance panel",style:{padding:"8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",boxShadow:"-2px 0 4px rgba(0,0,0,0.1)"},children:"≪ Open Copilot"})})]})]})},Z=({execDoc:t,onSave:r,onLoad:u,onExport:s,autoSaveEnabled:c,onToggleAutoSave:h,autoSaveInterval:v,onChangeAutoSaveInterval:x,recentFiles:f,onOpenRecentFile:a})=>{const d=()=>{t&&r(t)},g=b=>{x(parseInt(b.target.value,10))};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(i.default,{variant:"h6",style:{marginBottom:"12px"},children:"File Operations"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px"},children:[e.jsx("button",{onClick:d,disabled:!t,style:{padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Save to Disk"}),e.jsx("button",{onClick:u,style:{padding:"8px 16px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Load from Disk"}),e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsxs("label",{style:{marginRight:"8px",display:"flex",alignItems:"center"},children:[e.jsx("input",{type:"checkbox",checked:c,onChange:h,style:{marginRight:"4px"}}),"Auto-save"]}),c&&e.jsxs("select",{value:v,onChange:g,style:{padding:"6px",borderRadius:"4px",border:"1px solid #ddd"},children:[e.jsx("option",{value:30,children:"Every 30 seconds"}),e.jsx("option",{value:60,children:"Every minute"}),e.jsx("option",{value:300,children:"Every 5 minutes"}),e.jsx("option",{value:600,children:"Every 10 minutes"})]})]})]}),e.jsxs("div",{style:{marginTop:"12px"},children:[e.jsx(i.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Save as:"}),e.jsx("div",{style:{display:"flex",gap:"8px"},children:e.jsx("button",{onClick:()=>s("markdown"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Markdown"})})]}),f.length>0&&e.jsxs("div",{style:{marginTop:"16px"},children:[e.jsx(i.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Recent Files:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"8px"},children:f.map((b,E)=>e.jsx("button",{onClick:()=>a(b),style:{padding:"6px 12px",backgroundColor:"#f5f5f5",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer",textOverflow:"ellipsis",overflow:"hidden",maxWidth:"200px",whiteSpace:"nowrap"},children:b.split("/").pop()},E))})]})]})},R=({contexts:t,currentContext:r,onChangeContext:u,namespaces:s,currentNamespace:c,onChangeNamespace:h,isAdmin:v})=>{const x=a=>{u(a.target.value)},f=a=>{h(a.target.value)};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(i.default,{variant:"h6",style:{marginBottom:"12px"},children:"Kubernetes Context"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px"},children:[e.jsxs("div",{children:[e.jsx("label",{htmlFor:"context-selector",style:{display:"block",marginBottom:"6px"},children:"Context:"}),e.jsx("select",{id:"context-selector",value:r,onChange:x,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:t.map(a=>e.jsxs("option",{value:a,children:[a," ",a===r?"(current)":""]},a))})]}),e.jsxs("div",{children:[e.jsx("label",{htmlFor:"namespace-selector",style:{display:"block",marginBottom:"6px"},children:"Namespace:"}),e.jsx("select",{id:"namespace-selector",value:c,onChange:f,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:s.map(a=>e.jsxs("option",{value:a,children:[a," ",a===c?"(current)":""]},a))})]}),e.jsx("div",{style:{display:"flex",alignItems:"center",marginLeft:"auto"},children:e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"8px",padding:"8px 12px",backgroundColor:"#f5f5f5",borderRadius:"4px",border:"1px solid #e0e0e0"},children:[e.jsx("span",{style:{width:"10px",height:"10px",borderRadius:"50%",backgroundColor:v?"#4caf50":"#ff9800",display:"inline-block"}}),e.jsx(i.default,{variant:"body2",children:v?"Admin Access":"Standard Access"})]})})]})]})},ee=({initialDoc:t=null})=>{const[r,u]=l.default.useState(t),[s,c]=l.default.useState(t?"steps":"overview"),[h,v]=l.default.useState(t?"refine-content":"create-overview"),x=()=>{v("implement-content"),c("steps")},f=()=>{v("refine-content"),c("steps")},a=()=>{switch(h){case"create-overview":return"Phase 1: Create & Edit Overview";case"implement-content":return"Phase 2: Implement Content";case"refine-content":return"Phase 3: Refine Content";default:return"Document Authoring"}},[d,g]=l.default.useState([]),[b,E]=l.default.useState(!1),[B,W]=l.default.useState(60),[P,j]=l.default.useState(["default","minikube","docker-desktop"]),[S,$]=l.default.useState("default"),[D,G]=l.default.useState(["default","kube-system","kube-public"]),[I,L]=l.default.useState("default"),[n,k]=l.default.useState(!1),H=p=>{if(r){const y=p.match(/^# (.+)$/m),A=y?y[1]:r.title;u({...r,title:A,overview:p,updatedAt:new Date})}else{const y=p.match(/^# (.+)$/m),A=y?y[1]:"Untitled Document";u({id:`doc-${Date.now()}`,title:A,overview:p,steps:[],createdAt:new Date,updatedAt:new Date,kubeContext:S,kubeNamespace:I})}},z=()=>{if(!r)return;const p=[{id:`step-${Date.now()}-1`,title:"Setup Environment",description:"Ensure you have the required tools and permissions to proceed.",isExpanded:!0,isCodeBlock:!1},{id:`step-${Date.now()}-2`,title:"Create Configuration",description:"Create the necessary configuration files for your deployment.",isExpanded:!0,isCodeBlock:!0,code:`apiVersion: v1
kind: ConfigMap
metadata:
  name: example-config
data:
  config.json: |
    {
      "key": "value"
    }`},{id:`step-${Date.now()}-3`,title:"Deploy Application",description:"Deploy the application to your Kubernetes cluster.",isExpanded:!0,isCodeBlock:!0,code:"kubectl apply -f deployment.yaml"},{id:`step-${Date.now()}-4`,title:"Verify Deployment",description:"Verify that the deployment was successful.",isExpanded:!0,isCodeBlock:!0,code:`kubectl get pods
kubectl get services`}];u({...r,steps:p,updatedAt:new Date}),x()},M=p=>{r&&(u({...r,steps:r.steps.map(y=>y.id===p.id?p:y),updatedAt:new Date}),h==="implement-content"&&f())},U=p=>{r&&(u({...r,steps:r.steps.map(y=>y.id===p?{...y,executed:!0,executionStatus:"running",executionOutput:"Running command..."}:y)}),setTimeout(()=>{const y=r.steps.find(N=>N.id===p);if(!y)return;const A=Math.random()>.2,K=A?`Command executed successfully.
${y.code?`> ${y.code}
`:""}Output: Operation completed.`:`Error executing command.
${y.code?`> ${y.code}
`:""}Error: Could not complete the operation in context "${S}".`;u({...r,steps:r.steps.map(N=>N.id===p?{...N,executed:!0,executionStatus:A?"success":"failure",executionOutput:K}:N)})},1500))},F=p=>{alert(`Doc would be saved as: ${p.title}.md`),d.includes(`/home/user/documents/${p.title}.md`)||g([`/home/user/documents/${p.title}.md`,...d.slice(0,4)])},J=()=>{alert("In a full implementation, a file picker would open here.")},o=p=>{r&&alert(`Doc would be saved as: ${r.title}.${p}`)},w=()=>e.jsx(X,{initialOverview:(r==null?void 0:r.overview)||"",onSaveOverview:H,onGenerateSteps:z,authoringPhase:h}),T=()=>r?e.jsxs("div",{children:[e.jsx(i.default,{variant:"h4",style:{marginBottom:"24px"},children:r.title}),e.jsxs("div",{style:{marginBottom:"24px"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",paddingBottom:"8px",borderBottom:"1px solid #e0e0e0",marginBottom:"12px"},children:[e.jsx(i.default,{variant:"h6",children:"Overview"}),e.jsx("button",{onClick:()=>c("overview"),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Edit Overview"})]}),e.jsx("div",{style:{padding:"16px",backgroundColor:"#f9f9f9",borderRadius:"4px",marginBottom:"24px",maxHeight:"200px",overflowY:"auto"},children:r.overview.split(`
`).map((p,y)=>p.startsWith("# ")?null:p.startsWith("## ")?e.jsx(i.default,{variant:"h6",style:{marginTop:"16px",marginBottom:"8px"},children:p.substring(3)},y):p.startsWith("- ")?e.jsx(i.default,{component:"li",style:{marginLeft:"20px",marginBottom:"4px"},children:p.substring(2)},y):p===""?e.jsx("br",{},y):e.jsx(i.default,{paragraph:!0,children:p},y))})]}),e.jsx(i.default,{variant:"h6",style:{marginBottom:"16px"},children:"Steps"}),r.steps.length===0?e.jsx(i.default,{color:"textSecondary",children:"No steps defined yet."}):r.steps.map(p=>e.jsx(_,{step:p,onStepChange:M,onRunStep:U,currentContext:S,currentNamespace:I},p.id))]}):e.jsx("div",{style:{textAlign:"center",padding:"40px"},children:e.jsx(i.default,{children:"No document loaded. Create a new one first."})});return e.jsxs("div",{style:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs("div",{style:{padding:"16px"},children:[e.jsxs("div",{style:{marginBottom:"16px",padding:"8px 12px",backgroundColor:"#e3f2fd",borderRadius:"4px",border:"1px solid #bbdefb"},children:[e.jsx(i.default,{variant:"subtitle1",style:{fontWeight:"bold"},children:a()}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",justifyContent:"space-between",flexWrap:"wrap"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:h==="create-overview"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(i.default,{variant:"body2",children:"Create Overview"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:h==="implement-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(i.default,{variant:"body2",children:"Implement Content"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:h==="refine-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(i.default,{variant:"body2",children:"Refine Content"})]})]})]}),e.jsx(R,{contexts:P,currentContext:S,onChangeContext:$,namespaces:D,currentNamespace:I,onChangeNamespace:L,isAdmin:n}),s==="steps"&&e.jsx(Z,{execDoc:r,onSave:F,onLoad:J,onExport:o,autoSaveEnabled:b,onToggleAutoSave:()=>E(p=>!p),autoSaveInterval:B,onChangeAutoSaveInterval:W,recentFiles:d,onOpenRecentFile:p=>alert(`Would open: ${p}`)}),r&&e.jsx("div",{style:{marginBottom:"16px"},children:e.jsxs("div",{style:{display:"flex"},children:[e.jsx("button",{onClick:()=>c("overview"),style:{flex:1,padding:"8px",backgroundColor:s==="overview"?"#1976d2":"#f1f1f1",color:s==="overview"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:s==="overview"?"bold":"normal"},children:"Document Overview"}),e.jsx("button",{onClick:()=>c("steps"),style:{flex:1,padding:"8px",backgroundColor:s==="steps"?"#1976d2":"#f1f1f1",color:s==="steps"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:s==="steps"?"bold":"normal"},children:"Document Steps"})]})})]}),e.jsx("div",{style:{flex:1,padding:"0 16px 16px",overflowY:"auto"},children:s==="overview"?w():T()})]})};C.registerRoute({path:"/exec-doc-editor",sidebar:{item:"exec-doc-editor",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"exec-doc-editor",exact:!0,component:()=>e.jsx(q.SectionBox,{title:"Executable Document Editor",textAlign:"left",paddingTop:2,children:e.jsx(ee,{})})}),C.registerSidebarEntry({name:"exec-doc-editor",label:"Exec Doc Editor",url:"/exec-doc-editor",icon:"mdi:file-document-edit",sidebar:"Innovation-engine"}),C.registerSidebarEntry({name:"architect",label:"Architect",url:"/exec-doc-editor",icon:"mdi:code-braces-box",sidebar:"Innovation-engine"});function te(){const[t,r]=O.useState(""),[u,s]=O.useState(""),[c,h]=O.useState(!1),[v,x]=O.useState(null),[f,a]=O.useState(!1),d=async g=>{if(g.preventDefault(),!t.trim()){x("Please enter a topic to generate an overview"),a(!0);return}h(!0),x(null);try{const b=await fetch(`${Q.serverBaseUrl}/api/overview`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:t})});if(!b.ok){const B=await b.json();throw new Error(B.error||"Failed to generate overview")}const E=await b.json();s(E.overview||"No overview generated")}catch(b){x(b.message||"Failed to generate overview"),a(!0)}finally{h(!1)}};return e.jsxs(m.Box,{p:2,children:[e.jsx(m.Typography,{variant:"h4",gutterBottom:!0,children:"Azure Architecture Overview Generator"}),e.jsx(m.Typography,{variant:"body1",paragraph:!0,children:"Enter an Azure workload or solution to generate a comprehensive architectural overview."}),e.jsx(m.Card,{children:e.jsx(m.CardContent,{children:e.jsx("form",{onSubmit:d,children:e.jsxs(m.Grid,{container:!0,spacing:2,children:[e.jsx(m.Grid,{item:!0,xs:12,children:e.jsx(m.TextField,{fullWidth:!0,label:"Workload or Solution",value:t,onChange:g=>r(g.target.value),placeholder:"E.g., Web Application with SQL Database, Microservices Architecture, etc.",disabled:c})}),e.jsx(m.Grid,{item:!0,xs:12,children:e.jsx(m.Button,{type:"submit",variant:"contained",color:"primary",disabled:c,children:c?e.jsx(m.CircularProgress,{size:24}):"Generate Overview"})})]})})})}),u&&e.jsx(m.Card,{style:{marginTop:16},children:e.jsxs(m.CardContent,{children:["              ",e.jsxs(m.Typography,{variant:"h5",gutterBottom:!0,children:["Azure Architecture Overview: ",t]}),e.jsx(m.Box,{style:{whiteSpace:"pre-wrap",backgroundColor:"#f5f5f5",padding:16,borderRadius:4},children:e.jsx(m.Typography,{variant:"body1",children:u})})]})}),e.jsx(m.Snackbar,{open:f,autoHideDuration:6e3,onClose:()=>a(!1),children:e.jsx(m.Alert,{onClose:()=>a(!1),severity:"error",children:v})})]})}C.registerSidebarEntry({name:"mypluginsidebar",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"HOME"}),C.registerRoute({path:"/getting-started",sidebar:{item:"getting-started",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"getting-started",exact:!0,component:()=>{const t=()=>{window.location.hash="#/shell-exec",setTimeout(()=>{window.dispatchEvent(new CustomEvent("prefill-innovation-engine-command",{detail:"ie execute ../../../scenarios/testing/variableHierarchy.md"}))},100)};return e.jsxs(q.SectionBox,{title:"Getting Started",textAlign:"center",paddingTop:2,children:[e.jsx(i.default,{children:"This is where Innovation Engine lives"}),e.jsx("br",{}),e.jsx("a",{href:"#",onClick:r=>{r.preventDefault(),t()},style:{fontWeight:"bold",color:"#1976d2",textDecoration:"underline",cursor:"pointer"},children:"Test Innovation Engine"})]})}}),C.registerSidebarEntry({name:"backtohome",label:"Back to Home",url:"/",icon:"mdi:hexagon",sidebar:"Innovation-engine"}),C.registerSidebarEntry({name:"getting-started",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"Innovation-engine"}),C.registerRoute({path:"/shell-exec",sidebar:{item:"shell-exec",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"shell-exec",exact:!0,component:()=>{const[t,r]=l.default.useState("ie execute "),[u,s]=l.default.useState(""),[c,h]=l.default.useState(""),[v,x]=l.default.useState(!1);l.default.useEffect(()=>{const a=d=>{d.detail&&r(d.detail)};return window.addEventListener("prefill-innovation-engine-command",a),()=>window.removeEventListener("prefill-innovation-engine-command",a)},[]);const f=async()=>{x(!0),s(""),h("");try{const a=await fetch("http://localhost:4000/api/exec",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})}),d=await a.json();a.ok?s(`stdout:
${d.stdout}
stderr:
${d.stderr}
exitCode: ${d.exitCode}`):h(d.error||"Unknown error")}catch(a){h(a.message)}finally{x(!1)}};return e.jsxs(q.SectionBox,{title:"Innovation Engine",textAlign:"center",paddingTop:2,children:[e.jsx(i.default,{children:"Enter an allowlisted shell command (e.g., ie):"}),e.jsx("input",{type:"text",value:t,onChange:a=>r(a.target.value),onKeyDown:a=>{a.key==="Enter"&&!v&&f()},style:{width:"60%",margin:"1em 0",padding:"0.5em"}}),e.jsx("br",{}),e.jsx("button",{onClick:f,disabled:v,style:{padding:"0.5em 1em"},children:v?"Running...":"Execute"}),e.jsx("pre",{style:{textAlign:"left",marginTop:"1em",background:"#f5f5f5",padding:"1em"},children:u}),c&&e.jsxs(i.default,{color:"error",children:["Error: ",c]})]})}}),C.registerSidebarEntry({name:"shell-exec",label:"Innovation Engine",url:"/shell-exec",icon:"mdi:console",sidebar:"Innovation-engine"}),C.registerSidebarEntry({name:"assistant",label:"Assistant",url:"/assistant",icon:"mdi:robot",sidebar:"Innovation-engine"}),C.registerRoute({path:"/assistant",sidebar:{item:"assistant",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"assistant",exact:!0,component:()=>{const[t,r]=l.default.useState(""),[u,s]=l.default.useState([{role:"assistant",content:"Hello! I'm the Innovation Engine Assistant. How can I help you with your Kubernetes or Executable Document needs?"}]),[c,h]=l.default.useState(!1),[v,x]=l.default.useState(""),f=l.default.useRef(null);l.default.useEffect(()=>{f.current&&(f.current.scrollTop=f.current.scrollHeight)},[u]);const a=async()=>{if(!t.trim())return;const d=t;s(g=>[...g,{role:"user",content:d}]),h(!0),r("");try{const g=await fetch("http://localhost:4000/api/assistant",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:u.concat({role:"user",content:d})})});if(!g.ok)throw new Error(`Error: ${g.status} ${g.statusText}`);const b=await g.json();s(E=>[...E,{role:"assistant",content:b.response}])}catch(g){console.error("Error communicating with Azure AI:",g),x(g.message||"Failed to communicate with the assistant service"),s(b=>[...b,{role:"assistant",content:"I'm sorry, I encountered an error while processing your request. Please try again later."}])}finally{h(!1)}};return e.jsxs(q.SectionBox,{title:"Innovation Engine Assistant",textAlign:"left",paddingTop:2,children:[e.jsxs("div",{ref:f,style:{height:"400px",overflowY:"auto",marginBottom:"20px",padding:"10px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[u.map((d,g)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:d.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:d.role==="user"?"#1976d2":"#ffffff",color:d.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:d.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(i.default,{children:d.content})})},g)),c&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(i.default,{color:"textSecondary",children:"Processing your request..."})})]}),e.jsxs("div",{style:{display:"flex",alignItems:"flex-start",gap:"10px"},children:[e.jsx("textarea",{value:t,onChange:d=>r(d.target.value),onKeyDown:d=>{d.key==="Enter"&&!d.shiftKey&&(d.preventDefault(),a())},placeholder:"Enter your question or request here (e.g., 'Create a deployment for my app')",style:{flexGrow:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc",minHeight:"100px",resize:"vertical",fontFamily:"inherit",fontSize:"14px"}}),e.jsx("button",{onClick:a,disabled:c||!t.trim(),style:{padding:"10px 20px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:c||!t.trim()?"not-allowed":"pointer",opacity:c||!t.trim()?.7:1},children:"Send"})]}),e.jsxs("div",{style:{marginTop:"20px",borderTop:"1px solid #e0e0e0",paddingTop:"20px"},children:[e.jsx(i.default,{variant:"h6",children:"Quick Start:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px",marginTop:"10px"},children:["Create a simple deployment","Expose a service","Author an Executable Document","Learn about Kubernetes basics"].map((d,g)=>e.jsx("button",{onClick:()=>r(d),style:{padding:"8px 12px",backgroundColor:"#f1f1f1",border:"1px solid #ddd",borderRadius:"16px",cursor:"pointer"},children:d},g))}),e.jsxs("div",{style:{marginTop:"20px",textAlign:"center",padding:"15px",backgroundColor:"#e8f5e9",borderRadius:"8px"},children:[e.jsx(i.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Try our new Exec Doc Editor!"}),e.jsx(i.default,{variant:"body2",style:{marginBottom:"12px"},children:"The new Executable Document Editor provides a more powerful interface for authoring and editing Exec Docs."}),e.jsx("a",{href:"#/exec-doc-editor",style:{display:"inline-block",padding:"8px 16px",backgroundColor:"#4caf50",color:"white",textDecoration:"none",borderRadius:"4px",fontWeight:"bold"},children:"Open Exec Doc Editor"})]})]})]})}}),C.registerSidebarEntry({name:"overview-generator",label:"Azure Architecture",url:"/overview-generator",icon:"mdi:cloud-outline",sidebar:"Innovation-engine"}),C.registerRoute({path:"/overview-generator",sidebar:{item:"overview-generator",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"overview-generator",exact:!0,component:te})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
