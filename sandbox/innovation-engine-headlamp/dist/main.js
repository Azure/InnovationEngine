(function(e,v){typeof exports=="object"&&typeof module<"u"?v(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material/Typography"),require("react")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material/Typography","react"],v):(e=typeof globalThis<"u"?globalThis:e||self,v(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.MuiMaterial.Typography,e.pluginLib.React))})(this,function(e,v,K,V,_){"use strict";const U=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},d=U(V),a=U(_),Q=({step:t,onStepChange:i,onRunStep:b,currentContext:f,currentNamespace:c})=>{const[p,u]=a.default.useState(!1),[h,s]=a.default.useState(""),[l,g]=a.default.useState(!1),[E,m]=a.default.useState([]),T=()=>{b(t.id)},C=r=>{i({...t,title:r.target.value})},D=r=>{i({...t,description:r.target.value})},O=r=>{i({...t,code:r.target.value})},$=r=>{const y=r.target.checked;i({...t,isCodeBlock:y,code:y&&!t.code?"":t.code})},k=r=>{i({...t,isExpanded:r.target.checked})},P=()=>{i({...t,executed:!1,executionStatus:null,executionOutput:void 0})},w=()=>{h.trim()&&(m(r=>[...r,{role:"user",content:h}]),setTimeout(()=>{m(r=>[...r,{role:"assistant",content:`Here's my suggestion for your request: "${h}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),s("")},1e3))},W=r=>{const y=()=>{i({...t,description:t.description+`

`+r.content}),g(!1)},A=()=>{i({...t,code:(t.code||"")+`

`+r.content,isCodeBlock:!0}),g(!1)},I=r.content.includes("```")||/\b(function|const|let|var|import|export|class|if|for|while)\b/.test(r.content);t.isCodeBlock&&I?A():(t.isCodeBlock,y())},S=()=>{if(!t.executed)return null;let r="",y="";switch(t.executionStatus){case"success":r="#4caf50",y="Success";break;case"failure":r="#f44336",y="Failed";break;case"running":r="#2196f3",y="Running...";break;default:return null}return e.jsx("span",{style:{backgroundColor:r,color:"white",padding:"3px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px"},children:y})},H=()=>{const r="default",y=c;return f!==r?e.jsx("div",{style:{marginTop:"10px",padding:"8px",backgroundColor:"#fff3cd",borderRadius:"4px"},children:e.jsxs(d.default,{variant:"body2",style:{color:"#856404"},children:['⚠️ This step may require the "',r,'" context and "',y,`" namespace, but you're currently in context "`,f,'".']})}):null};return e.jsxs("div",{style:{border:"1px solid #e0e0e0",borderRadius:"8px",marginBottom:"20px",overflow:"hidden"},children:[e.jsxs("div",{style:{padding:"12px 16px",backgroundColor:"#f5f5f5",display:"flex",justifyContent:"space-between",alignItems:"center",borderBottom:"1px solid #ddd"},children:[p?e.jsx("input",{type:"text",value:t.title,onChange:C,style:{fontSize:"18px",fontWeight:"bold",padding:"8px",width:"60%",borderRadius:"4px",border:"1px solid #ddd"},placeholder:"Step title"}):e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsx(d.default,{variant:"h6",style:{margin:0},children:t.title}),S(),t.isCodeBlock&&e.jsxs("span",{style:{backgroundColor:"#e0f7fa",color:"#00838f",padding:"2px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px",display:"flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"⚙️"}),"Executable"]})]}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>u(!p),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:p?"#1976d2":"#f0f0f0",color:p?"white":"black",border:"1px solid "+(p?"#1976d2":"#ddd"),borderRadius:"4px",cursor:"pointer",fontWeight:p?"bold":"normal"},children:p?"Save Changes":"Edit Step"}),e.jsx("button",{onClick:()=>g(!l),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:l?"#9c27b0":"#f0f0f0",color:l?"white":"black",border:"1px solid "+(l?"#9c27b0":"#ddd"),borderRadius:"4px",cursor:"pointer"},children:l?"Hide Help":"Get Help"}),t.isCodeBlock&&e.jsxs("button",{onClick:T,disabled:t.executionStatus==="running","aria-label":`Run step ${t.title}`,style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:t.executionStatus==="running"?"not-allowed":"pointer",opacity:t.executionStatus==="running"?.7:1,display:"inline-flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"▶️"}),t.executionStatus==="running"?"Running...":"Run"]})]})]}),e.jsxs("div",{style:{padding:"16px"},children:[H(),p?e.jsxs("div",{children:[e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"16px",marginBottom:"16px",padding:"12px",backgroundColor:"#f5f5f5",borderRadius:"4px"},children:[e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isCodeBlock,onChange:r=>$(r),style:{marginRight:"8px"}}),e.jsx("span",{children:"Contains executable code"})]}),e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isExpanded,onChange:r=>k(r),style:{marginRight:"8px"}}),e.jsx("span",{children:"Expanded by default"})]}),t.executed&&e.jsx("button",{onClick:P,style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Reset Execution Status"})]}),e.jsx(d.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Description:"}),e.jsx("textarea",{value:t.description,onChange:D,onKeyDown:r=>{r.key==="Enter"&&(r.ctrlKey||r.metaKey)&&(r.preventDefault(),u(!1))},placeholder:"Enter description for this step. Press CTRL+ENTER to save changes.",style:{width:"100%",minHeight:"200px",padding:"8px",marginBottom:"16px",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"}}),t.isCodeBlock&&e.jsxs("div",{children:[e.jsx(d.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Code:"}),e.jsx("textarea",{value:t.code||"",onChange:O,onKeyDown:r=>{r.key==="Enter"&&(r.ctrlKey||r.metaKey)&&(r.preventDefault(),u(!1))},style:{width:"100%",minHeight:"250px",padding:"8px",fontFamily:"monospace",backgroundColor:"#f8f8f8",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"},placeholder:"Enter executable code here. Press CTRL+ENTER to save changes."}),e.jsx(d.default,{variant:"caption",color:"textSecondary",style:{display:"block",marginTop:"4px"},children:"This code will be executed when the user runs this step."})]})]}):e.jsxs("div",{children:[e.jsx(d.default,{variant:"body1",style:{whiteSpace:"pre-wrap",marginBottom:"16px"},children:t.description}),t.isCodeBlock&&t.code&&e.jsx("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginBottom:"16px",overflowX:"auto"},children:e.jsx("pre",{style:{margin:0,fontFamily:"monospace"},children:t.code})})]}),t.executed&&t.executionOutput&&e.jsxs("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginTop:"16px",border:"1px solid #ddd"},children:[e.jsx(d.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Output:"}),e.jsx("pre",{style:{margin:0,fontFamily:"monospace",whiteSpace:"pre-wrap"},children:t.executionOutput})]})]}),l&&e.jsxs("div",{style:{padding:"16px",borderTop:"1px solid #e0e0e0"},children:[e.jsx(d.default,{variant:"h6",style:{marginBottom:"12px"},children:"Copilot Assistance"}),e.jsx("div",{style:{maxHeight:"200px",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:E.map((r,y)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:r.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:r.role==="user"?"#1976d2":"#ffffff",color:r.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:r.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(d.default,{children:r.content}),r.role==="assistant"&&e.jsxs("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:[e.jsx("button",{onClick:()=>W(r),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"}),t.isCodeBlock&&e.jsxs("div",{style:{display:"flex",gap:"4px"},children:[e.jsx("button",{onClick:()=>{i({...t,description:t.description+`

`+r.content}),g(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px 0 0 4px",cursor:"pointer",fontSize:"12px"},children:"Apply to Description"}),e.jsx("button",{onClick:()=>{i({...t,code:(t.code||"")+`

`+r.content}),g(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"0 4px 4px 0",cursor:"pointer",fontSize:"12px"},children:"Apply to Code"})]})]})]})},y))}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("textarea",{value:h,onChange:r=>s(r.target.value),onKeyDown:r=>{r.key==="Enter"&&(r.ctrlKey||r.metaKey)&&h.trim()&&(r.preventDefault(),w())},placeholder:"Ask for help with this step (e.g., 'Help me improve the code for this step'). Press CTRL+ENTER to submit.",style:{flexGrow:1,padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"150px",fontSize:"14px",lineHeight:"1.5"}}),e.jsx("button",{onClick:w,disabled:!h.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:h.trim()?"pointer":"not-allowed",opacity:h.trim()?1:.7},children:"Ask Copilot"})]})]})]})},X=({initialOverview:t="",onSaveOverview:i,onGenerateSteps:b,authoringPhase:f="create-overview"})=>{const[c,p]=a.default.useState(""),[u,h]=a.default.useState(t),[s,l]=a.default.useState(!1),[g,E]=a.default.useState([]),[m,T]=a.default.useState(!1),[C,D]=a.default.useState("prompt"),[O,$]=a.default.useState(!1),[k,P]=a.default.useState([]),[w,W]=a.default.useState(""),[S,H]=a.default.useState(70),[r,y]=a.default.useState(!1),A=a.default.useRef(null);a.default.useEffect(()=>{const o=()=>{A.current&&(A.current.style.display="grid")};return window.addEventListener("resize",o),o(),()=>{window.removeEventListener("resize",o)}},[]);const I=()=>{c.trim()&&(E(o=>[...o,{role:"user",content:c}]),T(!0),setTimeout(()=>{const o=`
# ${c}

## Overview

This is an Executable Document that will guide you through the process of ${c.toLowerCase()}. 
Follow the steps below to complete this task in your Kubernetes environment.

## Prerequisites

- Kubernetes cluster
- kubectl configured to access your cluster
- Necessary permissions to deploy resources

## Expected Outcome

Successfully ${c.toLowerCase()} in your Kubernetes cluster.
      `.trim();h(o),E(n=>[...n,{role:"assistant",content:`I've generated an overview for "${c}". You can edit it directly or ask me to make changes.`}]),p(""),T(!1),D("preview")},1e3))},N=()=>{i(u),b()},q=()=>{w.trim()&&(P(o=>[...o,{role:"user",content:w}]),setTimeout(()=>{P(o=>[...o,{role:"assistant",content:`Here are my thoughts about your overview based on your request: "${w}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),W("")},1e3))},F=o=>{if(o.role==="assistant"){let n=o.content;n=n.replace(/Here are my thoughts about your overview based on your request: "[^"]*"\. /,""),n=n.replace("This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.",""),h(x=>{const L=x.trim()?`

`:"";return x.trim()+L+n.trim()}),s||l(!0)}},M=o=>{o.preventDefault(),y(!0);const n=L=>{const G=document.getElementById("overview-authoring-container");if(G){const B=G.getBoundingClientRect(),Y=(L.clientX-B.left)/B.width*100;Y>30&&Y<70&&H(Y)}},x=()=>{y(!1),document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",x)};document.addEventListener("mousemove",n),document.addEventListener("mouseup",x)},z=()=>{$(o=>!o)},j=()=>{switch(f){case"create-overview":return"Generate Steps";default:return"Generate Steps"}};return e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsx(d.default,{variant:"h5",style:{marginBottom:"16px"},children:"Create & Edit Document Overview"}),e.jsx("div",{style:{padding:"8px 12px",backgroundColor:"#f0f9ff",borderLeft:"4px solid #1976d2",marginBottom:"16px"},children:e.jsx(d.default,{variant:"body2",children:f==="create-overview"?"Step 1: Create an overview that describes what this document will accomplish.":"Step 2: Refine your overview to ensure it accurately describes the intended workflow."})}),e.jsxs("div",{style:{display:"flex",marginBottom:"16px"},children:[e.jsx("button",{onClick:()=>D("prompt"),style:{flex:1,padding:"8px",backgroundColor:C==="prompt"?"#1976d2":"#f1f1f1",color:C==="prompt"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:C==="prompt"?"bold":"normal"},children:"Prompt & Conversation"}),e.jsx("button",{onClick:()=>D("preview"),style:{flex:1,padding:"8px",backgroundColor:C==="preview"?"#1976d2":"#f1f1f1",color:C==="preview"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:C==="preview"?"bold":"normal"},children:"Preview & Edit"})]}),e.jsxs("div",{id:"overview-authoring-container",ref:A,style:{flex:1,display:"grid",gridTemplateColumns:`${S}% 6px calc(${100-S-.6}%)`,gridTemplateRows:"1fr",overflow:"hidden",position:"relative",minHeight:"600px"},children:[e.jsx("div",{style:{height:"100%",display:"flex",flexDirection:"column",overflow:"hidden"},children:C==="prompt"?e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsxs("div",{style:{marginBottom:"16px"},children:[e.jsx(d.default,{variant:"subtitle1",children:"What kind of Executable Document do you want to create?"}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",gap:"8px"},children:[e.jsx("input",{type:"text",value:c,onChange:o=>p(o.target.value),onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&c.trim()&&I()},placeholder:"E.g., Create a deployment for a Node.js application",style:{flex:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc"}}),e.jsx("button",{onClick:I,disabled:m||!c.trim(),style:{padding:"10px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:m||!c.trim()?"not-allowed":"pointer",opacity:m||!c.trim()?.7:1},children:m?"Generating...":"Generate"})]})]}),e.jsxs("div",{style:{flex:1,overflowY:"auto",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#f9f9f9"},children:[g.length===0&&e.jsx(d.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Enter a prompt above to start generating your Executable Document"}),g.map((o,n)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:o.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:o.role==="user"?"#1976d2":"#ffffff",color:o.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:o.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(d.default,{children:o.content})})},n)),m&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(d.default,{color:"textSecondary",children:"Generating overview..."})})]})]}):e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsxs("div",{style:{marginBottom:"16px",display:"flex",justifyContent:"space-between"},children:[e.jsx(d.default,{variant:"subtitle1",children:s?"Edit Overview":"Preview Overview"}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>l(!s),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:s?"Preview":"Edit"}),e.jsx("button",{onClick:N,disabled:!u.trim(),style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:u.trim()?"pointer":"not-allowed",opacity:u.trim()?1:.7},children:j()})]})]}),e.jsx("div",{style:{flex:1,display:"flex",flexDirection:"column",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#ffffff",overflowY:"auto"},children:s?e.jsx("textarea",{value:u,onChange:o=>h(o.target.value),onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&u.trim()&&(o.preventDefault(),l(!1))},placeholder:"Enter your document overview content. Press CTRL+ENTER to save changes.",style:{width:"100%",height:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",fontFamily:"monospace",fontSize:"14px",lineHeight:"1.5",resize:"none"}}):e.jsx("div",{style:{padding:"16px",flex:1,maxWidth:"800px",margin:"0 auto",fontFamily:"system-ui, -apple-system, sans-serif",lineHeight:1.6,overflow:"auto"},children:u.split(`
`).map((o,n)=>o.startsWith("# ")?e.jsx(d.default,{variant:"h4",style:{marginBottom:"16px"},children:o.substring(2)},n):o.startsWith("## ")?e.jsx(d.default,{variant:"h5",style:{marginTop:"24px",marginBottom:"12px"},children:o.substring(3)},n):o.startsWith("- ")?e.jsx(d.default,{component:"li",style:{marginLeft:"20px",marginBottom:"8px"},children:o.substring(2)},n):o===""?e.jsx("br",{},n):e.jsx(d.default,{paragraph:!0,children:o},n))})})]})}),e.jsx("div",{role:"separator","aria-orientation":"vertical","aria-label":"Resize panels",style:{width:"6px",height:"100%",background:"#e0e0e0",cursor:"col-resize",userSelect:"none",transition:r?"none":"background 0.2s",position:"relative"},onMouseDown:M,onKeyDown:o=>{if(o.key==="ArrowLeft"||o.key==="ArrowRight"){o.preventDefault();const n=o.key==="ArrowLeft"?-2:2,x=S+n;x>30&&x<70&&H(x)}},onFocus:o=>{o.currentTarget.style.background="#1976d2",o.currentTarget.style.outline="2px solid #1976d2"},onBlur:o=>{o.currentTarget.style.background="#e0e0e0",o.currentTarget.style.outline="none"},children:e.jsx("div",{style:{position:"absolute",left:"50%",top:"50%",transform:"translate(-50%, -50%)",height:"30px",width:"4px",background:r?"#1976d2":"#aaa",borderRadius:"2px"}})}),e.jsxs("div",{style:{height:"100%",display:O?"none":"flex",flexDirection:"column",overflow:"hidden",padding:"8px",backgroundColor:"#fafafa",borderLeft:"1px solid #e0e0e0"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",marginBottom:"12px"},children:[e.jsx(d.default,{variant:"h6",children:"Copilot Assistance"}),e.jsx("button",{onClick:z,"aria-label":"Collapse Copilot assistance panel",title:"Collapse Copilot assistance panel",style:{padding:"3px 6px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",fontSize:"12px",cursor:"pointer"},children:"Collapse"})]}),e.jsxs("div",{style:{flex:1,display:"flex",flexDirection:"column",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[k.length===0&&e.jsx(d.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Ask Copilot for help with improving your overview"}),k.map((o,n)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:o.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:o.role==="user"?"#1976d2":"#ffffff",color:o.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:o.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(d.default,{children:o.content}),o.role==="assistant"&&e.jsx("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:e.jsx("button",{onClick:()=>F(o),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"})})]})},n))]}),e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"8px"},children:[e.jsx("textarea",{value:w,onChange:o=>W(o.target.value),onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&w.trim()&&(o.preventDefault(),q())},placeholder:"Ask Copilot for help with your overview (e.g., 'Could you suggest a better structure for this overview?'). Press CTRL+ENTER to submit.",style:{width:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"100px",fontSize:"14px",lineHeight:"1.5",fontFamily:"monospace"}}),e.jsx("button",{onClick:q,disabled:!w.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:w.trim()?"pointer":"not-allowed",opacity:w.trim()?1:.7},children:"Ask Copilot"})]})]}),O&&e.jsx("div",{style:{position:"absolute",right:"0",top:"50%",transform:"translateY(-50%)",zIndex:1},children:e.jsx("button",{onClick:z,"aria-label":"Open Copilot assistance panel",title:"Open Copilot assistance panel",style:{padding:"8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",boxShadow:"-2px 0 4px rgba(0,0,0,0.1)"},children:"≪ Open Copilot"})})]})]})},J=({execDoc:t,onSave:i,onLoad:b,onExport:f,autoSaveEnabled:c,onToggleAutoSave:p,autoSaveInterval:u,onChangeAutoSaveInterval:h,recentFiles:s,onOpenRecentFile:l})=>{const g=()=>{t&&i(t)},E=m=>{h(parseInt(m.target.value,10))};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(d.default,{variant:"h6",style:{marginBottom:"12px"},children:"File Operations"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px"},children:[e.jsx("button",{onClick:g,disabled:!t,style:{padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Save to Disk"}),e.jsx("button",{onClick:b,style:{padding:"8px 16px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Load from Disk"}),e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsxs("label",{style:{marginRight:"8px",display:"flex",alignItems:"center"},children:[e.jsx("input",{type:"checkbox",checked:c,onChange:p,style:{marginRight:"4px"}}),"Auto-save"]}),c&&e.jsxs("select",{value:u,onChange:E,style:{padding:"6px",borderRadius:"4px",border:"1px solid #ddd"},children:[e.jsx("option",{value:30,children:"Every 30 seconds"}),e.jsx("option",{value:60,children:"Every minute"}),e.jsx("option",{value:300,children:"Every 5 minutes"}),e.jsx("option",{value:600,children:"Every 10 minutes"})]})]})]}),e.jsxs("div",{style:{marginTop:"12px"},children:[e.jsx(d.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Save as:"}),e.jsx("div",{style:{display:"flex",gap:"8px"},children:e.jsx("button",{onClick:()=>f("markdown"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Markdown"})})]}),s.length>0&&e.jsxs("div",{style:{marginTop:"16px"},children:[e.jsx(d.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Recent Files:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"8px"},children:s.map((m,T)=>e.jsx("button",{onClick:()=>l(m),style:{padding:"6px 12px",backgroundColor:"#f5f5f5",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer",textOverflow:"ellipsis",overflow:"hidden",maxWidth:"200px",whiteSpace:"nowrap"},children:m.split("/").pop()},T))})]})]})},Z=({contexts:t,currentContext:i,onChangeContext:b,namespaces:f,currentNamespace:c,onChangeNamespace:p,isAdmin:u})=>{const h=l=>{b(l.target.value)},s=l=>{p(l.target.value)};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(d.default,{variant:"h6",style:{marginBottom:"12px"},children:"Kubernetes Context"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px"},children:[e.jsxs("div",{children:[e.jsx("label",{htmlFor:"context-selector",style:{display:"block",marginBottom:"6px"},children:"Context:"}),e.jsx("select",{id:"context-selector",value:i,onChange:h,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:t.map(l=>e.jsxs("option",{value:l,children:[l," ",l===i?"(current)":""]},l))})]}),e.jsxs("div",{children:[e.jsx("label",{htmlFor:"namespace-selector",style:{display:"block",marginBottom:"6px"},children:"Namespace:"}),e.jsx("select",{id:"namespace-selector",value:c,onChange:s,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:f.map(l=>e.jsxs("option",{value:l,children:[l," ",l===c?"(current)":""]},l))})]}),e.jsx("div",{style:{display:"flex",alignItems:"center",marginLeft:"auto"},children:e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"8px",padding:"8px 12px",backgroundColor:"#f5f5f5",borderRadius:"4px",border:"1px solid #e0e0e0"},children:[e.jsx("span",{style:{width:"10px",height:"10px",borderRadius:"50%",backgroundColor:u?"#4caf50":"#ff9800",display:"inline-block"}}),e.jsx(d.default,{variant:"body2",children:u?"Admin Access":"Standard Access"})]})})]})]})},R=({initialDoc:t=null})=>{const[i,b]=a.default.useState(t),[f,c]=a.default.useState(t?"steps":"overview"),[p,u]=a.default.useState(t?"refine-content":"create-overview"),h=()=>{u("implement-content"),c("steps")},s=()=>{u("refine-content"),c("steps")},l=()=>{switch(p){case"create-overview":return"Phase 1: Create & Edit Overview";case"implement-content":return"Phase 2: Implement Content";case"refine-content":return"Phase 3: Refine Content";default:return"Document Authoring"}},[g,E]=a.default.useState([]),[m,T]=a.default.useState(!1),[C,D]=a.default.useState(60),[O,$]=a.default.useState(["default","minikube","docker-desktop"]),[k,P]=a.default.useState("default"),[w,W]=a.default.useState(["default","kube-system","kube-public"]),[S,H]=a.default.useState("default"),[r,y]=a.default.useState(!1),A=n=>{b(i?{...i,overview:n,updatedAt:new Date}:{id:`doc-${Date.now()}`,title:n.split(`
`)[0].replace(/^# /,"")||"Untitled Document",overview:n,steps:[],createdAt:new Date,updatedAt:new Date,kubeContext:k,kubeNamespace:S})},I=()=>{if(!i)return;const n=[{id:`step-${Date.now()}-1`,title:"Setup Environment",description:"Ensure you have the required tools and permissions to proceed.",isExpanded:!0,isCodeBlock:!1},{id:`step-${Date.now()}-2`,title:"Create Configuration",description:"Create the necessary configuration files for your deployment.",isExpanded:!0,isCodeBlock:!0,code:`apiVersion: v1
kind: ConfigMap
metadata:
  name: example-config
data:
  config.json: |
    {
      "key": "value"
    }`},{id:`step-${Date.now()}-3`,title:"Deploy Application",description:"Deploy the application to your Kubernetes cluster.",isExpanded:!0,isCodeBlock:!0,code:"kubectl apply -f deployment.yaml"},{id:`step-${Date.now()}-4`,title:"Verify Deployment",description:"Verify that the deployment was successful.",isExpanded:!0,isCodeBlock:!0,code:`kubectl get pods
kubectl get services`}];b({...i,steps:n,updatedAt:new Date}),h()},N=n=>{i&&(b({...i,steps:i.steps.map(x=>x.id===n.id?n:x),updatedAt:new Date}),p==="implement-content"&&s())},q=n=>{i&&(b({...i,steps:i.steps.map(x=>x.id===n?{...x,executed:!0,executionStatus:"running",executionOutput:"Running command..."}:x)}),setTimeout(()=>{const x=i.steps.find(B=>B.id===n);if(!x)return;const L=Math.random()>.2,G=L?`Command executed successfully.
${x.code?`> ${x.code}
`:""}Output: Operation completed.`:`Error executing command.
${x.code?`> ${x.code}
`:""}Error: Could not complete the operation in context "${k}".`;b({...i,steps:i.steps.map(B=>B.id===n?{...B,executed:!0,executionStatus:L?"success":"failure",executionOutput:G}:B)})},1500))},F=n=>{alert(`Doc would be saved as: ${n.title}.md`),g.includes(`/home/user/documents/${n.title}.md`)||E([`/home/user/documents/${n.title}.md`,...g.slice(0,4)])},M=()=>{alert("In a full implementation, a file picker would open here.")},z=n=>{i&&alert(`Doc would be saved as: ${i.title}.${n}`)},j=()=>e.jsx(X,{initialOverview:(i==null?void 0:i.overview)||"",onSaveOverview:A,onGenerateSteps:I,authoringPhase:p}),o=()=>i?e.jsxs("div",{children:[e.jsx(d.default,{variant:"h4",style:{marginBottom:"24px"},children:i.title}),e.jsxs("div",{style:{marginBottom:"24px"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",paddingBottom:"8px",borderBottom:"1px solid #e0e0e0",marginBottom:"12px"},children:[e.jsx(d.default,{variant:"h6",children:"Overview"}),e.jsx("button",{onClick:()=>c("overview"),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Edit Overview"})]}),e.jsx("div",{style:{padding:"16px",backgroundColor:"#f9f9f9",borderRadius:"4px",marginBottom:"24px",maxHeight:"200px",overflowY:"auto"},children:i.overview.split(`
`).map((n,x)=>n.startsWith("# ")?null:n.startsWith("## ")?e.jsx(d.default,{variant:"h6",style:{marginTop:"16px",marginBottom:"8px"},children:n.substring(3)},x):n.startsWith("- ")?e.jsx(d.default,{component:"li",style:{marginLeft:"20px",marginBottom:"4px"},children:n.substring(2)},x):n===""?e.jsx("br",{},x):e.jsx(d.default,{paragraph:!0,children:n},x))})]}),e.jsx(d.default,{variant:"h6",style:{marginBottom:"16px"},children:"Steps"}),i.steps.length===0?e.jsx(d.default,{color:"textSecondary",children:"No steps defined yet."}):i.steps.map(n=>e.jsx(Q,{step:n,onStepChange:N,onRunStep:q,currentContext:k,currentNamespace:S},n.id))]}):e.jsx("div",{style:{textAlign:"center",padding:"40px"},children:e.jsx(d.default,{children:"No document loaded. Create a new one first."})});return e.jsxs("div",{style:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs("div",{style:{padding:"16px"},children:[e.jsxs("div",{style:{marginBottom:"16px",padding:"8px 12px",backgroundColor:"#e3f2fd",borderRadius:"4px",border:"1px solid #bbdefb"},children:[e.jsx(d.default,{variant:"subtitle1",style:{fontWeight:"bold"},children:l()}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",justifyContent:"space-between",flexWrap:"wrap"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:p==="create-overview"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(d.default,{variant:"body2",children:"Create Overview"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:p==="implement-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(d.default,{variant:"body2",children:"Implement Content"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:p==="refine-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(d.default,{variant:"body2",children:"Refine Content"})]})]})]}),e.jsx(Z,{contexts:O,currentContext:k,onChangeContext:P,namespaces:w,currentNamespace:S,onChangeNamespace:H,isAdmin:r}),f==="steps"&&e.jsx(J,{execDoc:i,onSave:F,onLoad:M,onExport:z,autoSaveEnabled:m,onToggleAutoSave:()=>T(n=>!n),autoSaveInterval:C,onChangeAutoSaveInterval:D,recentFiles:g,onOpenRecentFile:n=>alert(`Would open: ${n}`)}),i&&e.jsx("div",{style:{marginBottom:"16px"},children:e.jsxs("div",{style:{display:"flex"},children:[e.jsx("button",{onClick:()=>c("overview"),style:{flex:1,padding:"8px",backgroundColor:f==="overview"?"#1976d2":"#f1f1f1",color:f==="overview"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:f==="overview"?"bold":"normal"},children:"Document Overview"}),e.jsx("button",{onClick:()=>c("steps"),style:{flex:1,padding:"8px",backgroundColor:f==="steps"?"#1976d2":"#f1f1f1",color:f==="steps"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:f==="steps"?"bold":"normal"},children:"Document Steps"})]})})]}),e.jsx("div",{style:{flex:1,padding:"0 16px 16px",overflowY:"auto"},children:f==="overview"?j():o()})]})};v.registerRoute({path:"/exec-doc-editor",sidebar:{item:"exec-doc-editor",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"exec-doc-editor",exact:!0,component:()=>e.jsx(K.SectionBox,{title:"Executable Document Editor",textAlign:"left",paddingTop:2,children:e.jsx(R,{})})}),v.registerSidebarEntry({name:"exec-doc-editor",label:"Exec Doc Editor",url:"/exec-doc-editor",icon:"mdi:file-document-edit",sidebar:"Innovation-engine"}),v.registerSidebarEntry({name:"architect",label:"Architect",url:"/exec-doc-editor",icon:"mdi:code-braces-box",sidebar:"Innovation-engine"}),v.registerSidebarEntry({name:"mypluginsidebar",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"HOME"}),v.registerRoute({path:"/getting-started",sidebar:{item:"getting-started",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"getting-started",exact:!0,component:()=>{const t=()=>{window.location.hash="#/shell-exec",setTimeout(()=>{window.dispatchEvent(new CustomEvent("prefill-innovation-engine-command",{detail:"ie execute ../../../scenarios/testing/variableHierarchy.md"}))},100)};return e.jsxs(K.SectionBox,{title:"Getting Started",textAlign:"center",paddingTop:2,children:[e.jsx(d.default,{children:"This is where Innovation Engine lives"}),e.jsx("br",{}),e.jsx("a",{href:"#",onClick:i=>{i.preventDefault(),t()},style:{fontWeight:"bold",color:"#1976d2",textDecoration:"underline",cursor:"pointer"},children:"Test Innovation Engine"})]})}}),v.registerSidebarEntry({name:"backtohome",label:"Back to Home",url:"/",icon:"mdi:hexagon",sidebar:"Innovation-engine"}),v.registerSidebarEntry({name:"getting-started",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"Innovation-engine"}),v.registerRoute({path:"/shell-exec",sidebar:{item:"shell-exec",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"shell-exec",exact:!0,component:()=>{const[t,i]=a.default.useState("ie execute "),[b,f]=a.default.useState(""),[c,p]=a.default.useState(""),[u,h]=a.default.useState(!1);a.default.useEffect(()=>{const l=g=>{g.detail&&i(g.detail)};return window.addEventListener("prefill-innovation-engine-command",l),()=>window.removeEventListener("prefill-innovation-engine-command",l)},[]);const s=async()=>{h(!0),f(""),p("");try{const l=await fetch("http://localhost:4000/api/exec",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})}),g=await l.json();l.ok?f(`stdout:
${g.stdout}
stderr:
${g.stderr}
exitCode: ${g.exitCode}`):p(g.error||"Unknown error")}catch(l){p(l.message)}finally{h(!1)}};return e.jsxs(K.SectionBox,{title:"Innovation Engine",textAlign:"center",paddingTop:2,children:[e.jsx(d.default,{children:"Enter an allowlisted shell command (e.g., ie):"}),e.jsx("input",{type:"text",value:t,onChange:l=>i(l.target.value),onKeyDown:l=>{l.key==="Enter"&&!u&&s()},style:{width:"60%",margin:"1em 0",padding:"0.5em"}}),e.jsx("br",{}),e.jsx("button",{onClick:s,disabled:u,style:{padding:"0.5em 1em"},children:u?"Running...":"Execute"}),e.jsx("pre",{style:{textAlign:"left",marginTop:"1em",background:"#f5f5f5",padding:"1em"},children:b}),c&&e.jsxs(d.default,{color:"error",children:["Error: ",c]})]})}}),v.registerSidebarEntry({name:"shell-exec",label:"Innovation Engine",url:"/shell-exec",icon:"mdi:console",sidebar:"Innovation-engine"}),v.registerSidebarEntry({name:"assistant",label:"Assistant",url:"/assistant",icon:"mdi:robot",sidebar:"Innovation-engine"}),v.registerRoute({path:"/assistant",sidebar:{item:"assistant",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"assistant",exact:!0,component:()=>{const[t,i]=a.default.useState(""),[b,f]=a.default.useState([{role:"assistant",content:"Hello! I'm the Innovation Engine Assistant. How can I help you with your Kubernetes or Executable Document needs?"}]),[c,p]=a.default.useState(!1),u=a.default.useRef(null);a.default.useEffect(()=>{u.current&&(u.current.scrollTop=u.current.scrollHeight)},[b]);const h=()=>{t.trim()&&(f(s=>[...s,{role:"user",content:t}]),p(!0),setTimeout(()=>{f(s=>[...s,{role:"assistant",content:`I received your request: "${t}". This is a placeholder response. In the full implementation, this would be processed by GitHub Copilot.`}]),i(""),p(!1)},1e3))};return e.jsxs(K.SectionBox,{title:"Innovation Engine Assistant",textAlign:"left",paddingTop:2,children:[e.jsxs("div",{ref:u,style:{height:"400px",overflowY:"auto",marginBottom:"20px",padding:"10px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[b.map((s,l)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:s.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:s.role==="user"?"#1976d2":"#ffffff",color:s.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:s.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(d.default,{children:s.content})})},l)),c&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(d.default,{color:"textSecondary",children:"Processing your request..."})})]}),e.jsxs("div",{style:{display:"flex",alignItems:"flex-start",gap:"10px"},children:[e.jsx("textarea",{value:t,onChange:s=>i(s.target.value),onKeyDown:s=>{s.key==="Enter"&&!s.shiftKey&&(s.preventDefault(),h())},placeholder:"Enter your question or request here (e.g., 'Create a deployment for my app')",style:{flexGrow:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc",minHeight:"100px",resize:"vertical",fontFamily:"inherit",fontSize:"14px"}}),e.jsx("button",{onClick:h,disabled:c||!t.trim(),style:{padding:"10px 20px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:c||!t.trim()?"not-allowed":"pointer",opacity:c||!t.trim()?.7:1},children:"Send"})]}),e.jsxs("div",{style:{marginTop:"20px",borderTop:"1px solid #e0e0e0",paddingTop:"20px"},children:[e.jsx(d.default,{variant:"h6",children:"Quick Start:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px",marginTop:"10px"},children:["Create a simple deployment","Expose a service","Author an Executable Document","Learn about Kubernetes basics"].map((s,l)=>e.jsx("button",{onClick:()=>i(s),style:{padding:"8px 12px",backgroundColor:"#f1f1f1",border:"1px solid #ddd",borderRadius:"16px",cursor:"pointer"},children:s},l))}),e.jsxs("div",{style:{marginTop:"20px",textAlign:"center",padding:"15px",backgroundColor:"#e8f5e9",borderRadius:"8px"},children:[e.jsx(d.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Try our new Exec Doc Editor!"}),e.jsx(d.default,{variant:"body2",style:{marginBottom:"12px"},children:"The new Executable Document Editor provides a more powerful interface for authoring and editing Exec Docs."}),e.jsx("a",{href:"#/exec-doc-editor",style:{display:"inline-block",padding:"8px 16px",backgroundColor:"#4caf50",color:"white",textDecoration:"none",borderRadius:"4px",fontWeight:"bold"},children:"Open Exec Doc Editor"})]})]})]})}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
