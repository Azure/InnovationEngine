import React from 'react';
import Typography from '@mui/material/Typography';
import { ExecDoc, ExecDocStep, Message } from './ExecDocTypes';

interface ExecDocStepEditorProps {
  step: ExecDocStep;
  onStepChange: (updatedStep: ExecDocStep) => void;
  onRunStep: (stepId: string) => void;
  currentContext: string;
  currentNamespace: string;
  authoringPhase?: 'create-overview' | 'refine-overview' | 'implement-content' | 'refine-content';
}

export const ExecDocStepEditor: React.FC<ExecDocStepEditorProps> = ({
  step,
  onStepChange,
  onRunStep,
  currentContext,
  currentNamespace,
  authoringPhase = 'refine-content'
}) => {
  const [isEditing, setIsEditing] = React.useState(false);
  const [assistancePrompt, setAssistancePrompt] = React.useState('');
  const [showAssistantPanel, setShowAssistantPanel] = React.useState(false);
  const [assistantMessages, setAssistantMessages] = React.useState<Message[]>([]);
  
  // Get phase-specific guidance text
  const getPhaseGuidance = () => {
    switch (authoringPhase) {
      case 'implement-content':
        return 'Step 3: Implement executable content based on the approved overview.';
      case 'refine-content':
        return 'Step 4: Refine the content to ensure it works correctly and is easy to follow.';
      default:
        return '';
    }
  };
  
  const handleRunStep = () => {
    onRunStep(step.id);
  };

  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onStepChange({
      ...step,
      title: e.target.value
    });
  };

  const handleDescriptionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onStepChange({
      ...step,
      description: e.target.value
    });
  };

  const handleCodeChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onStepChange({
      ...step,
      code: e.target.value
    });
  };

  const handleGetAssistance = () => {
    if (!assistancePrompt.trim()) return;

    // Add user message
    setAssistantMessages(prev => [
      ...prev,
      { role: 'user', content: assistancePrompt }
    ]);

    // Simulate Copilot response
    setTimeout(() => {
      setAssistantMessages(prev => [
        ...prev,
        { 
          role: 'assistant', 
          content: `Here's my suggestion for your request: "${assistancePrompt}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`
        }
      ]);
      setAssistancePrompt('');
    }, 1000);
  };

  const handleApplySuggestion = (message: Message) => {
    // In a real implementation, this would intelligently apply the suggestion
    // to the step content. For now, we'll just append it to the description.
    onStepChange({
      ...step,
      description: step.description + '\n\n' + message.content
    });
    setShowAssistantPanel(false);
  };

  // Render styles based on execution status
  const renderStatusBadge = () => {
    if (!step.executed) return null;
    
    let color = '';
    let text = '';
    
    switch(step.executionStatus) {
      case 'success':
        color = '#4caf50';
        text = 'Success';
        break;
      case 'failure':
        color = '#f44336';
        text = 'Failed';
        break;
      case 'running':
        color = '#2196f3';
        text = 'Running...';
        break;
      default:
        return null;
    }
    
    return (
      <span style={{
        backgroundColor: color,
        color: 'white',
        padding: '3px 8px',
        borderRadius: '12px',
        fontSize: '12px',
        marginLeft: '10px'
      }}>
        {text}
      </span>
    );
  };

  // Context warning if necessary
  const renderContextWarning = () => {
    // This is just a placeholder. In a real implementation, 
    // we'd compare the step's required context with the current context
    const stepRequiresContext = 'default';
    
    if (currentContext !== stepRequiresContext) {
      return (
        <div style={{ marginTop: '10px', padding: '8px', backgroundColor: '#fff3cd', borderRadius: '4px' }}>
          <Typography variant="body2" style={{ color: '#856404' }}>
            ⚠️ This step may require the "{stepRequiresContext}" context, but you're currently in "{currentContext}".
          </Typography>
        </div>
      );
    }
    return null;
  };

  return (
    <div
      style={{
        border: '1px solid #e0e0e0',
        borderRadius: '8px',
        marginBottom: '20px',
        overflow: 'hidden',
      }}
    >
      {/* Step Header */}
      <div
        style={{
          padding: '12px 16px',
          backgroundColor: '#f5f5f5',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        {isEditing ? (
          <input
            type="text"
            value={step.title}
            onChange={handleTitleChange}
            style={{
              fontSize: '18px',
              fontWeight: 'bold',
              padding: '4px',
              width: '60%',
            }}
          />
        ) : (
          <Typography variant="h6" style={{ margin: 0 }}>
            {step.title} {renderStatusBadge()}
          </Typography>
        )}

        <div>
          <button
            onClick={() => setIsEditing(!isEditing)}
            style={{
              marginRight: '8px',
              padding: '6px 12px',
              backgroundColor: '#f0f0f0',
              border: '1px solid #ddd',
              borderRadius: '4px',
              cursor: 'pointer',
            }}
          >
            {isEditing ? 'Done' : 'Edit'}
          </button>
          <button
            onClick={() => setShowAssistantPanel(!showAssistantPanel)}
            style={{
              marginRight: '8px',
              padding: '6px 12px',
              backgroundColor: '#f0f0f0',
              border: '1px solid #ddd',
              borderRadius: '4px',
              cursor: 'pointer',
            }}
          >
            Get Help
          </button>
          <button
            onClick={handleRunStep}
            disabled={step.executionStatus === 'running'}
            aria-label={`Run step ${step.title}`}
            style={{
              padding: '6px 12px',
              backgroundColor: '#4caf50',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: step.executionStatus === 'running' ? 'not-allowed' : 'pointer',
              opacity: step.executionStatus === 'running' ? 0.7 : 1,
            }}
          >
            {step.executionStatus === 'running' ? 'Running...' : 'Run'}
          </button>
        </div>
      </div>

      {/* Step Content */}
      <div style={{ padding: '16px' }}>
        {/* Phase guidance - only show for active phases */}
        {(authoringPhase === 'implement-content' || authoringPhase === 'refine-content') && (
          <div style={{ 
            marginBottom: '16px',
            padding: '8px 12px', 
            backgroundColor: '#f0f9ff', 
            borderLeft: '4px solid #1976d2',
          }}>
            <Typography variant="body2">{getPhaseGuidance()}</Typography>
          </div>
        )}
      
        {renderContextWarning()}
        
        {isEditing ? (
          <div>
            <Typography variant="subtitle1" style={{ marginBottom: '8px' }}>Description:</Typography>
            <textarea
              value={step.description}
              onChange={handleDescriptionChange}
              style={{
                width: '100%',
                minHeight: '100px',
                padding: '8px',
                marginBottom: '16px',
                borderRadius: '4px',
                border: '1px solid #ddd',
              }}
            />

            {step.isCodeBlock && (
              <div>
                <Typography variant="subtitle1" style={{ marginBottom: '8px' }}>Code:</Typography>
                <textarea
                  value={step.code || ''}
                  onChange={handleCodeChange}
                  style={{
                    width: '100%',
                    minHeight: '120px',
                    padding: '8px',
                    fontFamily: 'monospace',
                    backgroundColor: '#f8f8f8',
                    borderRadius: '4px',
                    border: '1px solid #ddd',
                  }}
                />
              </div>
            )}
          </div>
        ) : (
          <div>
            <Typography variant="body1" style={{ whiteSpace: 'pre-wrap', marginBottom: '16px' }}>
              {step.description}
            </Typography>

            {step.isCodeBlock && step.code && (
              <div
                style={{
                  backgroundColor: '#f8f8f8',
                  padding: '12px',
                  borderRadius: '4px',
                  marginBottom: '16px',
                  overflowX: 'auto',
                }}
              >
                <pre style={{ margin: 0, fontFamily: 'monospace' }}>{step.code}</pre>
              </div>
            )}
          </div>
        )}

        {/* Execution Output */}
        {step.executed && step.executionOutput && (
          <div
            style={{
              backgroundColor: '#f8f8f8',
              padding: '12px',
              borderRadius: '4px',
              marginTop: '16px',
              border: '1px solid #ddd',
            }}
          >
            <Typography variant="subtitle1" style={{ marginBottom: '8px' }}>Output:</Typography>
            <pre style={{ margin: 0, fontFamily: 'monospace', whiteSpace: 'pre-wrap' }}>
              {step.executionOutput}
            </pre>
          </div>
        )}

        {/* Phase Guidance */}
        {authoringPhase && (
          <div style={{ marginTop: '16px', padding: '12px', backgroundColor: '#e8f5e9', borderRadius: '4px' }}>
            <Typography variant="subtitle1" style={{ marginBottom: '8px', fontWeight: 'medium' }}>
              Phase Guidance:
            </Typography>
            <Typography variant="body2" style={{ margin: 0 }}>
              {getPhaseGuidance()}
            </Typography>
          </div>
        )}
      </div>

      {/* Assistance Panel */}
      {showAssistantPanel && (
        <div style={{ padding: '16px', borderTop: '1px solid #e0e0e0' }}>
          <Typography variant="h6" style={{ marginBottom: '12px' }}>Copilot Assistance</Typography>
          
          <div style={{ 
            maxHeight: '200px', 
            overflowY: 'auto',
            marginBottom: '16px',
            padding: '8px',
            border: '1px solid #e0e0e0',
            borderRadius: '4px',
            backgroundColor: '#f9f9f9'
          }}>
            {assistantMessages.map((message, index) => (
              <div 
                key={index} 
                style={{
                  marginBottom: '10px',
                  textAlign: message.role === 'user' ? 'right' : 'left',
                }}
              >
                <div 
                  style={{
                    display: 'inline-block',
                    maxWidth: '80%',
                    padding: '10px',
                    borderRadius: '8px',
                    backgroundColor: message.role === 'user' ? '#1976d2' : '#ffffff',
                    color: message.role === 'user' ? 'white' : 'black',
                    boxShadow: '0 1px 2px rgba(0,0,0,0.1)',
                    border: message.role === 'assistant' ? '1px solid #e0e0e0' : 'none'
                  }}
                >
                  <Typography>{message.content}</Typography>
                  {message.role === 'assistant' && (
                    <button
                      onClick={() => handleApplySuggestion(message)}
                      style={{
                        marginTop: '8px',
                        padding: '4px 8px',
                        backgroundColor: '#1976d2',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }}
                    >
                      Apply Suggestion
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>

          <div style={{ display: 'flex', gap: '8px' }}>
            <textarea
              value={assistancePrompt}
              onChange={(e) => setAssistancePrompt(e.target.value)}
              placeholder="Ask for help with this step (e.g., 'Help me improve the code for this step')"
              style={{
                flexGrow: 1,
                padding: '8px',
                borderRadius: '4px',
                border: '1px solid #ddd',
                minHeight: '80px'
              }}
            />
            <button
              onClick={handleGetAssistance}
              disabled={!assistancePrompt.trim()}
              style={{
                alignSelf: 'flex-end',
                padding: '8px 16px',
                backgroundColor: '#1976d2',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: !assistancePrompt.trim() ? 'not-allowed' : 'pointer',
                opacity: !assistancePrompt.trim() ? 0.7 : 1
              }}
            >
              Ask Copilot
            </button>
          </div>
        </div>
      )}
    </div>
  );
};
