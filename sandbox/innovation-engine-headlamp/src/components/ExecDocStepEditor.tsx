import Typography from '@mui/material/Typography';
import React from 'react';
import { ExecDocStep, Message } from './ExecDocTypes';

interface ExecDocStepEditorProps {
  step: ExecDocStep;
  onStepChange: (updatedStep: ExecDocStep) => void;
  onRunStep: (stepId: string) => void;
  currentContext: string;
  currentNamespace: string;
  // authoringPhase param was removed as we no longer display phase guidance
}

export const ExecDocStepEditor: React.FC<ExecDocStepEditorProps> = ({
  step,
  onStepChange,
  onRunStep,
  currentContext,
  currentNamespace
}) => {
  const [isEditing, setIsEditing] = React.useState(false);
  const [assistancePrompt, setAssistancePrompt] = React.useState('');
  const [showAssistantPanel, setShowAssistantPanel] = React.useState(false);
  const [assistantMessages, setAssistantMessages] = React.useState<Message[]>([]);
  
  // Removed phase-specific guidance text
  
  const handleRunStep = () => {
    onRunStep(step.id);
  };

  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onStepChange({
      ...step,
      title: e.target.value
    });
  };

  const handleDescriptionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onStepChange({
      ...step,
      description: e.target.value
    });
  };

  const handleCodeChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onStepChange({
      ...step,
      code: e.target.value
    });
  };

  // New handlers for additional step properties
  const handleCodeBlockToggle = (e: React.ChangeEvent<HTMLInputElement>) => {
    const isCodeBlock = e.target.checked;
    onStepChange({
      ...step,
      isCodeBlock,
      // Initialize empty code if toggling to code block and no code exists
      code: isCodeBlock && !step.code ? '' : step.code
    });
  };

  const handleExpandedToggle = (e: React.ChangeEvent<HTMLInputElement>) => {
    onStepChange({
      ...step,
      isExpanded: e.target.checked
    });
  };

  const handleResetExecution = () => {
    onStepChange({
      ...step,
      executed: false,
      executionStatus: null,
      executionOutput: undefined
    });
  };

  const handleGetAssistance = () => {
    if (!assistancePrompt.trim()) return;

    // Add user message
    setAssistantMessages(prev => [
      ...prev,
      { role: 'user', content: assistancePrompt }
    ]);

    // Simulate Copilot response
    setTimeout(() => {
      setAssistantMessages(prev => [
        ...prev,
        { 
          role: 'assistant', 
          content: `Here's my suggestion for your request: "${assistancePrompt}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`
        }
      ]);
      setAssistancePrompt('');
    }, 1000);
  };

  const handleApplySuggestion = (message: Message) => {
    // Show options for where to apply the suggestion
    const applyToDescription = () => {
      onStepChange({
        ...step,
        description: step.description + '\n\n' + message.content
      });
      setShowAssistantPanel(false);
    };
    
    const applyToCode = () => {
      onStepChange({
        ...step,
        code: (step.code || '') + '\n\n' + message.content,
        isCodeBlock: true // Ensure we have a code block if applying to code
      });
      setShowAssistantPanel(false);
    };
    
    // Check if the message content appears to be code
    const appearsToBeCode = message.content.includes('```') || 
                           /\b(function|const|let|var|import|export|class|if|for|while)\b/.test(message.content);
    
    // Apply to the most appropriate place by default
    if (step.isCodeBlock && appearsToBeCode) {
      applyToCode();
    } else if (!step.isCodeBlock || !appearsToBeCode) {
      applyToDescription();
    } else {
      // If it's not clear, apply to description by default
      applyToDescription();
    }
  };

  // Render styles based on execution status
  const renderStatusBadge = () => {
    if (!step.executed) return null;
    
    let color = '';
    let text = '';
    
    switch(step.executionStatus) {
      case 'success':
        color = '#4caf50';
        text = 'Success';
        break;
      case 'failure':
        color = '#f44336';
        text = 'Failed';
        break;
      case 'running':
        color = '#2196f3';
        text = 'Running...';
        break;
      default:
        return null;
    }
    
    return (
      <span style={{
        backgroundColor: color,
        color: 'white',
        padding: '3px 8px',
        borderRadius: '12px',
        fontSize: '12px',
        marginLeft: '10px'
      }}>
        {text}
      </span>
    );
  };

  // Context warning if necessary
  const renderContextWarning = () => {
    // This is just a placeholder. In a real implementation, 
    // we'd compare the step's required context with the current context
    const stepRequiresContext = 'default';
    const stepRequiresNamespace = currentNamespace; // Using namespace to avoid linting error
    
    if (currentContext !== stepRequiresContext) {
      return (
        <div style={{ marginTop: '10px', padding: '8px', backgroundColor: '#fff3cd', borderRadius: '4px' }}>
          <Typography variant="body2" style={{ color: '#856404' }}>
            ⚠️ This step may require the "{stepRequiresContext}" context and "{stepRequiresNamespace}" namespace, 
            but you're currently in context "{currentContext}".
          </Typography>
        </div>
      );
    }
    return null;
  };

  return (
    <div
      style={{
        border: '1px solid #e0e0e0',
        borderRadius: '8px',
        marginBottom: '20px',
        overflow: 'hidden',
      }}
    >
      {/* Step Header */}
      <div
        style={{
          padding: '12px 16px',
          backgroundColor: '#f5f5f5',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          borderBottom: '1px solid #ddd',
        }}
      >
        {isEditing ? (
          <input
            type="text"
            value={step.title}
            onChange={handleTitleChange}
            style={{
              fontSize: '18px',
              fontWeight: 'bold',
              padding: '8px',
              width: '60%',
              borderRadius: '4px',
              border: '1px solid #ddd'
            }}
            placeholder="Step title"
          />
        ) : (
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <Typography variant="h6" style={{ margin: 0 }}>
              {step.title}
            </Typography>
            {renderStatusBadge()}
            {step.isCodeBlock && (
              <span style={{
                backgroundColor: '#e0f7fa',
                color: '#00838f',
                padding: '2px 8px',
                borderRadius: '12px',
                fontSize: '12px',
                marginLeft: '10px',
                display: 'flex',
                alignItems: 'center',
              }}>
                <span style={{ marginRight: '4px' }}>⚙️</span>
                Executable
              </span>
            )}
          </div>
        )}

        <div>
          <button
            onClick={() => setIsEditing(!isEditing)}
            style={{
              marginRight: '8px',
              padding: '6px 12px',
              backgroundColor: isEditing ? '#1976d2' : '#f0f0f0',
              color: isEditing ? 'white' : 'black',
              border: '1px solid ' + (isEditing ? '#1976d2' : '#ddd'),
              borderRadius: '4px',
              cursor: 'pointer',
              fontWeight: isEditing ? 'bold' : 'normal',
            }}
          >
            {isEditing ? 'Save Changes' : 'Edit Step'}
          </button>
          <button
            onClick={() => setShowAssistantPanel(!showAssistantPanel)}
            style={{
              marginRight: '8px',
              padding: '6px 12px',
              backgroundColor: showAssistantPanel ? '#9c27b0' : '#f0f0f0',
              color: showAssistantPanel ? 'white' : 'black',
              border: '1px solid ' + (showAssistantPanel ? '#9c27b0' : '#ddd'),
              borderRadius: '4px',
              cursor: 'pointer',
            }}
          >
            {showAssistantPanel ? 'Hide Help' : 'Get Help'}
          </button>
          {step.isCodeBlock && (
            <button
              onClick={handleRunStep}
              disabled={step.executionStatus === 'running'}
              aria-label={`Run step ${step.title}`}
              style={{
                padding: '6px 12px',
                backgroundColor: '#4caf50',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: step.executionStatus === 'running' ? 'not-allowed' : 'pointer',
                opacity: step.executionStatus === 'running' ? 0.7 : 1,
                display: 'inline-flex',
                alignItems: 'center',
              }}
            >
              <span style={{ marginRight: '4px' }}>▶️</span>
              {step.executionStatus === 'running' ? 'Running...' : 'Run'}
            </button>
          )}
        </div>
      </div>

      {/* Step Content */}
      <div style={{ padding: '16px' }}>
        {renderContextWarning()}
        
        {isEditing ? (
          <div>
            {/* Step Configuration Options */}
            <div style={{ 
              display: 'flex', 
              flexWrap: 'wrap', 
              gap: '16px',
              marginBottom: '16px',
              padding: '12px',
              backgroundColor: '#f5f5f5',
              borderRadius: '4px'
            }}>
              <label style={{ 
                display: 'flex',
                alignItems: 'center',
                cursor: 'pointer' 
              }}>
                <input 
                  type="checkbox" 
                  checked={step.isCodeBlock}
                  onChange={(e) => handleCodeBlockToggle(e)}
                  style={{ marginRight: '8px' }}
                />
                <span>Contains executable code</span>
              </label>
              
              <label style={{ 
                display: 'flex',
                alignItems: 'center',
                cursor: 'pointer' 
              }}>
                <input 
                  type="checkbox" 
                  checked={step.isExpanded}
                  onChange={(e) => handleExpandedToggle(e)}
                  style={{ marginRight: '8px' }}
                />
                <span>Expanded by default</span>
              </label>
              
              {step.executed && (
                <button
                  onClick={handleResetExecution}
                  style={{
                    padding: '4px 8px',
                    backgroundColor: '#f0f0f0',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    cursor: 'pointer',
                  }}
                >
                  Reset Execution Status
                </button>
              )}
            </div>

            <Typography variant="subtitle1" style={{ marginBottom: '8px' }}>Description:</Typography>
            <textarea
              value={step.description}
              onChange={handleDescriptionChange}
              onKeyDown={(e) => {
                // Handle CTRL+ENTER to save changes and exit edit mode
                if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
                  e.preventDefault(); // Prevent default behavior (newline)
                  setIsEditing(false); // Exit edit mode
                }
              }}
              placeholder="Enter description for this step. Press CTRL+ENTER to save changes."
              style={{
                width: '100%',
                minHeight: '200px',
                padding: '8px',
                marginBottom: '16px',
                borderRadius: '4px',
                border: '1px solid #ddd',
                fontSize: '14px',
                lineHeight: '1.5',
              }}
            />

            {step.isCodeBlock && (
              <div>
                <Typography variant="subtitle1" style={{ marginBottom: '8px' }}>Code:</Typography>
                <textarea
                  value={step.code || ''}
                  onChange={handleCodeChange}
                  onKeyDown={(e) => {
                    // Handle CTRL+ENTER to save changes and exit edit mode
                    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
                      e.preventDefault(); // Prevent default behavior (newline)
                      setIsEditing(false); // Exit edit mode
                    }
                  }}
                  style={{
                    width: '100%',
                    minHeight: '250px',
                    padding: '8px',
                    fontFamily: 'monospace',
                    backgroundColor: '#f8f8f8',
                    borderRadius: '4px',
                    border: '1px solid #ddd',
                    fontSize: '14px',
                    lineHeight: '1.5',
                  }}
                  placeholder="Enter executable code here. Press CTRL+ENTER to save changes."
                />
                <Typography variant="caption" color="textSecondary" style={{ display: 'block', marginTop: '4px' }}>
                  This code will be executed when the user runs this step.
                </Typography>
              </div>
            )}
          </div>
        ) : (
          <div>
            <Typography variant="body1" style={{ whiteSpace: 'pre-wrap', marginBottom: '16px' }}>
              {step.description}
            </Typography>

            {step.isCodeBlock && step.code && (
              <div
                style={{
                  backgroundColor: '#f8f8f8',
                  padding: '12px',
                  borderRadius: '4px',
                  marginBottom: '16px',
                  overflowX: 'auto',
                }}
              >
                <pre style={{ margin: 0, fontFamily: 'monospace' }}>{step.code}</pre>
              </div>
            )}
          </div>
        )}

        {/* Execution Output */}
        {step.executed && step.executionOutput && (
          <div
            style={{
              backgroundColor: '#f8f8f8',
              padding: '12px',
              borderRadius: '4px',
              marginTop: '16px',
              border: '1px solid #ddd',
            }}
          >
            <Typography variant="subtitle1" style={{ marginBottom: '8px' }}>Output:</Typography>
            <pre style={{ margin: 0, fontFamily: 'monospace', whiteSpace: 'pre-wrap' }}>
              {step.executionOutput}
            </pre>
          </div>
        )}

        {/* Phase guidance removed */}
      </div>

      {/* Assistance Panel */}
      {showAssistantPanel && (
        <div style={{ padding: '16px', borderTop: '1px solid #e0e0e0' }}>
          <Typography variant="h6" style={{ marginBottom: '12px' }}>Copilot Assistance</Typography>
          
          <div style={{ 
            maxHeight: '200px', 
            overflowY: 'auto',
            marginBottom: '16px',
            padding: '8px',
            border: '1px solid #e0e0e0',
            borderRadius: '4px',
            backgroundColor: '#f9f9f9'
          }}>
            {assistantMessages.map((message, index) => (
              <div 
                key={index} 
                style={{
                  marginBottom: '10px',
                  textAlign: message.role === 'user' ? 'right' : 'left',
                }}
              >
                <div 
                  style={{
                    display: 'inline-block',
                    maxWidth: '80%',
                    padding: '10px',
                    borderRadius: '8px',
                    backgroundColor: message.role === 'user' ? '#1976d2' : '#ffffff',
                    color: message.role === 'user' ? 'white' : 'black',
                    boxShadow: '0 1px 2px rgba(0,0,0,0.1)',
                    border: message.role === 'assistant' ? '1px solid #e0e0e0' : 'none'
                  }}
                >
                  <Typography>{message.content}</Typography>
                  {message.role === 'assistant' && (
                    <div style={{ 
                      marginTop: '8px', 
                      display: 'flex',
                      flexWrap: 'wrap',
                      gap: '8px'
                    }}>
                      <button
                        onClick={() => handleApplySuggestion(message)}
                        style={{
                          padding: '4px 8px',
                          backgroundColor: '#1976d2',
                          color: 'white',
                          border: 'none',
                          borderRadius: '4px',
                          cursor: 'pointer',
                          fontSize: '12px'
                        }}
                      >
                        Apply Suggestion
                      </button>
                      
                      {step.isCodeBlock && (
                        <div style={{ display: 'flex', gap: '4px' }}>
                          <button
                            onClick={() => {
                              onStepChange({
                                ...step,
                                description: step.description + '\n\n' + message.content
                              });
                              setShowAssistantPanel(false);
                            }}
                            style={{
                              padding: '4px 8px',
                              backgroundColor: '#f0f0f0',
                              border: '1px solid #ddd',
                              borderRadius: '4px 0 0 4px',
                              cursor: 'pointer',
                              fontSize: '12px'
                            }}
                          >
                            Apply to Description
                          </button>
                          <button
                            onClick={() => {
                              onStepChange({
                                ...step,
                                code: (step.code || '') + '\n\n' + message.content
                              });
                              setShowAssistantPanel(false);
                            }}
                            style={{
                              padding: '4px 8px',
                              backgroundColor: '#f0f0f0',
                              border: '1px solid #ddd',
                              borderRadius: '0 4px 4px 0',
                              cursor: 'pointer',
                              fontSize: '12px'
                            }}
                          >
                            Apply to Code
                          </button>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>

          <div style={{ display: 'flex', gap: '8px' }}>
            <textarea
              value={assistancePrompt}
              onChange={(e) => setAssistancePrompt(e.target.value)}
              onKeyDown={(e) => {
                // Handle CTRL+ENTER to submit assistance request
                if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && assistancePrompt.trim()) {
                  e.preventDefault(); // Prevent default behavior (newline)
                  handleGetAssistance();
                }
              }}
              placeholder="Ask for help with this step (e.g., 'Help me improve the code for this step'). Press CTRL+ENTER to submit."
              style={{
                flexGrow: 1,
                padding: '8px',
                borderRadius: '4px',
                border: '1px solid #ddd',
                minHeight: '150px',
                fontSize: '14px',
                lineHeight: '1.5'
              }}
            />
            <button
              onClick={handleGetAssistance}
              disabled={!assistancePrompt.trim()}
              style={{
                alignSelf: 'flex-end',
                padding: '8px 16px',
                backgroundColor: '#1976d2',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: !assistancePrompt.trim() ? 'not-allowed' : 'pointer',
                opacity: !assistancePrompt.trim() ? 0.7 : 1
              }}
            >
              Ask Copilot
            </button>
          </div>
        </div>
      )}
    </div>
  );
};
