import Typography from '@mui/material/Typography';
import React from 'react';
import { API } from '../api'; // Import the API utility
import { Message } from './ExecDocTypes';

interface OverviewAuthoringProps {
  initialOverview?: string;
  onSaveOverview: (overview: string) => void;
  onGenerateSteps: () => void;
  authoringPhase?: 'create-overview' | 'implement-content' | 'refine-content';
}

export const OverviewAuthoring: React.FC<OverviewAuthoringProps> = ({
  initialOverview = '',
  onSaveOverview,
  onGenerateSteps,
  authoringPhase = 'create-overview'
}) => {
  const [generatedOverview, setGeneratedOverview] = React.useState(initialOverview);
  const [isEditingOverview, setIsEditingOverview] = React.useState(false);
  
  // State for Azure AI integration
  const [azureAITopic, setAzureAITopic] = React.useState('');
  const [isAzureAIGenerating, setIsAzureAIGenerating] = React.useState(false);
  const [azureAIError, setAzureAIError] = React.useState<string | null>(null);
  
  // State for help panel and draggable divider
  const [isHelpPanelCollapsed, setIsHelpPanelCollapsed] = React.useState(false);
  const [helpMessages, setHelpMessages] = React.useState<Message[]>([]);
  const [helpPrompt, setHelpPrompt] = React.useState('');
  const [dividerPosition, setDividerPosition] = React.useState(70); // Default 70% for document, 30% for help panel
  const [isDragging, setIsDragging] = React.useState(false);
  
  // Use ref to maintain a consistent container height
  const containerRef = React.useRef<HTMLDivElement>(null);
  
  // Add effect to handle resize events and maintain panel heights
  React.useEffect(() => {
    // Function to ensure panels maintain equal heights
    const handleResize = () => {
      if (containerRef.current) {
        // Force grid layout recalculation
        containerRef.current.style.display = 'grid';
      }
    };
    
    // Add event listener for window resize
    window.addEventListener('resize', handleResize);
    
    // Initial call to set proper heights
    handleResize();
    
    // Cleanup event listener on component unmount
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);
  
  // Removed unused handleSendPrompt function
  
  // Handle proceeding to step generation
  const handleProceedToSteps = () => {
    onSaveOverview(generatedOverview);
    onGenerateSteps();
  };
  
  // Handle help request for overview discussion
  const handleSendHelpPrompt = () => {
    if (!helpPrompt.trim()) return;

    // Add user message to help conversation
    setHelpMessages(prev => [...prev, { role: 'user', content: helpPrompt }]);

    // Simulate Copilot response
    setTimeout(() => {
      setHelpMessages(prev => [
        ...prev,
        {
          role: 'assistant',
          content: `Here are my thoughts about your overview based on your request: "${helpPrompt}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`
        }
      ]);
      setHelpPrompt('');
    }, 1000);
  };

  // Handle generating overview with Azure AI
  const handleGenerateWithAzureAI = async () => {
    if (!azureAITopic.trim()) return;
    
    setIsAzureAIGenerating(true);
    setAzureAIError(null);
    
    try {
      // Create a customized topic for executable documentation
      const formattedTopic = `Kubernetes executable document for: ${azureAITopic}`;
      
      // Call the Azure AI service to generate an overview with the executable document prompt
      const overview = await API.generateOverview(formattedTopic);
      
      // Update the generated overview
      setGeneratedOverview(overview);
      
      // No need to add messages since we removed the messages panel
      
      // Reset states
      setAzureAITopic('');
      
      // If not in editing mode, switch to editing mode to show the changes
      setIsEditingOverview(true);
    } catch (error: any) {
      setAzureAIError(error.message || 'An error occurred while generating the overview');
      
      // Error is already displayed in the UI via azureAIError
    } finally {
      setIsAzureAIGenerating(false);
    }
  };

  // Apply Copilot's suggestion to the overview
  const handleApplySuggestion = (message: Message) => {
    if (message.role === 'assistant') {
      // In a real implementation, this would be more sophisticated
      // to extract the actual suggestion from the message
      let suggestion = message.content;
      
      // Remove the prefix if it exists
      suggestion = suggestion.replace(/Here are my thoughts about your overview based on your request: "[^"]*"\. /, '');
      suggestion = suggestion.replace('This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.', '');
      
      // Always append the suggestion to the existing overview
      setGeneratedOverview(prev => {
        const separator = prev.trim() ? '\n\n' : '';
        return prev.trim() + separator + suggestion.trim();
      });
      
      // If not in editing mode, switch to editing mode to show the changes
      if (!isEditingOverview) {
        setIsEditingOverview(true);
      }
    }
  };
  
  // Handle divider drag operation
  const handleDividerMouseDown = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsDragging(true);

    const handleMouseMove = (e: MouseEvent) => {
      // Calculate divider position as percentage of parent width
      const container = document.getElementById('overview-authoring-container');
      if (container) {
        const containerRect = container.getBoundingClientRect();
        const newPosition = ((e.clientX - containerRect.left) / containerRect.width) * 100;
        
        // Limit the range to keep both panels visible (min 30% for each)
        if (newPosition > 30 && newPosition < 70) {
          setDividerPosition(newPosition);
        }
      }
    };

    const handleMouseUp = () => {
      setIsDragging(false);
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };

    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  // Toggle help panel collapse state - used by the collapse/expand buttons
  const toggleHelpPanelCollapse = () => {
    setIsHelpPanelCollapsed(prev => !prev);
  };
  
  // Get phase-appropriate button text
  const getActionButtonText = () => {
    switch (authoringPhase) {
      case 'create-overview':
        return 'Generate Steps';
      default:
        return 'Generate Steps';
    }
  };
  
  return (
    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
      <Typography variant="h5" style={{ marginBottom: '16px' }}>
        Create & Edit Document Overview
      </Typography>
      
      {/* Phase guidance */}
      <div style={{ 
        padding: '8px 12px', 
        backgroundColor: '#f0f9ff', 
        borderLeft: '4px solid #1976d2',
        marginBottom: '16px'
      }}>
        <Typography variant="body2">
          {authoringPhase === 'create-overview' 
            ? 'Step 1: Create an overview that describes what this document will accomplish.' 
            : 'Step 2: Refine your overview to ensure it accurately describes the intended workflow.'}
        </Typography>
      </div>
      
      {/* Azure AI Overview Generation Section */}
      <div style={{ 
        padding: '12px',
        backgroundColor: '#e3f2fd', 
        borderRadius: '4px',
        marginBottom: '16px',
        border: '1px solid #bbdefb'
      }}>
        <Typography variant="subtitle1" style={{ fontWeight: 'bold', marginBottom: '8px' }}>
          Generate with Azure AI
        </Typography>
        <Typography variant="body2" style={{ marginBottom: '12px' }}>
          Use Azure OpenAI to generate an architectural overview for your document.
        </Typography>
        
        <div style={{ display: 'flex', gap: '8px', marginBottom: '12px' }}>
          <div style={{ flex: 1 }}>
            <input
              type="text"
              value={azureAITopic}
              onChange={(e) => setAzureAITopic(e.target.value)}
              placeholder="E.g., Kubernetes Deployment with Service Mesh"
              style={{
                width: '100%',
                padding: '8px 12px',
                border: '1px solid #ccc',
                borderRadius: '4px',
                fontSize: '14px'
              }}
              disabled={isAzureAIGenerating}
            />
          </div>
          <button
            onClick={handleGenerateWithAzureAI}
            disabled={isAzureAIGenerating || !azureAITopic.trim()}
            style={{
              padding: '8px 16px',
              backgroundColor: '#0078d4',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: isAzureAIGenerating || !azureAITopic.trim() ? 'not-allowed' : 'pointer',
              opacity: isAzureAIGenerating || !azureAITopic.trim() ? 0.7 : 1
            }}
          >
            {isAzureAIGenerating ? 'Generating...' : 'Generate Overview'}
          </button>
        </div>
        
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: '8px' }}>
          <div>
            {azureAIError && (
              <div style={{ 
                padding: '8px', 
                backgroundColor: '#ffebee', 
                border: '1px solid #ffcdd2',
                borderRadius: '4px',
                color: '#c62828'
              }}>
                <Typography variant="body2">{azureAIError}</Typography>
              </div>
            )}
          </div>
          
          {generatedOverview.trim() && (
            <button
              onClick={handleProceedToSteps}
              disabled={!generatedOverview.trim()}
              style={{
                padding: '8px 16px',
                backgroundColor: '#4caf50',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: !generatedOverview.trim() ? 'not-allowed' : 'pointer',
                opacity: !generatedOverview.trim() ? 0.7 : 1,
                fontWeight: 'bold'
              }}
            >
              {getActionButtonText()}
            </button>
          )}
        </div>
      </div>
      
      {/* Main Content Area with side-by-side layout using CSS Grid for equal heights */}
      <div 
        id="overview-authoring-container"
        ref={containerRef}
        style={{ 
          flex: 1, 
          display: 'grid',
          gridTemplateColumns: `${dividerPosition}% 6px calc(${100-dividerPosition-0.6}%)`,
          gridTemplateRows: '1fr', // Force all rows to be the same height (full height)
          overflow: 'hidden',
          position: 'relative',
          minHeight: '600px' // Set a good baseline minimum height
        }}
      >
        {/* Main Panel Area - now only shows the preview/edit panel */}
        <div 
          style={{ 
            height: '100%',
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden'
          }}
        >
          {/* Preview Panel */}
          <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
            <div style={{ marginBottom: '16px', display: 'flex', justifyContent: 'space-between' }}>
              <Typography variant="subtitle1">
                {isEditingOverview ? 'Edit Overview' : 'Preview Overview'}
              </Typography>
              <div>
                <button
                  onClick={() => setIsEditingOverview(!isEditingOverview)}
                  style={{
                    padding: '6px 12px',
                    backgroundColor: '#f0f0f0',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}
                >
                  {isEditingOverview ? 'Preview' : 'Edit'}
                </button>
              </div>
            </div>
              
            <div 
              style={{ 
                flex: 1,
                display: 'flex', // Add flex display
                flexDirection: 'column',
                border: '1px solid #e0e0e0',
                borderRadius: '4px',
                padding: '12px',
                backgroundColor: '#ffffff',
                overflowY: 'auto'
              }}
            >
              {isEditingOverview ? (
                <textarea
                  value={generatedOverview}
                  onChange={(e) => setGeneratedOverview(e.target.value)}
                  onKeyDown={(e) => {
                    // Handle CTRL+ENTER to save changes and exit edit mode
                    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && generatedOverview.trim()) {
                      e.preventDefault(); // Prevent default behavior (newline)
                      setIsEditingOverview(false); // Exit edit mode
                    }
                  }}
                  placeholder="Enter your document overview content. Press CTRL+ENTER to save changes."
                  style={{
                    width: '100%',
                    height: '100%', 
                    padding: '8px',
                    borderRadius: '4px',
                    border: '1px solid #ddd',
                    fontFamily: 'monospace',
                    fontSize: '14px',
                    lineHeight: '1.5',
                    resize: 'none'
                  }}
                />
              ) : (
                <div 
                  style={{ 
                    padding: '16px',
                    flex: 1, // Add flex: 1 to fill available space
                    maxWidth: '800px', 
                    margin: '0 auto',
                    fontFamily: 'system-ui, -apple-system, sans-serif',
                    lineHeight: 1.6,
                    overflow: 'auto' // Add overflow to handle content exceeding dimensions
                  }}
                >
                  {generatedOverview.split('\n').map((line, i) => {
                    if (line.startsWith('# ')) {
                      return <Typography key={i} variant="h4" style={{ marginBottom: '16px' }}>{line.substring(2)}</Typography>;
                    } else if (line.startsWith('## ')) {
                      return <Typography key={i} variant="h5" style={{ marginTop: '24px', marginBottom: '12px' }}>{line.substring(3)}</Typography>;
                    } else if (line.startsWith('- ')) {
                      return <Typography key={i} component="li" style={{ marginLeft: '20px', marginBottom: '8px' }}>{line.substring(2)}</Typography>;
                    } else if (line === '') {
                      return <br key={i} />;
                    } else {
                      return <Typography key={i} paragraph>{line}</Typography>;
                    }
                  })}
                </div>
              )}
            </div>
          </div>
        </div>
        
        {/* Draggable Divider */}
        <div
          role="separator"
          aria-orientation="vertical"
          aria-label="Resize panels"
          style={{
            width: '6px',
            height: '100%',
            background: '#e0e0e0',
            cursor: 'col-resize',
            userSelect: 'none',
            transition: isDragging ? 'none' : 'background 0.2s',
            position: 'relative'
          }}
          onMouseDown={handleDividerMouseDown}
          onKeyDown={(e) => {
            // Handle keyboard resizing with arrow keys
            if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
              e.preventDefault();
              const step = e.key === 'ArrowLeft' ? -2 : 2;
              const newPosition = dividerPosition + step;
              if (newPosition > 30 && newPosition < 70) {
                setDividerPosition(newPosition);
              }
            }
          }}
          onFocus={(e) => {
            e.currentTarget.style.background = '#1976d2';
            e.currentTarget.style.outline = '2px solid #1976d2';
          }}
          onBlur={(e) => {
            e.currentTarget.style.background = '#e0e0e0';
            e.currentTarget.style.outline = 'none';
          }}
        >
          <div
            style={{
              position: 'absolute',
              left: '50%',
              top: '50%',
              transform: 'translate(-50%, -50%)',
              height: '30px',
              width: '4px',
              background: isDragging ? '#1976d2' : '#aaa',
              borderRadius: '2px'
            }}
          />
        </div>

        {/* Copilot Help Panel on the right side */}
        <div 
          style={{ 
            height: '100%', 
            display: isHelpPanelCollapsed ? 'none' : 'flex',
            flexDirection: 'column',
            overflow: 'hidden',
            padding: '8px',
            backgroundColor: '#fafafa',
            borderLeft: '1px solid #e0e0e0',
          }}
        >
          <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center', 
            marginBottom: '12px' 
          }}>
            <Typography variant="h6">Copilot Assistance</Typography>
            <button
              onClick={toggleHelpPanelCollapse}
              aria-label="Collapse Copilot assistance panel"
              title="Collapse Copilot assistance panel"
              style={{
                padding: '3px 6px',
                backgroundColor: '#f0f0f0',
                border: '1px solid #ddd',
                borderRadius: '4px',
                fontSize: '12px',
                cursor: 'pointer'
              }}
            >
              Collapse
            </button>
          </div>
          
          <div style={{ 
            flex: 1, 
            display: 'flex',
            flexDirection: 'column',
            overflowY: 'auto',
            marginBottom: '16px',
            padding: '8px',
            border: '1px solid #e0e0e0',
            borderRadius: '4px',
            backgroundColor: '#f9f9f9'
          }}>
            {helpMessages.length === 0 && (
              <Typography color="textSecondary" align="center" style={{ marginTop: '20px' }}>
                Ask Copilot for help with improving your overview
              </Typography>
            )}
            
            {helpMessages.map((message, index) => (
              <div 
                key={index} 
                style={{
                  marginBottom: '10px',
                  textAlign: message.role === 'user' ? 'right' : 'left',
                }}
              >
                <div 
                  style={{
                    display: 'inline-block',
                    maxWidth: '80%',
                    padding: '10px',
                    borderRadius: '8px',
                    backgroundColor: message.role === 'user' ? '#1976d2' : '#ffffff',
                    color: message.role === 'user' ? 'white' : 'black',
                    boxShadow: '0 1px 2px rgba(0,0,0,0.1)',
                    border: message.role === 'assistant' ? '1px solid #e0e0e0' : 'none'
                  }}
                >
                  <Typography>{message.content}</Typography>
                  {message.role === 'assistant' && (
                    <div style={{ 
                      marginTop: '8px', 
                      display: 'flex',
                      flexWrap: 'wrap',
                      gap: '8px'
                    }}>
                      <button
                        onClick={() => handleApplySuggestion(message)}
                        style={{
                          padding: '4px 8px',
                          backgroundColor: '#1976d2',
                          color: 'white',
                          border: 'none',
                          borderRadius: '4px',
                          cursor: 'pointer',
                          fontSize: '12px'
                        }}
                      >
                        Apply Suggestion
                      </button>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>

          <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
            <textarea
              value={helpPrompt}
              onChange={(e) => setHelpPrompt(e.target.value)}
              onKeyDown={(e) => {
                // Handle CTRL+ENTER to submit help request
                if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && helpPrompt.trim()) {
                  e.preventDefault(); // Prevent default behavior (newline)
                  handleSendHelpPrompt();
                }
              }}
              placeholder="Ask Copilot for help with your overview (e.g., 'Could you suggest a better structure for this overview?'). Press CTRL+ENTER to submit."
              style={{
                width: '100%',
                padding: '8px',
                borderRadius: '4px',
                border: '1px solid #ddd',
                minHeight: '100px', // Increased height for better usability
                fontSize: '14px',
                lineHeight: '1.5',
                fontFamily: 'monospace' // Match the overview editor font
              }}
            />
            <button
              onClick={handleSendHelpPrompt}
              disabled={!helpPrompt.trim()}
              style={{
                alignSelf: 'flex-end',
                padding: '8px 16px',
                backgroundColor: '#1976d2',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: !helpPrompt.trim() ? 'not-allowed' : 'pointer',
                opacity: !helpPrompt.trim() ? 0.7 : 1
              }}
            >
              Ask Copilot
            </button>
          </div>
        </div>
        
        {/* Collapsed panel toggle button */}
        {isHelpPanelCollapsed && (
          <div 
            style={{ 
              position: 'absolute',
              right: '0',
              top: '50%',
              transform: 'translateY(-50%)',
              zIndex: 1
            }}
          >
            <button
              onClick={toggleHelpPanelCollapse}
              aria-label="Open Copilot assistance panel"
              title="Open Copilot assistance panel"
              style={{
                padding: '8px',
                backgroundColor: '#1976d2',
                color: 'white',
                border: 'none',
                borderRadius: '4px 0 0 4px',
                cursor: 'pointer',
                boxShadow: '-2px 0 4px rgba(0,0,0,0.1)'
              }}
            >
              ≪ Open Copilot
            </button>
          </div>
        )}
      </div>
    </div>
  );
};
